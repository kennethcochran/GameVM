//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PythonParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace GameVM.Compiler.Python.ANTLR {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class PythonParser : PythonParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, TYPE_COMMENT=3, FSTRING_START=4, FSTRING_MIDDLE=5, 
		FSTRING_END=6, FALSE=7, AWAIT=8, ELSE=9, IMPORT=10, PASS=11, NONE=12, 
		BREAK=13, EXCEPT=14, IN=15, RAISE=16, TRUE=17, CLASS=18, FINALLY=19, IS=20, 
		RETURN=21, AND=22, CONTINUE=23, FOR=24, LAMBDA=25, TRY=26, AS=27, DEF=28, 
		FROM=29, NONLOCAL=30, WHILE=31, ASSERT=32, DEL=33, GLOBAL=34, NOT=35, 
		WITH=36, ASYNC=37, ELIF=38, IF=39, OR=40, YIELD=41, LPAR=42, LSQB=43, 
		LBRACE=44, RPAR=45, RSQB=46, RBRACE=47, DOT=48, COLON=49, COMMA=50, SEMI=51, 
		PLUS=52, MINUS=53, STAR=54, SLASH=55, VBAR=56, AMPER=57, LESS=58, GREATER=59, 
		EQUAL=60, PERCENT=61, EQEQUAL=62, NOTEQUAL=63, LESSEQUAL=64, GREATEREQUAL=65, 
		TILDE=66, CIRCUMFLEX=67, LEFTSHIFT=68, RIGHTSHIFT=69, DOUBLESTAR=70, PLUSEQUAL=71, 
		MINEQUAL=72, STAREQUAL=73, SLASHEQUAL=74, PERCENTEQUAL=75, AMPEREQUAL=76, 
		VBAREQUAL=77, CIRCUMFLEXEQUAL=78, LEFTSHIFTEQUAL=79, RIGHTSHIFTEQUAL=80, 
		DOUBLESTAREQUAL=81, DOUBLESLASH=82, DOUBLESLASHEQUAL=83, AT=84, ATEQUAL=85, 
		RARROW=86, ELLIPSIS=87, COLONEQUAL=88, EXCLAMATION=89, NAME=90, NUMBER=91, 
		STRING=92, NEWLINE=93, COMMENT=94, WS=95, EXPLICIT_LINE_JOINING=96, ERRORTOKEN=97;
	public const int
		RULE_file_input = 0, RULE_interactive = 1, RULE_eval = 2, RULE_func_type = 3, 
		RULE_fstring_input = 4, RULE_statements = 5, RULE_statement = 6, RULE_statement_newline = 7, 
		RULE_simple_stmts = 8, RULE_simple_stmt = 9, RULE_compound_stmt = 10, 
		RULE_assignment = 11, RULE_annotated_rhs = 12, RULE_augassign = 13, RULE_return_stmt = 14, 
		RULE_raise_stmt = 15, RULE_global_stmt = 16, RULE_nonlocal_stmt = 17, 
		RULE_del_stmt = 18, RULE_yield_stmt = 19, RULE_assert_stmt = 20, RULE_import_stmt = 21, 
		RULE_import_name = 22, RULE_import_from = 23, RULE_import_from_targets = 24, 
		RULE_import_from_as_names = 25, RULE_import_from_as_name = 26, RULE_dotted_as_names = 27, 
		RULE_dotted_as_name = 28, RULE_dotted_name = 29, RULE_block = 30, RULE_decorators = 31, 
		RULE_class_def = 32, RULE_class_def_raw = 33, RULE_function_def = 34, 
		RULE_function_def_raw = 35, RULE_params = 36, RULE_parameters = 37, RULE_slash_no_default = 38, 
		RULE_slash_with_default = 39, RULE_star_etc = 40, RULE_kwds = 41, RULE_param_no_default = 42, 
		RULE_param_no_default_star_annotation = 43, RULE_param_with_default = 44, 
		RULE_param_maybe_default = 45, RULE_param = 46, RULE_param_star_annotation = 47, 
		RULE_annotation = 48, RULE_star_annotation = 49, RULE_default_assignment = 50, 
		RULE_if_stmt = 51, RULE_elif_stmt = 52, RULE_else_block = 53, RULE_while_stmt = 54, 
		RULE_for_stmt = 55, RULE_with_stmt = 56, RULE_with_item = 57, RULE_try_stmt = 58, 
		RULE_except_block = 59, RULE_except_star_block = 60, RULE_finally_block = 61, 
		RULE_match_stmt = 62, RULE_subject_expr = 63, RULE_case_block = 64, RULE_guard = 65, 
		RULE_patterns = 66, RULE_pattern = 67, RULE_as_pattern = 68, RULE_or_pattern = 69, 
		RULE_closed_pattern = 70, RULE_literal_pattern = 71, RULE_literal_expr = 72, 
		RULE_complex_number = 73, RULE_signed_number = 74, RULE_signed_real_number = 75, 
		RULE_real_number = 76, RULE_imaginary_number = 77, RULE_capture_pattern = 78, 
		RULE_pattern_capture_target = 79, RULE_wildcard_pattern = 80, RULE_value_pattern = 81, 
		RULE_attr = 82, RULE_name_or_attr = 83, RULE_group_pattern = 84, RULE_sequence_pattern = 85, 
		RULE_open_sequence_pattern = 86, RULE_maybe_sequence_pattern = 87, RULE_maybe_star_pattern = 88, 
		RULE_star_pattern = 89, RULE_mapping_pattern = 90, RULE_items_pattern = 91, 
		RULE_key_value_pattern = 92, RULE_double_star_pattern = 93, RULE_class_pattern = 94, 
		RULE_positional_patterns = 95, RULE_keyword_patterns = 96, RULE_keyword_pattern = 97, 
		RULE_type_alias = 98, RULE_type_params = 99, RULE_type_param_seq = 100, 
		RULE_type_param = 101, RULE_type_param_bound = 102, RULE_expressions = 103, 
		RULE_expression = 104, RULE_yield_expr = 105, RULE_star_expressions = 106, 
		RULE_star_expression = 107, RULE_star_named_expressions = 108, RULE_star_named_expression = 109, 
		RULE_assignment_expression = 110, RULE_named_expression = 111, RULE_disjunction = 112, 
		RULE_conjunction = 113, RULE_inversion = 114, RULE_comparison = 115, RULE_compare_op_bitwise_or_pair = 116, 
		RULE_eq_bitwise_or = 117, RULE_noteq_bitwise_or = 118, RULE_lte_bitwise_or = 119, 
		RULE_lt_bitwise_or = 120, RULE_gte_bitwise_or = 121, RULE_gt_bitwise_or = 122, 
		RULE_notin_bitwise_or = 123, RULE_in_bitwise_or = 124, RULE_isnot_bitwise_or = 125, 
		RULE_is_bitwise_or = 126, RULE_bitwise_or = 127, RULE_bitwise_xor = 128, 
		RULE_bitwise_and = 129, RULE_shift_expr = 130, RULE_sum = 131, RULE_term = 132, 
		RULE_factor = 133, RULE_power = 134, RULE_await_primary = 135, RULE_primary = 136, 
		RULE_slices = 137, RULE_slice = 138, RULE_atom = 139, RULE_group = 140, 
		RULE_lambdef = 141, RULE_lambda_params = 142, RULE_lambda_parameters = 143, 
		RULE_lambda_slash_no_default = 144, RULE_lambda_slash_with_default = 145, 
		RULE_lambda_star_etc = 146, RULE_lambda_kwds = 147, RULE_lambda_param_no_default = 148, 
		RULE_lambda_param_with_default = 149, RULE_lambda_param_maybe_default = 150, 
		RULE_lambda_param = 151, RULE_fstring_middle = 152, RULE_fstring_replacement_field = 153, 
		RULE_fstring_conversion = 154, RULE_fstring_full_format_spec = 155, RULE_fstring_format_spec = 156, 
		RULE_fstring = 157, RULE_string = 158, RULE_strings = 159, RULE_list = 160, 
		RULE_tuple = 161, RULE_set = 162, RULE_dict = 163, RULE_double_starred_kvpairs = 164, 
		RULE_double_starred_kvpair = 165, RULE_kvpair = 166, RULE_for_if_clauses = 167, 
		RULE_for_if_clause = 168, RULE_listcomp = 169, RULE_setcomp = 170, RULE_genexp = 171, 
		RULE_dictcomp = 172, RULE_arguments = 173, RULE_args = 174, RULE_kwargs = 175, 
		RULE_starred_expression = 176, RULE_kwarg_or_starred = 177, RULE_kwarg_or_double_starred = 178, 
		RULE_star_targets = 179, RULE_star_targets_list_seq = 180, RULE_star_targets_tuple_seq = 181, 
		RULE_star_target = 182, RULE_target_with_star_atom = 183, RULE_star_atom = 184, 
		RULE_single_target = 185, RULE_single_subscript_attribute_target = 186, 
		RULE_t_primary = 187, RULE_del_targets = 188, RULE_del_target = 189, RULE_del_t_atom = 190, 
		RULE_type_expressions = 191, RULE_func_type_comment = 192, RULE_soft_kw_type = 193, 
		RULE_soft_kw_match = 194, RULE_soft_kw_case = 195, RULE_soft_kw_wildcard = 196, 
		RULE_soft_kw__not__wildcard = 197;
	public static readonly string[] ruleNames = {
		"file_input", "interactive", "eval", "func_type", "fstring_input", "statements", 
		"statement", "statement_newline", "simple_stmts", "simple_stmt", "compound_stmt", 
		"assignment", "annotated_rhs", "augassign", "return_stmt", "raise_stmt", 
		"global_stmt", "nonlocal_stmt", "del_stmt", "yield_stmt", "assert_stmt", 
		"import_stmt", "import_name", "import_from", "import_from_targets", "import_from_as_names", 
		"import_from_as_name", "dotted_as_names", "dotted_as_name", "dotted_name", 
		"block", "decorators", "class_def", "class_def_raw", "function_def", "function_def_raw", 
		"params", "parameters", "slash_no_default", "slash_with_default", "star_etc", 
		"kwds", "param_no_default", "param_no_default_star_annotation", "param_with_default", 
		"param_maybe_default", "param", "param_star_annotation", "annotation", 
		"star_annotation", "default_assignment", "if_stmt", "elif_stmt", "else_block", 
		"while_stmt", "for_stmt", "with_stmt", "with_item", "try_stmt", "except_block", 
		"except_star_block", "finally_block", "match_stmt", "subject_expr", "case_block", 
		"guard", "patterns", "pattern", "as_pattern", "or_pattern", "closed_pattern", 
		"literal_pattern", "literal_expr", "complex_number", "signed_number", 
		"signed_real_number", "real_number", "imaginary_number", "capture_pattern", 
		"pattern_capture_target", "wildcard_pattern", "value_pattern", "attr", 
		"name_or_attr", "group_pattern", "sequence_pattern", "open_sequence_pattern", 
		"maybe_sequence_pattern", "maybe_star_pattern", "star_pattern", "mapping_pattern", 
		"items_pattern", "key_value_pattern", "double_star_pattern", "class_pattern", 
		"positional_patterns", "keyword_patterns", "keyword_pattern", "type_alias", 
		"type_params", "type_param_seq", "type_param", "type_param_bound", "expressions", 
		"expression", "yield_expr", "star_expressions", "star_expression", "star_named_expressions", 
		"star_named_expression", "assignment_expression", "named_expression", 
		"disjunction", "conjunction", "inversion", "comparison", "compare_op_bitwise_or_pair", 
		"eq_bitwise_or", "noteq_bitwise_or", "lte_bitwise_or", "lt_bitwise_or", 
		"gte_bitwise_or", "gt_bitwise_or", "notin_bitwise_or", "in_bitwise_or", 
		"isnot_bitwise_or", "is_bitwise_or", "bitwise_or", "bitwise_xor", "bitwise_and", 
		"shift_expr", "sum", "term", "factor", "power", "await_primary", "primary", 
		"slices", "slice", "atom", "group", "lambdef", "lambda_params", "lambda_parameters", 
		"lambda_slash_no_default", "lambda_slash_with_default", "lambda_star_etc", 
		"lambda_kwds", "lambda_param_no_default", "lambda_param_with_default", 
		"lambda_param_maybe_default", "lambda_param", "fstring_middle", "fstring_replacement_field", 
		"fstring_conversion", "fstring_full_format_spec", "fstring_format_spec", 
		"fstring", "string", "strings", "list", "tuple", "set", "dict", "double_starred_kvpairs", 
		"double_starred_kvpair", "kvpair", "for_if_clauses", "for_if_clause", 
		"listcomp", "setcomp", "genexp", "dictcomp", "arguments", "args", "kwargs", 
		"starred_expression", "kwarg_or_starred", "kwarg_or_double_starred", "star_targets", 
		"star_targets_list_seq", "star_targets_tuple_seq", "star_target", "target_with_star_atom", 
		"star_atom", "single_target", "single_subscript_attribute_target", "t_primary", 
		"del_targets", "del_target", "del_t_atom", "type_expressions", "func_type_comment", 
		"soft_kw_type", "soft_kw_match", "soft_kw_case", "soft_kw_wildcard", "soft_kw__not__wildcard"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'False'", "'await'", "'else'", 
		"'import'", "'pass'", "'None'", "'break'", "'except'", "'in'", "'raise'", 
		"'True'", "'class'", "'finally'", "'is'", "'return'", "'and'", "'continue'", 
		"'for'", "'lambda'", "'try'", "'as'", "'def'", "'from'", "'nonlocal'", 
		"'while'", "'assert'", "'del'", "'global'", "'not'", "'with'", "'async'", 
		"'elif'", "'if'", "'or'", "'yield'", "'('", "'['", null, "')'", "']'", 
		null, "'.'", "':'", "','", "';'", "'+'", "'-'", "'*'", "'/'", "'|'", "'&'", 
		"'<'", "'>'", "'='", "'%'", "'=='", "'!='", "'<='", "'>='", "'~'", "'^'", 
		"'<<'", "'>>'", "'**'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", 
		"'|='", "'^='", "'<<='", "'>>='", "'**='", "'//'", "'//='", "'@'", "'@='", 
		"'->'", "'...'", "':='", "'!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "TYPE_COMMENT", "FSTRING_START", "FSTRING_MIDDLE", 
		"FSTRING_END", "FALSE", "AWAIT", "ELSE", "IMPORT", "PASS", "NONE", "BREAK", 
		"EXCEPT", "IN", "RAISE", "TRUE", "CLASS", "FINALLY", "IS", "RETURN", "AND", 
		"CONTINUE", "FOR", "LAMBDA", "TRY", "AS", "DEF", "FROM", "NONLOCAL", "WHILE", 
		"ASSERT", "DEL", "GLOBAL", "NOT", "WITH", "ASYNC", "ELIF", "IF", "OR", 
		"YIELD", "LPAR", "LSQB", "LBRACE", "RPAR", "RSQB", "RBRACE", "DOT", "COLON", 
		"COMMA", "SEMI", "PLUS", "MINUS", "STAR", "SLASH", "VBAR", "AMPER", "LESS", 
		"GREATER", "EQUAL", "PERCENT", "EQEQUAL", "NOTEQUAL", "LESSEQUAL", "GREATEREQUAL", 
		"TILDE", "CIRCUMFLEX", "LEFTSHIFT", "RIGHTSHIFT", "DOUBLESTAR", "PLUSEQUAL", 
		"MINEQUAL", "STAREQUAL", "SLASHEQUAL", "PERCENTEQUAL", "AMPEREQUAL", "VBAREQUAL", 
		"CIRCUMFLEXEQUAL", "LEFTSHIFTEQUAL", "RIGHTSHIFTEQUAL", "DOUBLESTAREQUAL", 
		"DOUBLESLASH", "DOUBLESLASHEQUAL", "AT", "ATEQUAL", "RARROW", "ELLIPSIS", 
		"COLONEQUAL", "EXCLAMATION", "NAME", "NUMBER", "STRING", "NEWLINE", "COMMENT", 
		"WS", "EXPLICIT_LINE_JOINING", "ERRORTOKEN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PythonParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PythonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PythonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PythonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class File_inputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PythonParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public File_inputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterFile_input(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitFile_input(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_input(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_inputContext file_input() {
		File_inputContext _localctx = new File_inputContext(Context, State);
		EnterRule(_localctx, 0, RULE_file_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 396;
				statements();
				}
				break;
			}
			State = 399;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InteractiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Statement_newlineContext statement_newline() {
			return GetRuleContext<Statement_newlineContext>(0);
		}
		public InteractiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interactive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterInteractive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitInteractive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteractive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InteractiveContext interactive() {
		InteractiveContext _localctx = new InteractiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_interactive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			statement_newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PythonParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(PythonParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(PythonParser.NEWLINE, i);
		}
		public EvalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterEval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitEval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvalContext eval() {
		EvalContext _localctx = new EvalContext(Context, State);
		EnterRule(_localctx, 4, RULE_eval);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			expressions();
			State = 407;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 404;
				Match(NEWLINE);
				}
				}
				State = 409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 410;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PythonParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PythonParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(PythonParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PythonParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_expressionsContext type_expressions() {
			return GetRuleContext<Type_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(PythonParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(PythonParser.NEWLINE, i);
		}
		public Func_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterFunc_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitFunc_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_typeContext func_type() {
		Func_typeContext _localctx = new Func_typeContext(Context, State);
		EnterRule(_localctx, 6, RULE_func_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			Match(LPAR);
			State = 414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 31556018110599568L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 119537681L) != 0)) {
				{
				State = 413;
				type_expressions();
				}
			}

			State = 416;
			Match(RPAR);
			State = 417;
			Match(RARROW);
			State = 418;
			expression();
			State = 422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 419;
				Match(NEWLINE);
				}
				}
				State = 424;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 425;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fstring_inputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Star_expressionsContext star_expressions() {
			return GetRuleContext<Star_expressionsContext>(0);
		}
		public Fstring_inputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fstring_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterFstring_input(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitFstring_input(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFstring_input(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fstring_inputContext fstring_input() {
		Fstring_inputContext _localctx = new Fstring_inputContext(Context, State);
		EnterRule(_localctx, 8, RULE_fstring_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			star_expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 10, RULE_statements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 429;
					statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 432;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Compound_stmtContext compound_stmt() {
			return GetRuleContext<Compound_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_stmtsContext simple_stmts() {
			return GetRuleContext<Simple_stmtsContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 436;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 434;
				compound_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 435;
				simple_stmts();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_newlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Compound_stmtContext compound_stmt() {
			return GetRuleContext<Compound_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(PythonParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_stmtsContext simple_stmts() {
			return GetRuleContext<Simple_stmtsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PythonParser.Eof, 0); }
		public Statement_newlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_newline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterStatement_newline(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitStatement_newline(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_newline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_newlineContext statement_newline() {
		Statement_newlineContext _localctx = new Statement_newlineContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement_newline);
		try {
			State = 444;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 438;
				compound_stmt();
				State = 439;
				Match(NEWLINE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 441;
				simple_stmts();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 442;
				Match(NEWLINE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 443;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_stmtsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_stmtContext[] simple_stmt() {
			return GetRuleContexts<Simple_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_stmtContext simple_stmt(int i) {
			return GetRuleContext<Simple_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(PythonParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(PythonParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(PythonParser.SEMI, i);
		}
		public Simple_stmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_stmts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterSimple_stmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitSimple_stmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_stmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_stmtsContext simple_stmts() {
		Simple_stmtsContext _localctx = new Simple_stmtsContext(Context, State);
		EnterRule(_localctx, 16, RULE_simple_stmts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			simple_stmt();
			State = 451;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 447;
					Match(SEMI);
					State = 448;
					simple_stmt();
					}
					} 
				}
				State = 453;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 454;
				Match(SEMI);
				}
			}

			State = 457;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_aliasContext type_alias() {
			return GetRuleContext<Type_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_expressionsContext star_expressions() {
			return GetRuleContext<Star_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_stmtContext return_stmt() {
			return GetRuleContext<Return_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_stmtContext import_stmt() {
			return GetRuleContext<Import_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Raise_stmtContext raise_stmt() {
			return GetRuleContext<Raise_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASS() { return GetToken(PythonParser.PASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Del_stmtContext del_stmt() {
			return GetRuleContext<Del_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Yield_stmtContext yield_stmt() {
			return GetRuleContext<Yield_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assert_stmtContext assert_stmt() {
			return GetRuleContext<Assert_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(PythonParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(PythonParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Global_stmtContext global_stmt() {
			return GetRuleContext<Global_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nonlocal_stmtContext nonlocal_stmt() {
			return GetRuleContext<Nonlocal_stmtContext>(0);
		}
		public Simple_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterSimple_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitSimple_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_stmtContext simple_stmt() {
		Simple_stmtContext _localctx = new Simple_stmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_simple_stmt);
		try {
			State = 473;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 459;
				assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 460;
				type_alias();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 461;
				star_expressions();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 462;
				return_stmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 463;
				import_stmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 464;
				raise_stmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 465;
				Match(PASS);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 466;
				del_stmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 467;
				yield_stmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 468;
				assert_stmt();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 469;
				Match(BREAK);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 470;
				Match(CONTINUE);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 471;
				global_stmt();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 472;
				nonlocal_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_defContext function_def() {
			return GetRuleContext<Function_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_defContext class_def() {
			return GetRuleContext<Class_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_stmtContext with_stmt() {
			return GetRuleContext<With_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_stmtContext for_stmt() {
			return GetRuleContext<For_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Try_stmtContext try_stmt() {
			return GetRuleContext<Try_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_stmtContext while_stmt() {
			return GetRuleContext<While_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Match_stmtContext match_stmt() {
			return GetRuleContext<Match_stmtContext>(0);
		}
		public Compound_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterCompound_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitCompound_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_stmtContext compound_stmt() {
		Compound_stmtContext _localctx = new Compound_stmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_compound_stmt);
		try {
			State = 483;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 475;
				function_def();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 476;
				if_stmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 477;
				class_def();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 478;
				with_stmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 479;
				for_stmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 480;
				try_stmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 481;
				while_stmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 482;
				match_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL() { return GetTokens(PythonParser.EQUAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL(int i) {
			return GetToken(PythonParser.EQUAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Annotated_rhsContext annotated_rhs() {
			return GetRuleContext<Annotated_rhsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PythonParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_targetContext single_target() {
			return GetRuleContext<Single_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PythonParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_subscript_attribute_targetContext single_subscript_attribute_target() {
			return GetRuleContext<Single_subscript_attribute_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Yield_exprContext yield_expr() {
			return GetRuleContext<Yield_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_expressionsContext star_expressions() {
			return GetRuleContext<Star_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_targetsContext[] star_targets() {
			return GetRuleContexts<Star_targetsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_targetsContext star_targets(int i) {
			return GetRuleContext<Star_targetsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_COMMENT() { return GetToken(PythonParser.TYPE_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AugassignContext augassign() {
			return GetRuleContext<AugassignContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_assignment);
		int _la;
		try {
			int _alt;
			State = 525;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 485;
				Match(NAME);
				State = 486;
				Match(COLON);
				State = 487;
				expression();
				State = 490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL) {
					{
					State = 488;
					Match(EQUAL);
					State = 489;
					annotated_rhs();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 497;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
				case 1:
					{
					State = 492;
					Match(LPAR);
					State = 493;
					single_target();
					State = 494;
					Match(RPAR);
					}
					break;
				case 2:
					{
					State = 496;
					single_subscript_attribute_target();
					}
					break;
				}
				State = 499;
				Match(COLON);
				State = 500;
				expression();
				State = 503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL) {
					{
					State = 501;
					Match(EQUAL);
					State = 502;
					annotated_rhs();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 508;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 505;
						star_targets();
						State = 506;
						Match(EQUAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 510;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 514;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case YIELD:
					{
					State = 512;
					yield_expr();
					}
					break;
				case FSTRING_START:
				case FALSE:
				case AWAIT:
				case NONE:
				case TRUE:
				case LAMBDA:
				case NOT:
				case LPAR:
				case LSQB:
				case LBRACE:
				case PLUS:
				case MINUS:
				case STAR:
				case TILDE:
				case ELLIPSIS:
				case NAME:
				case NUMBER:
				case STRING:
					{
					State = 513;
					star_expressions();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 517;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TYPE_COMMENT) {
					{
					State = 516;
					Match(TYPE_COMMENT);
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 519;
				single_target();
				State = 520;
				augassign();
				State = 523;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case YIELD:
					{
					State = 521;
					yield_expr();
					}
					break;
				case FSTRING_START:
				case FALSE:
				case AWAIT:
				case NONE:
				case TRUE:
				case LAMBDA:
				case NOT:
				case LPAR:
				case LSQB:
				case LBRACE:
				case PLUS:
				case MINUS:
				case STAR:
				case TILDE:
				case ELLIPSIS:
				case NAME:
				case NUMBER:
				case STRING:
					{
					State = 522;
					star_expressions();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Annotated_rhsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Yield_exprContext yield_expr() {
			return GetRuleContext<Yield_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_expressionsContext star_expressions() {
			return GetRuleContext<Star_expressionsContext>(0);
		}
		public Annotated_rhsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotated_rhs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterAnnotated_rhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitAnnotated_rhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotated_rhs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Annotated_rhsContext annotated_rhs() {
		Annotated_rhsContext _localctx = new Annotated_rhsContext(Context, State);
		EnterRule(_localctx, 24, RULE_annotated_rhs);
		try {
			State = 529;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case YIELD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 527;
				yield_expr();
				}
				break;
			case FSTRING_START:
			case FALSE:
			case AWAIT:
			case NONE:
			case TRUE:
			case LAMBDA:
			case NOT:
			case LPAR:
			case LSQB:
			case LBRACE:
			case PLUS:
			case MINUS:
			case STAR:
			case TILDE:
			case ELLIPSIS:
			case NAME:
			case NUMBER:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 528;
				star_expressions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AugassignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUSEQUAL() { return GetToken(PythonParser.PLUSEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINEQUAL() { return GetToken(PythonParser.MINEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAREQUAL() { return GetToken(PythonParser.STAREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATEQUAL() { return GetToken(PythonParser.ATEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASHEQUAL() { return GetToken(PythonParser.SLASHEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENTEQUAL() { return GetToken(PythonParser.PERCENTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPEREQUAL() { return GetToken(PythonParser.AMPEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VBAREQUAL() { return GetToken(PythonParser.VBAREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIRCUMFLEXEQUAL() { return GetToken(PythonParser.CIRCUMFLEXEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTSHIFTEQUAL() { return GetToken(PythonParser.LEFTSHIFTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTSHIFTEQUAL() { return GetToken(PythonParser.RIGHTSHIFTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAREQUAL() { return GetToken(PythonParser.DOUBLESTAREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESLASHEQUAL() { return GetToken(PythonParser.DOUBLESLASHEQUAL, 0); }
		public AugassignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_augassign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterAugassign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitAugassign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAugassign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AugassignContext augassign() {
		AugassignContext _localctx = new AugassignContext(Context, State);
		EnterRule(_localctx, 26, RULE_augassign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 22527L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(PythonParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_expressionsContext star_expressions() {
			return GetRuleContext<Star_expressionsContext>(0);
		}
		public Return_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterReturn_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitReturn_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_stmtContext return_stmt() {
		Return_stmtContext _localctx = new Return_stmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_return_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			Match(RETURN);
			State = 535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 31556018110599568L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 119537665L) != 0)) {
				{
				State = 534;
				star_expressions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raise_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAISE() { return GetToken(PythonParser.RAISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PythonParser.FROM, 0); }
		public Raise_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterRaise_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitRaise_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaise_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raise_stmtContext raise_stmt() {
		Raise_stmtContext _localctx = new Raise_stmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_raise_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			Match(RAISE);
			State = 543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13541619601117584L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 119537665L) != 0)) {
				{
				State = 538;
				expression();
				State = 541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 539;
					Match(FROM);
					State = 540;
					expression();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(PythonParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(PythonParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(PythonParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		public Global_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterGlobal_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitGlobal_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_stmtContext global_stmt() {
		Global_stmtContext _localctx = new Global_stmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_global_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			Match(GLOBAL);
			State = 546;
			Match(NAME);
			State = 551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 547;
				Match(COMMA);
				State = 548;
				Match(NAME);
				}
				}
				State = 553;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nonlocal_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONLOCAL() { return GetToken(PythonParser.NONLOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(PythonParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(PythonParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		public Nonlocal_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonlocal_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterNonlocal_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitNonlocal_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonlocal_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nonlocal_stmtContext nonlocal_stmt() {
		Nonlocal_stmtContext _localctx = new Nonlocal_stmtContext(Context, State);
		EnterRule(_localctx, 34, RULE_nonlocal_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			Match(NONLOCAL);
			State = 555;
			Match(NAME);
			State = 560;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 556;
				Match(COMMA);
				State = 557;
				Match(NAME);
				}
				}
				State = 562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Del_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEL() { return GetToken(PythonParser.DEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Del_targetsContext del_targets() {
			return GetRuleContext<Del_targetsContext>(0);
		}
		public Del_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_del_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterDel_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitDel_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDel_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Del_stmtContext del_stmt() {
		Del_stmtContext _localctx = new Del_stmtContext(Context, State);
		EnterRule(_localctx, 36, RULE_del_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 563;
			Match(DEL);
			State = 564;
			del_targets();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Yield_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Yield_exprContext yield_expr() {
			return GetRuleContext<Yield_exprContext>(0);
		}
		public Yield_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yield_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterYield_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitYield_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYield_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Yield_stmtContext yield_stmt() {
		Yield_stmtContext _localctx = new Yield_stmtContext(Context, State);
		EnterRule(_localctx, 38, RULE_yield_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566;
			yield_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assert_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(PythonParser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PythonParser.COMMA, 0); }
		public Assert_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assert_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterAssert_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitAssert_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssert_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assert_stmtContext assert_stmt() {
		Assert_stmtContext _localctx = new Assert_stmtContext(Context, State);
		EnterRule(_localctx, 40, RULE_assert_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			Match(ASSERT);
			State = 569;
			expression();
			State = 572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 570;
				Match(COMMA);
				State = 571;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_nameContext import_name() {
			return GetRuleContext<Import_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_fromContext import_from() {
			return GetRuleContext<Import_fromContext>(0);
		}
		public Import_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterImport_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitImport_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_stmtContext import_stmt() {
		Import_stmtContext _localctx = new Import_stmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_import_stmt);
		try {
			State = 576;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IMPORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 574;
				import_name();
				}
				break;
			case FROM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 575;
				import_from();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(PythonParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_as_namesContext dotted_as_names() {
			return GetRuleContext<Dotted_as_namesContext>(0);
		}
		public Import_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterImport_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitImport_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_nameContext import_name() {
		Import_nameContext _localctx = new Import_nameContext(Context, State);
		EnterRule(_localctx, 44, RULE_import_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578;
			Match(IMPORT);
			State = 579;
			dotted_as_names();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_fromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PythonParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_nameContext dotted_name() {
			return GetRuleContext<Dotted_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(PythonParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Import_from_targetsContext import_from_targets() {
			return GetRuleContext<Import_from_targetsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(PythonParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(PythonParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELLIPSIS() { return GetTokens(PythonParser.ELLIPSIS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS(int i) {
			return GetToken(PythonParser.ELLIPSIS, i);
		}
		public Import_fromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_from; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterImport_from(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitImport_from(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_from(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_fromContext import_from() {
		Import_fromContext _localctx = new Import_fromContext(Context, State);
		EnterRule(_localctx, 46, RULE_import_from);
		int _la;
		try {
			State = 600;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 581;
				Match(FROM);
				State = 585;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT || _la==ELLIPSIS) {
					{
					{
					State = 582;
					_la = TokenStream.LA(1);
					if ( !(_la==DOT || _la==ELLIPSIS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 587;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 588;
				dotted_name(0);
				State = 589;
				Match(IMPORT);
				State = 590;
				import_from_targets();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 592;
				Match(FROM);
				State = 594;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 593;
					_la = TokenStream.LA(1);
					if ( !(_la==DOT || _la==ELLIPSIS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 596;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DOT || _la==ELLIPSIS );
				State = 598;
				Match(IMPORT);
				State = 599;
				import_from_targets();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_from_targetsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PythonParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Import_from_as_namesContext import_from_as_names() {
			return GetRuleContext<Import_from_as_namesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PythonParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PythonParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PythonParser.STAR, 0); }
		public Import_from_targetsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_from_targets; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterImport_from_targets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitImport_from_targets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_from_targets(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_from_targetsContext import_from_targets() {
		Import_from_targetsContext _localctx = new Import_from_targetsContext(Context, State);
		EnterRule(_localctx, 48, RULE_import_from_targets);
		int _la;
		try {
			State = 611;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 602;
				Match(LPAR);
				State = 603;
				import_from_as_names();
				State = 605;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 604;
					Match(COMMA);
					}
				}

				State = 607;
				Match(RPAR);
				}
				break;
			case NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 609;
				import_from_as_names();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 610;
				Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_from_as_namesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_from_as_nameContext[] import_from_as_name() {
			return GetRuleContexts<Import_from_as_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_from_as_nameContext import_from_as_name(int i) {
			return GetRuleContext<Import_from_as_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		public Import_from_as_namesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_from_as_names; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterImport_from_as_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitImport_from_as_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_from_as_names(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_from_as_namesContext import_from_as_names() {
		Import_from_as_namesContext _localctx = new Import_from_as_namesContext(Context, State);
		EnterRule(_localctx, 50, RULE_import_from_as_names);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			import_from_as_name();
			State = 618;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 614;
					Match(COMMA);
					State = 615;
					import_from_as_name();
					}
					} 
				}
				State = 620;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_from_as_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(PythonParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(PythonParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PythonParser.AS, 0); }
		public Import_from_as_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_from_as_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterImport_from_as_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitImport_from_as_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_from_as_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_from_as_nameContext import_from_as_name() {
		Import_from_as_nameContext _localctx = new Import_from_as_nameContext(Context, State);
		EnterRule(_localctx, 52, RULE_import_from_as_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			Match(NAME);
			State = 624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 622;
				Match(AS);
				State = 623;
				Match(NAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dotted_as_namesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_as_nameContext[] dotted_as_name() {
			return GetRuleContexts<Dotted_as_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_as_nameContext dotted_as_name(int i) {
			return GetRuleContext<Dotted_as_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		public Dotted_as_namesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotted_as_names; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterDotted_as_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitDotted_as_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotted_as_names(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dotted_as_namesContext dotted_as_names() {
		Dotted_as_namesContext _localctx = new Dotted_as_namesContext(Context, State);
		EnterRule(_localctx, 54, RULE_dotted_as_names);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626;
			dotted_as_name();
			State = 631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 627;
				Match(COMMA);
				State = 628;
				dotted_as_name();
				}
				}
				State = 633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dotted_as_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_nameContext dotted_name() {
			return GetRuleContext<Dotted_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PythonParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		public Dotted_as_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotted_as_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterDotted_as_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitDotted_as_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotted_as_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dotted_as_nameContext dotted_as_name() {
		Dotted_as_nameContext _localctx = new Dotted_as_nameContext(Context, State);
		EnterRule(_localctx, 56, RULE_dotted_as_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634;
			dotted_name(0);
			State = 637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 635;
				Match(AS);
				State = 636;
				Match(NAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dotted_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_nameContext dotted_name() {
			return GetRuleContext<Dotted_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(PythonParser.DOT, 0); }
		public Dotted_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotted_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterDotted_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitDotted_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotted_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dotted_nameContext dotted_name() {
		return dotted_name(0);
	}

	private Dotted_nameContext dotted_name(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Dotted_nameContext _localctx = new Dotted_nameContext(Context, _parentState);
		Dotted_nameContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_dotted_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 640;
			Match(NAME);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 647;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Dotted_nameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_dotted_name);
					State = 642;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 643;
					Match(DOT);
					State = 644;
					Match(NAME);
					}
					} 
				}
				State = 649;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(PythonParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(PythonParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(PythonParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_stmtsContext simple_stmts() {
			return GetRuleContext<Simple_stmtsContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 60, RULE_block);
		try {
			State = 656;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 650;
				Match(NEWLINE);
				State = 651;
				Match(INDENT);
				State = 652;
				statements();
				State = 653;
				Match(DEDENT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 655;
				simple_stmts();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecoratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AT() { return GetTokens(PythonParser.AT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT(int i) {
			return GetToken(PythonParser.AT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext[] named_expression() {
			return GetRuleContexts<Named_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression(int i) {
			return GetRuleContext<Named_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(PythonParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(PythonParser.NEWLINE, i);
		}
		public DecoratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decorators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterDecorators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitDecorators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecorators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecoratorsContext decorators() {
		DecoratorsContext _localctx = new DecoratorsContext(Context, State);
		EnterRule(_localctx, 62, RULE_decorators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 662;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 658;
				Match(AT);
				State = 659;
				named_expression();
				State = 660;
				Match(NEWLINE);
				}
				}
				State = 664;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorsContext decorators() {
			return GetRuleContext<DecoratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_def_rawContext class_def_raw() {
			return GetRuleContext<Class_def_rawContext>(0);
		}
		public Class_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterClass_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitClass_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_defContext class_def() {
		Class_defContext _localctx = new Class_defContext(Context, State);
		EnterRule(_localctx, 64, RULE_class_def);
		try {
			State = 670;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 666;
				decorators();
				State = 667;
				class_def_raw();
				}
				break;
			case CLASS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 669;
				class_def_raw();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_def_rawContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PythonParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_paramsContext type_params() {
			return GetRuleContext<Type_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PythonParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PythonParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public Class_def_rawContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_def_raw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterClass_def_raw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitClass_def_raw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_def_raw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_def_rawContext class_def_raw() {
		Class_def_rawContext _localctx = new Class_def_rawContext(Context, State);
		EnterRule(_localctx, 66, RULE_class_def_raw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 672;
			Match(CLASS);
			State = 673;
			Match(NAME);
			State = 675;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSQB) {
				{
				State = 674;
				type_params();
				}
			}

			State = 682;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAR) {
				{
				State = 677;
				Match(LPAR);
				State = 679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 31556018110599568L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 119537681L) != 0)) {
					{
					State = 678;
					arguments();
					}
				}

				State = 681;
				Match(RPAR);
				}
			}

			State = 684;
			Match(COLON);
			State = 685;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorsContext decorators() {
			return GetRuleContext<DecoratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_def_rawContext function_def_raw() {
			return GetRuleContext<Function_def_rawContext>(0);
		}
		public Function_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterFunction_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitFunction_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_defContext function_def() {
		Function_defContext _localctx = new Function_defContext(Context, State);
		EnterRule(_localctx, 68, RULE_function_def);
		try {
			State = 691;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 687;
				decorators();
				State = 688;
				function_def_raw();
				}
				break;
			case DEF:
			case ASYNC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 690;
				function_def_raw();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_def_rawContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF() { return GetToken(PythonParser.DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PythonParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PythonParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_paramsContext type_params() {
			return GetRuleContext<Type_paramsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RARROW() { return GetToken(PythonParser.RARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Func_type_commentContext func_type_comment() {
			return GetRuleContext<Func_type_commentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(PythonParser.ASYNC, 0); }
		public Function_def_rawContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_def_raw; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterFunction_def_raw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitFunction_def_raw(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_def_raw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_def_rawContext function_def_raw() {
		Function_def_rawContext _localctx = new Function_def_rawContext(Context, State);
		EnterRule(_localctx, 70, RULE_function_def_raw);
		int _la;
		try {
			State = 732;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 693;
				Match(DEF);
				State = 694;
				Match(NAME);
				State = 696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LSQB) {
					{
					State = 695;
					type_params();
					}
				}

				State = 698;
				Match(LPAR);
				State = 700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 68719542273L) != 0)) {
					{
					State = 699;
					@params();
					}
				}

				State = 702;
				Match(RPAR);
				State = 705;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RARROW) {
					{
					State = 703;
					Match(RARROW);
					State = 704;
					expression();
					}
				}

				State = 707;
				Match(COLON);
				State = 709;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					State = 708;
					func_type_comment();
					}
					break;
				}
				State = 711;
				block();
				}
				break;
			case ASYNC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 712;
				Match(ASYNC);
				State = 713;
				Match(DEF);
				State = 714;
				Match(NAME);
				State = 716;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LSQB) {
					{
					State = 715;
					type_params();
					}
				}

				State = 718;
				Match(LPAR);
				State = 720;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 68719542273L) != 0)) {
					{
					State = 719;
					@params();
					}
				}

				State = 722;
				Match(RPAR);
				State = 725;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RARROW) {
					{
					State = 723;
					Match(RARROW);
					State = 724;
					expression();
					}
				}

				State = 727;
				Match(COLON);
				State = 729;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 728;
					func_type_comment();
					}
					break;
				}
				State = 731;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 72, RULE_params);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734;
			parameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Slash_no_defaultContext slash_no_default() {
			return GetRuleContext<Slash_no_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext[] param_no_default() {
			return GetRuleContexts<Param_no_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext param_no_default(int i) {
			return GetRuleContext<Param_no_defaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_with_defaultContext[] param_with_default() {
			return GetRuleContexts<Param_with_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_with_defaultContext param_with_default(int i) {
			return GetRuleContext<Param_with_defaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_etcContext star_etc() {
			return GetRuleContext<Star_etcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Slash_with_defaultContext slash_with_default() {
			return GetRuleContext<Slash_with_defaultContext>(0);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 74, RULE_parameters);
		int _la;
		try {
			int _alt;
			State = 785;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 736;
				slash_no_default();
				State = 740;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 737;
						param_no_default();
						}
						} 
					}
					State = 742;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
				}
				State = 746;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME) {
					{
					{
					State = 743;
					param_with_default();
					}
					}
					State = 748;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 750;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==DOUBLESTAR) {
					{
					State = 749;
					star_etc();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 752;
				slash_with_default();
				State = 756;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME) {
					{
					{
					State = 753;
					param_with_default();
					}
					}
					State = 758;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 760;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==DOUBLESTAR) {
					{
					State = 759;
					star_etc();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 763;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 762;
						param_no_default();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 765;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 770;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME) {
					{
					{
					State = 767;
					param_with_default();
					}
					}
					State = 772;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 774;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==DOUBLESTAR) {
					{
					State = 773;
					star_etc();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 777;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 776;
					param_with_default();
					}
					}
					State = 779;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==NAME );
				State = 782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==DOUBLESTAR) {
					{
					State = 781;
					star_etc();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 784;
				star_etc();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Slash_no_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(PythonParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext[] param_no_default() {
			return GetRuleContexts<Param_no_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext param_no_default(int i) {
			return GetRuleContext<Param_no_defaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PythonParser.COMMA, 0); }
		public Slash_no_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slash_no_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterSlash_no_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitSlash_no_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlash_no_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Slash_no_defaultContext slash_no_default() {
		Slash_no_defaultContext _localctx = new Slash_no_defaultContext(Context, State);
		EnterRule(_localctx, 76, RULE_slash_no_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 788;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 787;
				param_no_default();
				}
				}
				State = 790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			State = 792;
			Match(SLASH);
			State = 794;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 793;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Slash_with_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(PythonParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext[] param_no_default() {
			return GetRuleContexts<Param_no_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext param_no_default(int i) {
			return GetRuleContext<Param_no_defaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_with_defaultContext[] param_with_default() {
			return GetRuleContexts<Param_with_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_with_defaultContext param_with_default(int i) {
			return GetRuleContext<Param_with_defaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PythonParser.COMMA, 0); }
		public Slash_with_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slash_with_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterSlash_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitSlash_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlash_with_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Slash_with_defaultContext slash_with_default() {
		Slash_with_defaultContext _localctx = new Slash_with_defaultContext(Context, State);
		EnterRule(_localctx, 78, RULE_slash_with_default);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 799;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 796;
					param_no_default();
					}
					} 
				}
				State = 801;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			State = 803;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 802;
				param_with_default();
				}
				}
				State = 805;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			State = 807;
			Match(SLASH);
			State = 809;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 808;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_etcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PythonParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext param_no_default() {
			return GetRuleContext<Param_no_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_maybe_defaultContext[] param_maybe_default() {
			return GetRuleContexts<Param_maybe_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_maybe_defaultContext param_maybe_default(int i) {
			return GetRuleContext<Param_maybe_defaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KwdsContext kwds() {
			return GetRuleContext<KwdsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_default_star_annotationContext param_no_default_star_annotation() {
			return GetRuleContext<Param_no_default_star_annotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PythonParser.COMMA, 0); }
		public Star_etcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_etc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterStar_etc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitStar_etc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_etc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_etcContext star_etc() {
		Star_etcContext _localctx = new Star_etcContext(Context, State);
		EnterRule(_localctx, 80, RULE_star_etc);
		int _la;
		try {
			State = 844;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 811;
				Match(STAR);
				State = 812;
				param_no_default();
				State = 816;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME) {
					{
					{
					State = 813;
					param_maybe_default();
					}
					}
					State = 818;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 820;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLESTAR) {
					{
					State = 819;
					kwds();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 822;
				Match(STAR);
				State = 823;
				param_no_default_star_annotation();
				State = 827;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME) {
					{
					{
					State = 824;
					param_maybe_default();
					}
					}
					State = 829;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLESTAR) {
					{
					State = 830;
					kwds();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 833;
				Match(STAR);
				State = 834;
				Match(COMMA);
				State = 836;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 835;
					param_maybe_default();
					}
					}
					State = 838;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==NAME );
				State = 841;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLESTAR) {
					{
					State = 840;
					kwds();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 843;
				kwds();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KwdsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(PythonParser.DOUBLESTAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_no_defaultContext param_no_default() {
			return GetRuleContext<Param_no_defaultContext>(0);
		}
		public KwdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterKwds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitKwds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KwdsContext kwds() {
		KwdsContext _localctx = new KwdsContext(Context, State);
		EnterRule(_localctx, 82, RULE_kwds);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846;
			Match(DOUBLESTAR);
			State = 847;
			param_no_default();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_no_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param() {
			return GetRuleContext<ParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PythonParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_COMMENT() { return GetToken(PythonParser.TYPE_COMMENT, 0); }
		public Param_no_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_no_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterParam_no_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitParam_no_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_no_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_no_defaultContext param_no_default() {
		Param_no_defaultContext _localctx = new Param_no_defaultContext(Context, State);
		EnterRule(_localctx, 84, RULE_param_no_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 849;
			param();
			State = 851;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 850;
				Match(COMMA);
				}
			}

			State = 854;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TYPE_COMMENT) {
				{
				State = 853;
				Match(TYPE_COMMENT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_no_default_star_annotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Param_star_annotationContext param_star_annotation() {
			return GetRuleContext<Param_star_annotationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PythonParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_COMMENT() { return GetToken(PythonParser.TYPE_COMMENT, 0); }
		public Param_no_default_star_annotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_no_default_star_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterParam_no_default_star_annotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitParam_no_default_star_annotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_no_default_star_annotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_no_default_star_annotationContext param_no_default_star_annotation() {
		Param_no_default_star_annotationContext _localctx = new Param_no_default_star_annotationContext(Context, State);
		EnterRule(_localctx, 86, RULE_param_no_default_star_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 856;
			param_star_annotation();
			State = 858;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 857;
				Match(COMMA);
				}
			}

			State = 861;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TYPE_COMMENT) {
				{
				State = 860;
				Match(TYPE_COMMENT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_with_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param() {
			return GetRuleContext<ParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_assignmentContext default_assignment() {
			return GetRuleContext<Default_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PythonParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_COMMENT() { return GetToken(PythonParser.TYPE_COMMENT, 0); }
		public Param_with_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_with_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterParam_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitParam_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_with_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_with_defaultContext param_with_default() {
		Param_with_defaultContext _localctx = new Param_with_defaultContext(Context, State);
		EnterRule(_localctx, 88, RULE_param_with_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 863;
			param();
			State = 864;
			default_assignment();
			State = 866;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 865;
				Match(COMMA);
				}
			}

			State = 869;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TYPE_COMMENT) {
				{
				State = 868;
				Match(TYPE_COMMENT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_maybe_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param() {
			return GetRuleContext<ParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_assignmentContext default_assignment() {
			return GetRuleContext<Default_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PythonParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_COMMENT() { return GetToken(PythonParser.TYPE_COMMENT, 0); }
		public Param_maybe_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_maybe_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterParam_maybe_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitParam_maybe_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_maybe_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_maybe_defaultContext param_maybe_default() {
		Param_maybe_defaultContext _localctx = new Param_maybe_defaultContext(Context, State);
		EnterRule(_localctx, 90, RULE_param_maybe_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 871;
			param();
			State = 873;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 872;
				default_assignment();
				}
			}

			State = 876;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 875;
				Match(COMMA);
				}
			}

			State = 879;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TYPE_COMMENT) {
				{
				State = 878;
				Match(TYPE_COMMENT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 92, RULE_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 881;
			Match(NAME);
			State = 883;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 882;
				annotation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_star_annotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_annotationContext star_annotation() {
			return GetRuleContext<Star_annotationContext>(0);
		}
		public Param_star_annotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_star_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterParam_star_annotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitParam_star_annotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam_star_annotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Param_star_annotationContext param_star_annotation() {
		Param_star_annotationContext _localctx = new Param_star_annotationContext(Context, State);
		EnterRule(_localctx, 94, RULE_param_star_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 885;
			Match(NAME);
			State = 886;
			star_annotation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 96, RULE_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 888;
			Match(COLON);
			State = 889;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_annotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_expressionContext star_expression() {
			return GetRuleContext<Star_expressionContext>(0);
		}
		public Star_annotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterStar_annotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitStar_annotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_annotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_annotationContext star_annotation() {
		Star_annotationContext _localctx = new Star_annotationContext(Context, State);
		EnterRule(_localctx, 98, RULE_star_annotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 891;
			Match(COLON);
			State = 892;
			star_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PythonParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Default_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterDefault_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitDefault_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_assignmentContext default_assignment() {
		Default_assignmentContext _localctx = new Default_assignmentContext(Context, State);
		EnterRule(_localctx, 100, RULE_default_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 894;
			Match(EQUAL);
			State = 895;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(PythonParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_stmtContext elif_stmt() {
			return GetRuleContext<Elif_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 102, RULE_if_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 897;
			Match(IF);
			State = 898;
			named_expression();
			State = 899;
			Match(COLON);
			State = 900;
			block();
			State = 905;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 901;
				elif_stmt();
				}
				break;
			case 2:
				{
				State = 903;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
				case 1:
					{
					State = 902;
					else_block();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elif_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF() { return GetToken(PythonParser.ELIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Elif_stmtContext elif_stmt() {
			return GetRuleContext<Elif_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public Elif_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elif_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterElif_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitElif_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElif_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elif_stmtContext elif_stmt() {
		Elif_stmtContext _localctx = new Elif_stmtContext(Context, State);
		EnterRule(_localctx, 104, RULE_elif_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 907;
			Match(ELIF);
			State = 908;
			named_expression();
			State = 909;
			Match(COLON);
			State = 910;
			block();
			State = 915;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 911;
				elif_stmt();
				}
				break;
			case 2:
				{
				State = 913;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
				case 1:
					{
					State = 912;
					else_block();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PythonParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Else_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterElse_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitElse_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_blockContext else_block() {
		Else_blockContext _localctx = new Else_blockContext(Context, State);
		EnterRule(_localctx, 106, RULE_else_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 917;
			Match(ELSE);
			State = 918;
			Match(COLON);
			State = 919;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(PythonParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public While_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterWhile_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitWhile_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_stmtContext while_stmt() {
		While_stmtContext _localctx = new While_stmtContext(Context, State);
		EnterRule(_localctx, 108, RULE_while_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 921;
			Match(WHILE);
			State = 922;
			named_expression();
			State = 923;
			Match(COLON);
			State = 924;
			block();
			State = 926;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 925;
				else_block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PythonParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_targetsContext star_targets() {
			return GetRuleContext<Star_targetsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(PythonParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_expressionsContext star_expressions() {
			return GetRuleContext<Star_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(PythonParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_COMMENT() { return GetToken(PythonParser.TYPE_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public For_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterFor_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitFor_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_stmtContext for_stmt() {
		For_stmtContext _localctx = new For_stmtContext(Context, State);
		EnterRule(_localctx, 110, RULE_for_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 929;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASYNC) {
				{
				State = 928;
				Match(ASYNC);
				}
			}

			State = 931;
			Match(FOR);
			State = 932;
			star_targets();
			State = 933;
			Match(IN);
			State = 934;
			star_expressions();
			State = 935;
			Match(COLON);
			State = 937;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				{
				State = 936;
				Match(TYPE_COMMENT);
				}
				break;
			}
			State = 939;
			block();
			State = 941;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				{
				State = 940;
				else_block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(PythonParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PythonParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public With_itemContext[] with_item() {
			return GetRuleContexts<With_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_itemContext with_item(int i) {
			return GetRuleContext<With_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PythonParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(PythonParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_COMMENT() { return GetToken(PythonParser.TYPE_COMMENT, 0); }
		public With_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterWith_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitWith_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_stmtContext with_stmt() {
		With_stmtContext _localctx = new With_stmtContext(Context, State);
		EnterRule(_localctx, 112, RULE_with_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASYNC) {
				{
				State = 943;
				Match(ASYNC);
				}
			}

			State = 946;
			Match(WITH);
			State = 974;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 947;
				Match(LPAR);
				State = 948;
				with_item();
				State = 953;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,95,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 949;
						Match(COMMA);
						State = 950;
						with_item();
						}
						} 
					}
					State = 955;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,95,Context);
				}
				State = 957;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 956;
					Match(COMMA);
					}
				}

				State = 959;
				Match(RPAR);
				State = 960;
				Match(COLON);
				}
				break;
			case 2:
				{
				State = 962;
				with_item();
				State = 967;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 963;
					Match(COMMA);
					State = 964;
					with_item();
					}
					}
					State = 969;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 970;
				Match(COLON);
				State = 972;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
				case 1:
					{
					State = 971;
					Match(TYPE_COMMENT);
					}
					break;
				}
				}
				break;
			}
			State = 976;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PythonParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_targetContext star_target() {
			return GetRuleContext<Star_targetContext>(0);
		}
		public With_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterWith_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitWith_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_itemContext with_item() {
		With_itemContext _localctx = new With_itemContext(Context, State);
		EnterRule(_localctx, 114, RULE_with_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 978;
			expression();
			State = 981;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 979;
				Match(AS);
				State = 980;
				star_target();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(PythonParser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Finally_blockContext finally_block() {
			return GetRuleContext<Finally_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Except_blockContext[] except_block() {
			return GetRuleContexts<Except_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Except_blockContext except_block(int i) {
			return GetRuleContext<Except_blockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Except_star_blockContext[] except_star_block() {
			return GetRuleContexts<Except_star_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Except_star_blockContext except_star_block(int i) {
			return GetRuleContext<Except_star_blockContext>(i);
		}
		public Try_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterTry_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitTry_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Try_stmtContext try_stmt() {
		Try_stmtContext _localctx = new Try_stmtContext(Context, State);
		EnterRule(_localctx, 116, RULE_try_stmt);
		try {
			int _alt;
			State = 1016;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 983;
				Match(TRY);
				State = 984;
				Match(COLON);
				State = 985;
				block();
				State = 986;
				finally_block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 988;
				Match(TRY);
				State = 989;
				Match(COLON);
				State = 990;
				block();
				State = 992;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 991;
						except_block();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 994;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,101,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 997;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
				case 1:
					{
					State = 996;
					else_block();
					}
					break;
				}
				State = 1000;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
				case 1:
					{
					State = 999;
					finally_block();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1002;
				Match(TRY);
				State = 1003;
				Match(COLON);
				State = 1004;
				block();
				State = 1006;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1005;
						except_star_block();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1008;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 1011;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
				case 1:
					{
					State = 1010;
					else_block();
					}
					break;
				}
				State = 1014;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
				case 1:
					{
					State = 1013;
					finally_block();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Except_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(PythonParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PythonParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		public Except_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_except_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterExcept_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitExcept_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExcept_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Except_blockContext except_block() {
		Except_blockContext _localctx = new Except_blockContext(Context, State);
		EnterRule(_localctx, 118, RULE_except_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1018;
			Match(EXCEPT);
			State = 1024;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13541619601117584L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 119537665L) != 0)) {
				{
				State = 1019;
				expression();
				State = 1022;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 1020;
					Match(AS);
					State = 1021;
					Match(NAME);
					}
				}

				}
			}

			State = 1026;
			Match(COLON);
			State = 1027;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Except_star_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(PythonParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PythonParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PythonParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		public Except_star_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_except_star_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterExcept_star_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitExcept_star_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExcept_star_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Except_star_blockContext except_star_block() {
		Except_star_blockContext _localctx = new Except_star_blockContext(Context, State);
		EnterRule(_localctx, 120, RULE_except_star_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1029;
			Match(EXCEPT);
			State = 1030;
			Match(STAR);
			State = 1031;
			expression();
			State = 1034;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 1032;
				Match(AS);
				State = 1033;
				Match(NAME);
				}
			}

			State = 1036;
			Match(COLON);
			State = 1037;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(PythonParser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Finally_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterFinally_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitFinally_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinally_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Finally_blockContext finally_block() {
		Finally_blockContext _localctx = new Finally_blockContext(Context, State);
		EnterRule(_localctx, 122, RULE_finally_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1039;
			Match(FINALLY);
			State = 1040;
			Match(COLON);
			State = 1041;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Soft_kw_matchContext soft_kw_match() {
			return GetRuleContext<Soft_kw_matchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subject_exprContext subject_expr() {
			return GetRuleContext<Subject_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(PythonParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(PythonParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(PythonParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Case_blockContext[] case_block() {
			return GetRuleContexts<Case_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_blockContext case_block(int i) {
			return GetRuleContext<Case_blockContext>(i);
		}
		public Match_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterMatch_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitMatch_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_stmtContext match_stmt() {
		Match_stmtContext _localctx = new Match_stmtContext(Context, State);
		EnterRule(_localctx, 124, RULE_match_stmt);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1043;
			soft_kw_match();
			State = 1044;
			subject_expr();
			State = 1045;
			Match(COLON);
			State = 1046;
			Match(NEWLINE);
			State = 1047;
			Match(INDENT);
			State = 1049;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1048;
					case_block();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1051;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,111,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 1053;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subject_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext star_named_expression() {
			return GetRuleContext<Star_named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PythonParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionsContext star_named_expressions() {
			return GetRuleContext<Star_named_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		public Subject_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subject_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterSubject_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitSubject_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubject_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subject_exprContext subject_expr() {
		Subject_exprContext _localctx = new Subject_exprContext(Context, State);
		EnterRule(_localctx, 126, RULE_subject_expr);
		int _la;
		try {
			State = 1061;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1055;
				star_named_expression();
				State = 1056;
				Match(COMMA);
				State = 1058;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 31556018110599568L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 119537665L) != 0)) {
					{
					State = 1057;
					star_named_expressions();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1060;
				named_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Soft_kw_caseContext soft_kw_case() {
			return GetRuleContext<Soft_kw_caseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternsContext patterns() {
			return GetRuleContext<PatternsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GuardContext guard() {
			return GetRuleContext<GuardContext>(0);
		}
		public Case_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterCase_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitCase_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_blockContext case_block() {
		Case_blockContext _localctx = new Case_blockContext(Context, State);
		EnterRule(_localctx, 128, RULE_case_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1063;
			soft_kw_case();
			State = 1064;
			patterns();
			State = 1066;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 1065;
				guard();
				}
			}

			State = 1068;
			Match(COLON);
			State = 1069;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(PythonParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		public GuardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterGuard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitGuard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuardContext guard() {
		GuardContext _localctx = new GuardContext(Context, State);
		EnterRule(_localctx, 130, RULE_guard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1071;
			Match(IF);
			State = 1072;
			named_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Open_sequence_patternContext open_sequence_pattern() {
			return GetRuleContext<Open_sequence_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public PatternsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patterns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterPatterns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitPatterns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatterns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternsContext patterns() {
		PatternsContext _localctx = new PatternsContext(Context, State);
		EnterRule(_localctx, 132, RULE_patterns);
		try {
			State = 1076;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1074;
				open_sequence_pattern();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1075;
				pattern();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public As_patternContext as_pattern() {
			return GetRuleContext<As_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Or_patternContext or_pattern() {
			return GetRuleContext<Or_patternContext>(0);
		}
		public PatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternContext pattern() {
		PatternContext _localctx = new PatternContext(Context, State);
		EnterRule(_localctx, 134, RULE_pattern);
		try {
			State = 1080;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1078;
				as_pattern();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1079;
				or_pattern();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Or_patternContext or_pattern() {
			return GetRuleContext<Or_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(PythonParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pattern_capture_targetContext pattern_capture_target() {
			return GetRuleContext<Pattern_capture_targetContext>(0);
		}
		public As_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterAs_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitAs_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_patternContext as_pattern() {
		As_patternContext _localctx = new As_patternContext(Context, State);
		EnterRule(_localctx, 136, RULE_as_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1082;
			or_pattern();
			State = 1083;
			Match(AS);
			State = 1084;
			pattern_capture_target();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Closed_patternContext[] closed_pattern() {
			return GetRuleContexts<Closed_patternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Closed_patternContext closed_pattern(int i) {
			return GetRuleContext<Closed_patternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VBAR() { return GetTokens(PythonParser.VBAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VBAR(int i) {
			return GetToken(PythonParser.VBAR, i);
		}
		public Or_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterOr_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitOr_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Or_patternContext or_pattern() {
		Or_patternContext _localctx = new Or_patternContext(Context, State);
		EnterRule(_localctx, 138, RULE_or_pattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1086;
			closed_pattern();
			State = 1091;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VBAR) {
				{
				{
				State = 1087;
				Match(VBAR);
				State = 1088;
				closed_pattern();
				}
				}
				State = 1093;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Closed_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Literal_patternContext literal_pattern() {
			return GetRuleContext<Literal_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Capture_patternContext capture_pattern() {
			return GetRuleContext<Capture_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wildcard_patternContext wildcard_pattern() {
			return GetRuleContext<Wildcard_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_patternContext value_pattern() {
			return GetRuleContext<Value_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_patternContext group_pattern() {
			return GetRuleContext<Group_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sequence_patternContext sequence_pattern() {
			return GetRuleContext<Sequence_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mapping_patternContext mapping_pattern() {
			return GetRuleContext<Mapping_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_patternContext class_pattern() {
			return GetRuleContext<Class_patternContext>(0);
		}
		public Closed_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closed_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterClosed_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitClosed_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosed_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Closed_patternContext closed_pattern() {
		Closed_patternContext _localctx = new Closed_patternContext(Context, State);
		EnterRule(_localctx, 140, RULE_closed_pattern);
		try {
			State = 1102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1094;
				literal_pattern();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1095;
				capture_pattern();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1096;
				wildcard_pattern();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1097;
				value_pattern();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1098;
				group_pattern();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1099;
				sequence_pattern();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1100;
				mapping_pattern();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1101;
				class_pattern();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Complex_numberContext complex_number() {
			return GetRuleContext<Complex_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringsContext strings() {
			return GetRuleContext<StringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(PythonParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(PythonParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(PythonParser.FALSE, 0); }
		public Literal_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterLiteral_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitLiteral_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_patternContext literal_pattern() {
		Literal_patternContext _localctx = new Literal_patternContext(Context, State);
		EnterRule(_localctx, 142, RULE_literal_pattern);
		try {
			State = 1110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1104;
				signed_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1105;
				complex_number();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1106;
				strings();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1107;
				Match(NONE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1108;
				Match(TRUE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1109;
				Match(FALSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Complex_numberContext complex_number() {
			return GetRuleContext<Complex_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringsContext strings() {
			return GetRuleContext<StringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(PythonParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(PythonParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(PythonParser.FALSE, 0); }
		public Literal_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterLiteral_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitLiteral_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_exprContext literal_expr() {
		Literal_exprContext _localctx = new Literal_exprContext(Context, State);
		EnterRule(_localctx, 144, RULE_literal_expr);
		try {
			State = 1118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1112;
				signed_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1113;
				complex_number();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1114;
				strings();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1115;
				Match(NONE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1116;
				Match(TRUE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1117;
				Match(FALSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Complex_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_real_numberContext signed_real_number() {
			return GetRuleContext<Signed_real_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Imaginary_numberContext imaginary_number() {
			return GetRuleContext<Imaginary_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PythonParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PythonParser.MINUS, 0); }
		public Complex_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complex_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterComplex_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitComplex_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplex_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Complex_numberContext complex_number() {
		Complex_numberContext _localctx = new Complex_numberContext(Context, State);
		EnterRule(_localctx, 146, RULE_complex_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1120;
			signed_real_number();
			State = 1121;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1122;
			imaginary_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(PythonParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PythonParser.MINUS, 0); }
		public Signed_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterSigned_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitSigned_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_numberContext signed_number() {
		Signed_numberContext _localctx = new Signed_numberContext(Context, State);
		EnterRule(_localctx, 148, RULE_signed_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 1124;
				Match(MINUS);
				}
			}

			State = 1127;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_real_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Real_numberContext real_number() {
			return GetRuleContext<Real_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PythonParser.MINUS, 0); }
		public Signed_real_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_real_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterSigned_real_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitSigned_real_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_real_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_real_numberContext signed_real_number() {
		Signed_real_numberContext _localctx = new Signed_real_numberContext(Context, State);
		EnterRule(_localctx, 150, RULE_signed_real_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 1129;
				Match(MINUS);
				}
			}

			State = 1132;
			real_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(PythonParser.NUMBER, 0); }
		public Real_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterReal_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitReal_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReal_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Real_numberContext real_number() {
		Real_numberContext _localctx = new Real_numberContext(Context, State);
		EnterRule(_localctx, 152, RULE_real_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1134;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Imaginary_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(PythonParser.NUMBER, 0); }
		public Imaginary_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imaginary_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterImaginary_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitImaginary_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImaginary_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Imaginary_numberContext imaginary_number() {
		Imaginary_numberContext _localctx = new Imaginary_numberContext(Context, State);
		EnterRule(_localctx, 154, RULE_imaginary_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1136;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Capture_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pattern_capture_targetContext pattern_capture_target() {
			return GetRuleContext<Pattern_capture_targetContext>(0);
		}
		public Capture_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capture_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterCapture_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitCapture_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCapture_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Capture_patternContext capture_pattern() {
		Capture_patternContext _localctx = new Capture_patternContext(Context, State);
		EnterRule(_localctx, 156, RULE_capture_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1138;
			pattern_capture_target();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pattern_capture_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Soft_kw__not__wildcardContext soft_kw__not__wildcard() {
			return GetRuleContext<Soft_kw__not__wildcardContext>(0);
		}
		public Pattern_capture_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern_capture_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterPattern_capture_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitPattern_capture_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPattern_capture_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pattern_capture_targetContext pattern_capture_target() {
		Pattern_capture_targetContext _localctx = new Pattern_capture_targetContext(Context, State);
		EnterRule(_localctx, 158, RULE_pattern_capture_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1140;
			soft_kw__not__wildcard();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wildcard_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Soft_kw_wildcardContext soft_kw_wildcard() {
			return GetRuleContext<Soft_kw_wildcardContext>(0);
		}
		public Wildcard_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcard_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterWildcard_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitWildcard_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcard_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Wildcard_patternContext wildcard_pattern() {
		Wildcard_patternContext _localctx = new Wildcard_patternContext(Context, State);
		EnterRule(_localctx, 160, RULE_wildcard_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1142;
			soft_kw_wildcard();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttrContext attr() {
			return GetRuleContext<AttrContext>(0);
		}
		public Value_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterValue_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitValue_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_patternContext value_pattern() {
		Value_patternContext _localctx = new Value_patternContext(Context, State);
		EnterRule(_localctx, 162, RULE_value_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1144;
			attr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(PythonParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(PythonParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(PythonParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(PythonParser.DOT, i);
		}
		public AttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrContext attr() {
		AttrContext _localctx = new AttrContext(Context, State);
		EnterRule(_localctx, 164, RULE_attr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1146;
			Match(NAME);
			State = 1149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1147;
				Match(DOT);
				State = 1148;
				Match(NAME);
				}
				}
				State = 1151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DOT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_or_attrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(PythonParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(PythonParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(PythonParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(PythonParser.DOT, i);
		}
		public Name_or_attrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_or_attr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterName_or_attr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitName_or_attr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName_or_attr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Name_or_attrContext name_or_attr() {
		Name_or_attrContext _localctx = new Name_or_attrContext(Context, State);
		EnterRule(_localctx, 166, RULE_name_or_attr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1153;
			Match(NAME);
			State = 1158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 1154;
				Match(DOT);
				State = 1155;
				Match(NAME);
				}
				}
				State = 1160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PythonParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PythonParser.RPAR, 0); }
		public Group_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterGroup_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitGroup_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_patternContext group_pattern() {
		Group_patternContext _localctx = new Group_patternContext(Context, State);
		EnterRule(_localctx, 168, RULE_group_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1161;
			Match(LPAR);
			State = 1162;
			pattern();
			State = 1163;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sequence_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(PythonParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(PythonParser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Maybe_sequence_patternContext maybe_sequence_pattern() {
			return GetRuleContext<Maybe_sequence_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PythonParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PythonParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Open_sequence_patternContext open_sequence_pattern() {
			return GetRuleContext<Open_sequence_patternContext>(0);
		}
		public Sequence_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterSequence_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitSequence_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sequence_patternContext sequence_pattern() {
		Sequence_patternContext _localctx = new Sequence_patternContext(Context, State);
		EnterRule(_localctx, 170, RULE_sequence_pattern);
		try {
			State = 1175;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LSQB:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1165;
				Match(LSQB);
				State = 1167;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
				case 1:
					{
					State = 1166;
					maybe_sequence_pattern();
					}
					break;
				}
				State = 1169;
				Match(RSQB);
				}
				break;
			case LPAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1170;
				Match(LPAR);
				State = 1172;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
				case 1:
					{
					State = 1171;
					open_sequence_pattern();
					}
					break;
				}
				State = 1174;
				Match(RPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_sequence_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Maybe_star_patternContext maybe_star_pattern() {
			return GetRuleContext<Maybe_star_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PythonParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Maybe_sequence_patternContext maybe_sequence_pattern() {
			return GetRuleContext<Maybe_sequence_patternContext>(0);
		}
		public Open_sequence_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_sequence_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterOpen_sequence_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitOpen_sequence_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_sequence_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_sequence_patternContext open_sequence_pattern() {
		Open_sequence_patternContext _localctx = new Open_sequence_patternContext(Context, State);
		EnterRule(_localctx, 172, RULE_open_sequence_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1177;
			maybe_star_pattern();
			State = 1178;
			Match(COMMA);
			State = 1180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				{
				State = 1179;
				maybe_sequence_pattern();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Maybe_sequence_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Maybe_star_patternContext[] maybe_star_pattern() {
			return GetRuleContexts<Maybe_star_patternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Maybe_star_patternContext maybe_star_pattern(int i) {
			return GetRuleContext<Maybe_star_patternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		public Maybe_sequence_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maybe_sequence_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterMaybe_sequence_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitMaybe_sequence_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaybe_sequence_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Maybe_sequence_patternContext maybe_sequence_pattern() {
		Maybe_sequence_patternContext _localctx = new Maybe_sequence_patternContext(Context, State);
		EnterRule(_localctx, 174, RULE_maybe_sequence_pattern);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1182;
			maybe_star_pattern();
			State = 1187;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,129,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1183;
					Match(COMMA);
					State = 1184;
					maybe_star_pattern();
					}
					} 
				}
				State = 1189;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,129,Context);
			}
			State = 1191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1190;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Maybe_star_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Star_patternContext star_pattern() {
			return GetRuleContext<Star_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public Maybe_star_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maybe_star_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterMaybe_star_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitMaybe_star_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaybe_star_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Maybe_star_patternContext maybe_star_pattern() {
		Maybe_star_patternContext _localctx = new Maybe_star_patternContext(Context, State);
		EnterRule(_localctx, 176, RULE_maybe_star_pattern);
		try {
			State = 1195;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1193;
				star_pattern();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1194;
				pattern();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PythonParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		public Star_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterStar_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitStar_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_patternContext star_pattern() {
		Star_patternContext _localctx = new Star_patternContext(Context, State);
		EnterRule(_localctx, 178, RULE_star_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1197;
			Match(STAR);
			State = 1198;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mapping_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(PythonParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(PythonParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Double_star_patternContext double_star_pattern() {
			return GetRuleContext<Double_star_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Items_patternContext items_pattern() {
			return GetRuleContext<Items_patternContext>(0);
		}
		public Mapping_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapping_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterMapping_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitMapping_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapping_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mapping_patternContext mapping_pattern() {
		Mapping_patternContext _localctx = new Mapping_patternContext(Context, State);
		EnterRule(_localctx, 180, RULE_mapping_pattern);
		int _la;
		try {
			State = 1220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,135,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1200;
				Match(LBRACE);
				State = 1201;
				Match(RBRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1202;
				Match(LBRACE);
				State = 1203;
				double_star_pattern();
				State = 1205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1204;
					Match(COMMA);
					}
				}

				State = 1207;
				Match(RBRACE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1209;
				Match(LBRACE);
				State = 1210;
				items_pattern();
				State = 1213;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
				case 1:
					{
					State = 1211;
					Match(COMMA);
					State = 1212;
					double_star_pattern();
					}
					break;
				}
				State = 1216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1215;
					Match(COMMA);
					}
				}

				State = 1218;
				Match(RBRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Items_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Key_value_patternContext[] key_value_pattern() {
			return GetRuleContexts<Key_value_patternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_value_patternContext key_value_pattern(int i) {
			return GetRuleContext<Key_value_patternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		public Items_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_items_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterItems_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitItems_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItems_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Items_patternContext items_pattern() {
		Items_patternContext _localctx = new Items_patternContext(Context, State);
		EnterRule(_localctx, 182, RULE_items_pattern);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1222;
			key_value_pattern();
			State = 1227;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1223;
					Match(COMMA);
					State = 1224;
					key_value_pattern();
					}
					} 
				}
				State = 1229;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_value_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Literal_exprContext literal_expr() {
			return GetRuleContext<Literal_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrContext attr() {
			return GetRuleContext<AttrContext>(0);
		}
		public Key_value_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_value_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterKey_value_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitKey_value_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey_value_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Key_value_patternContext key_value_pattern() {
		Key_value_patternContext _localctx = new Key_value_patternContext(Context, State);
		EnterRule(_localctx, 184, RULE_key_value_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FSTRING_START:
			case FALSE:
			case NONE:
			case TRUE:
			case MINUS:
			case NUMBER:
			case STRING:
				{
				State = 1230;
				literal_expr();
				}
				break;
			case NAME:
				{
				State = 1231;
				attr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1234;
			Match(COLON);
			State = 1235;
			pattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Double_star_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(PythonParser.DOUBLESTAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pattern_capture_targetContext pattern_capture_target() {
			return GetRuleContext<Pattern_capture_targetContext>(0);
		}
		public Double_star_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double_star_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterDouble_star_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitDouble_star_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble_star_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Double_star_patternContext double_star_pattern() {
		Double_star_patternContext _localctx = new Double_star_patternContext(Context, State);
		EnterRule(_localctx, 186, RULE_double_star_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1237;
			Match(DOUBLESTAR);
			State = 1238;
			pattern_capture_target();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Name_or_attrContext name_or_attr() {
			return GetRuleContext<Name_or_attrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PythonParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PythonParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Positional_patternsContext positional_patterns() {
			return GetRuleContext<Positional_patternsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_patternsContext keyword_patterns() {
			return GetRuleContext<Keyword_patternsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		public Class_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterClass_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitClass_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_patternContext class_pattern() {
		Class_patternContext _localctx = new Class_patternContext(Context, State);
		EnterRule(_localctx, 188, RULE_class_pattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1240;
			name_or_attr();
			State = 1241;
			Match(LPAR);
			State = 1253;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				{
				State = 1248;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
				case 1:
					{
					State = 1242;
					positional_patterns();
					State = 1245;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
					case 1:
						{
						State = 1243;
						Match(COMMA);
						State = 1244;
						keyword_patterns();
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 1247;
					keyword_patterns();
					}
					break;
				}
				State = 1251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1250;
					Match(COMMA);
					}
				}

				}
				break;
			}
			State = 1255;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Positional_patternsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext[] pattern() {
			return GetRuleContexts<PatternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern(int i) {
			return GetRuleContext<PatternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		public Positional_patternsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positional_patterns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterPositional_patterns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitPositional_patterns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositional_patterns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Positional_patternsContext positional_patterns() {
		Positional_patternsContext _localctx = new Positional_patternsContext(Context, State);
		EnterRule(_localctx, 190, RULE_positional_patterns);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1257;
			pattern();
			State = 1262;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1258;
					Match(COMMA);
					State = 1259;
					pattern();
					}
					} 
				}
				State = 1264;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_patternsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_patternContext[] keyword_pattern() {
			return GetRuleContexts<Keyword_patternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_patternContext keyword_pattern(int i) {
			return GetRuleContext<Keyword_patternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		public Keyword_patternsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_patterns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterKeyword_patterns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitKeyword_patterns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword_patterns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_patternsContext keyword_patterns() {
		Keyword_patternsContext _localctx = new Keyword_patternsContext(Context, State);
		EnterRule(_localctx, 192, RULE_keyword_patterns);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1265;
			keyword_pattern();
			State = 1270;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1266;
					Match(COMMA);
					State = 1267;
					keyword_pattern();
					}
					} 
				}
				State = 1272;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PythonParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public Keyword_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterKeyword_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitKeyword_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_patternContext keyword_pattern() {
		Keyword_patternContext _localctx = new Keyword_patternContext(Context, State);
		EnterRule(_localctx, 194, RULE_keyword_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1273;
			Match(NAME);
			State = 1274;
			Match(EQUAL);
			State = 1275;
			pattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Soft_kw_typeContext soft_kw_type() {
			return GetRuleContext<Soft_kw_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PythonParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_paramsContext type_params() {
			return GetRuleContext<Type_paramsContext>(0);
		}
		public Type_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterType_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitType_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_aliasContext type_alias() {
		Type_aliasContext _localctx = new Type_aliasContext(Context, State);
		EnterRule(_localctx, 196, RULE_type_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1277;
			soft_kw_type();
			State = 1278;
			Match(NAME);
			State = 1280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSQB) {
				{
				State = 1279;
				type_params();
				}
			}

			State = 1282;
			Match(EQUAL);
			State = 1283;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(PythonParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_seqContext type_param_seq() {
			return GetRuleContext<Type_param_seqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(PythonParser.RSQB, 0); }
		public Type_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterType_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitType_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_params(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_paramsContext type_params() {
		Type_paramsContext _localctx = new Type_paramsContext(Context, State);
		EnterRule(_localctx, 198, RULE_type_params);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1285;
			Match(LSQB);
			State = 1286;
			type_param_seq();
			State = 1287;
			Match(RSQB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_param_seqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_paramContext[] type_param() {
			return GetRuleContexts<Type_paramContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_paramContext type_param(int i) {
			return GetRuleContext<Type_paramContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		public Type_param_seqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_param_seq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterType_param_seq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitType_param_seq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_param_seq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_param_seqContext type_param_seq() {
		Type_param_seqContext _localctx = new Type_param_seqContext(Context, State);
		EnterRule(_localctx, 200, RULE_type_param_seq);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1289;
			type_param();
			State = 1294;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1290;
					Match(COMMA);
					State = 1291;
					type_param();
					}
					} 
				}
				State = 1296;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
			}
			State = 1298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1297;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_paramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_param_boundContext type_param_bound() {
			return GetRuleContext<Type_param_boundContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PythonParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(PythonParser.DOUBLESTAR, 0); }
		public Type_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterType_param(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitType_param(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_paramContext type_param() {
		Type_paramContext _localctx = new Type_paramContext(Context, State);
		EnterRule(_localctx, 202, RULE_type_param);
		int _la;
		try {
			State = 1308;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1300;
				Match(NAME);
				State = 1302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 1301;
					type_param_bound();
					}
				}

				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1304;
				Match(STAR);
				State = 1305;
				Match(NAME);
				}
				break;
			case DOUBLESTAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1306;
				Match(DOUBLESTAR);
				State = 1307;
				Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_param_boundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Type_param_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_param_bound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterType_param_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitType_param_bound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_param_bound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_param_boundContext type_param_bound() {
		Type_param_boundContext _localctx = new Type_param_boundContext(Context, State);
		EnterRule(_localctx, 204, RULE_type_param_bound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1310;
			Match(COLON);
			State = 1311;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 206, RULE_expressions);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1313;
			expression();
			State = 1318;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,149,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1314;
					Match(COMMA);
					State = 1315;
					expression();
					}
					} 
				}
				State = 1320;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,149,Context);
			}
			State = 1322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1321;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DisjunctionContext[] disjunction() {
			return GetRuleContexts<DisjunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DisjunctionContext disjunction(int i) {
			return GetRuleContext<DisjunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(PythonParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(PythonParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdefContext lambdef() {
			return GetRuleContext<LambdefContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 208, RULE_expression);
		int _la;
		try {
			State = 1333;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FSTRING_START:
			case FALSE:
			case AWAIT:
			case NONE:
			case TRUE:
			case NOT:
			case LPAR:
			case LSQB:
			case LBRACE:
			case PLUS:
			case MINUS:
			case TILDE:
			case ELLIPSIS:
			case NAME:
			case NUMBER:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1324;
				disjunction();
				State = 1330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 1325;
					Match(IF);
					State = 1326;
					disjunction();
					State = 1327;
					Match(ELSE);
					State = 1328;
					expression();
					}
				}

				}
				break;
			case LAMBDA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1332;
				lambdef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Yield_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(PythonParser.YIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(PythonParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_expressionsContext star_expressions() {
			return GetRuleContext<Star_expressionsContext>(0);
		}
		public Yield_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yield_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterYield_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitYield_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYield_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Yield_exprContext yield_expr() {
		Yield_exprContext _localctx = new Yield_exprContext(Context, State);
		EnterRule(_localctx, 210, RULE_yield_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1335;
			Match(YIELD);
			State = 1341;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FROM:
				{
				State = 1336;
				Match(FROM);
				State = 1337;
				expression();
				}
				break;
			case TYPE_COMMENT:
			case FSTRING_START:
			case FALSE:
			case AWAIT:
			case NONE:
			case TRUE:
			case LAMBDA:
			case NOT:
			case LPAR:
			case LSQB:
			case LBRACE:
			case RPAR:
			case RBRACE:
			case COLON:
			case SEMI:
			case PLUS:
			case MINUS:
			case STAR:
			case EQUAL:
			case TILDE:
			case ELLIPSIS:
			case EXCLAMATION:
			case NAME:
			case NUMBER:
			case STRING:
			case NEWLINE:
				{
				State = 1339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 31556018110599568L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 119537665L) != 0)) {
					{
					State = 1338;
					star_expressions();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_expressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Star_expressionContext[] star_expression() {
			return GetRuleContexts<Star_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_expressionContext star_expression(int i) {
			return GetRuleContext<Star_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		public Star_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterStar_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitStar_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_expressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_expressionsContext star_expressions() {
		Star_expressionsContext _localctx = new Star_expressionsContext(Context, State);
		EnterRule(_localctx, 212, RULE_star_expressions);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1343;
			star_expression();
			State = 1348;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1344;
					Match(COMMA);
					State = 1345;
					star_expression();
					}
					} 
				}
				State = 1350;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
			}
			State = 1352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1351;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PythonParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_orContext bitwise_or() {
			return GetRuleContext<Bitwise_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Star_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterStar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitStar_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_expressionContext star_expression() {
		Star_expressionContext _localctx = new Star_expressionContext(Context, State);
		EnterRule(_localctx, 214, RULE_star_expression);
		try {
			State = 1357;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1354;
				Match(STAR);
				State = 1355;
				bitwise_or(0);
				}
				break;
			case FSTRING_START:
			case FALSE:
			case AWAIT:
			case NONE:
			case TRUE:
			case LAMBDA:
			case NOT:
			case LPAR:
			case LSQB:
			case LBRACE:
			case PLUS:
			case MINUS:
			case TILDE:
			case ELLIPSIS:
			case NAME:
			case NUMBER:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1356;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_named_expressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext[] star_named_expression() {
			return GetRuleContexts<Star_named_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext star_named_expression(int i) {
			return GetRuleContext<Star_named_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		public Star_named_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_named_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterStar_named_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitStar_named_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_named_expressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_named_expressionsContext star_named_expressions() {
		Star_named_expressionsContext _localctx = new Star_named_expressionsContext(Context, State);
		EnterRule(_localctx, 216, RULE_star_named_expressions);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1359;
			star_named_expression();
			State = 1364;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,158,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1360;
					Match(COMMA);
					State = 1361;
					star_named_expression();
					}
					} 
				}
				State = 1366;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,158,Context);
			}
			State = 1368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1367;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_named_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PythonParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_orContext bitwise_or() {
			return GetRuleContext<Bitwise_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		public Star_named_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_named_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterStar_named_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitStar_named_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_named_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_named_expressionContext star_named_expression() {
		Star_named_expressionContext _localctx = new Star_named_expressionContext(Context, State);
		EnterRule(_localctx, 218, RULE_star_named_expression);
		try {
			State = 1373;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1370;
				Match(STAR);
				State = 1371;
				bitwise_or(0);
				}
				break;
			case FSTRING_START:
			case FALSE:
			case AWAIT:
			case NONE:
			case TRUE:
			case LAMBDA:
			case NOT:
			case LPAR:
			case LSQB:
			case LBRACE:
			case PLUS:
			case MINUS:
			case TILDE:
			case ELLIPSIS:
			case NAME:
			case NUMBER:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1372;
				named_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLONEQUAL() { return GetToken(PythonParser.COLONEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_expressionContext assignment_expression() {
		Assignment_expressionContext _localctx = new Assignment_expressionContext(Context, State);
		EnterRule(_localctx, 220, RULE_assignment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1375;
			Match(NAME);
			State = 1376;
			Match(COLONEQUAL);
			State = 1377;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Named_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterNamed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitNamed_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_expressionContext named_expression() {
		Named_expressionContext _localctx = new Named_expressionContext(Context, State);
		EnterRule(_localctx, 222, RULE_named_expression);
		try {
			State = 1381;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1379;
				assignment_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1380;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisjunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConjunctionContext[] conjunction() {
			return GetRuleContexts<ConjunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConjunctionContext conjunction(int i) {
			return GetRuleContext<ConjunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(PythonParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(PythonParser.OR, i);
		}
		public DisjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disjunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterDisjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitDisjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisjunctionContext disjunction() {
		DisjunctionContext _localctx = new DisjunctionContext(Context, State);
		EnterRule(_localctx, 224, RULE_disjunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1383;
			conjunction();
			State = 1388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 1384;
				Match(OR);
				State = 1385;
				conjunction();
				}
				}
				State = 1390;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConjunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InversionContext[] inversion() {
			return GetRuleContexts<InversionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InversionContext inversion(int i) {
			return GetRuleContext<InversionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(PythonParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(PythonParser.AND, i);
		}
		public ConjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conjunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterConjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitConjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConjunctionContext conjunction() {
		ConjunctionContext _localctx = new ConjunctionContext(Context, State);
		EnterRule(_localctx, 226, RULE_conjunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1391;
			inversion();
			State = 1396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 1392;
				Match(AND);
				State = 1393;
				inversion();
				}
				}
				State = 1398;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InversionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PythonParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InversionContext inversion() {
			return GetRuleContext<InversionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public InversionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inversion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterInversion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitInversion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInversion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InversionContext inversion() {
		InversionContext _localctx = new InversionContext(Context, State);
		EnterRule(_localctx, 228, RULE_inversion);
		try {
			State = 1402;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1399;
				Match(NOT);
				State = 1400;
				inversion();
				}
				break;
			case FSTRING_START:
			case FALSE:
			case AWAIT:
			case NONE:
			case TRUE:
			case LPAR:
			case LSQB:
			case LBRACE:
			case PLUS:
			case MINUS:
			case TILDE:
			case ELLIPSIS:
			case NAME:
			case NUMBER:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1401;
				comparison();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_orContext bitwise_or() {
			return GetRuleContext<Bitwise_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compare_op_bitwise_or_pairContext[] compare_op_bitwise_or_pair() {
			return GetRuleContexts<Compare_op_bitwise_or_pairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compare_op_bitwise_or_pairContext compare_op_bitwise_or_pair(int i) {
			return GetRuleContext<Compare_op_bitwise_or_pairContext>(i);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 230, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1404;
			bitwise_or(0);
			State = 1408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 15)) & ~0x3f) == 0 && ((1L << (_la - 15)) & 2137450605445153L) != 0)) {
				{
				{
				State = 1405;
				compare_op_bitwise_or_pair();
				}
				}
				State = 1410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compare_op_bitwise_or_pairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Eq_bitwise_orContext eq_bitwise_or() {
			return GetRuleContext<Eq_bitwise_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Noteq_bitwise_orContext noteq_bitwise_or() {
			return GetRuleContext<Noteq_bitwise_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lte_bitwise_orContext lte_bitwise_or() {
			return GetRuleContext<Lte_bitwise_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lt_bitwise_orContext lt_bitwise_or() {
			return GetRuleContext<Lt_bitwise_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gte_bitwise_orContext gte_bitwise_or() {
			return GetRuleContext<Gte_bitwise_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gt_bitwise_orContext gt_bitwise_or() {
			return GetRuleContext<Gt_bitwise_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Notin_bitwise_orContext notin_bitwise_or() {
			return GetRuleContext<Notin_bitwise_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public In_bitwise_orContext in_bitwise_or() {
			return GetRuleContext<In_bitwise_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Isnot_bitwise_orContext isnot_bitwise_or() {
			return GetRuleContext<Isnot_bitwise_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Is_bitwise_orContext is_bitwise_or() {
			return GetRuleContext<Is_bitwise_orContext>(0);
		}
		public Compare_op_bitwise_or_pairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compare_op_bitwise_or_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterCompare_op_bitwise_or_pair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitCompare_op_bitwise_or_pair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompare_op_bitwise_or_pair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compare_op_bitwise_or_pairContext compare_op_bitwise_or_pair() {
		Compare_op_bitwise_or_pairContext _localctx = new Compare_op_bitwise_or_pairContext(Context, State);
		EnterRule(_localctx, 232, RULE_compare_op_bitwise_or_pair);
		try {
			State = 1421;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1411;
				eq_bitwise_or();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1412;
				noteq_bitwise_or();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1413;
				lte_bitwise_or();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1414;
				lt_bitwise_or();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1415;
				gte_bitwise_or();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1416;
				gt_bitwise_or();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1417;
				notin_bitwise_or();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1418;
				in_bitwise_or();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1419;
				isnot_bitwise_or();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1420;
				is_bitwise_or();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Eq_bitwise_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQEQUAL() { return GetToken(PythonParser.EQEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_orContext bitwise_or() {
			return GetRuleContext<Bitwise_orContext>(0);
		}
		public Eq_bitwise_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eq_bitwise_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterEq_bitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitEq_bitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEq_bitwise_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Eq_bitwise_orContext eq_bitwise_or() {
		Eq_bitwise_orContext _localctx = new Eq_bitwise_orContext(Context, State);
		EnterRule(_localctx, 234, RULE_eq_bitwise_or);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1423;
			Match(EQEQUAL);
			State = 1424;
			bitwise_or(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Noteq_bitwise_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_orContext bitwise_or() {
			return GetRuleContext<Bitwise_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(PythonParser.NOTEQUAL, 0); }
		public Noteq_bitwise_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noteq_bitwise_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterNoteq_bitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitNoteq_bitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoteq_bitwise_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Noteq_bitwise_orContext noteq_bitwise_or() {
		Noteq_bitwise_orContext _localctx = new Noteq_bitwise_orContext(Context, State);
		EnterRule(_localctx, 236, RULE_noteq_bitwise_or);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1426;
			Match(NOTEQUAL);
			}
			State = 1427;
			bitwise_or(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lte_bitwise_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSEQUAL() { return GetToken(PythonParser.LESSEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_orContext bitwise_or() {
			return GetRuleContext<Bitwise_orContext>(0);
		}
		public Lte_bitwise_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lte_bitwise_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterLte_bitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitLte_bitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLte_bitwise_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lte_bitwise_orContext lte_bitwise_or() {
		Lte_bitwise_orContext _localctx = new Lte_bitwise_orContext(Context, State);
		EnterRule(_localctx, 238, RULE_lte_bitwise_or);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1429;
			Match(LESSEQUAL);
			State = 1430;
			bitwise_or(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lt_bitwise_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(PythonParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_orContext bitwise_or() {
			return GetRuleContext<Bitwise_orContext>(0);
		}
		public Lt_bitwise_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lt_bitwise_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterLt_bitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitLt_bitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLt_bitwise_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lt_bitwise_orContext lt_bitwise_or() {
		Lt_bitwise_orContext _localctx = new Lt_bitwise_orContext(Context, State);
		EnterRule(_localctx, 240, RULE_lt_bitwise_or);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1432;
			Match(LESS);
			State = 1433;
			bitwise_or(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gte_bitwise_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEREQUAL() { return GetToken(PythonParser.GREATEREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_orContext bitwise_or() {
			return GetRuleContext<Bitwise_orContext>(0);
		}
		public Gte_bitwise_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gte_bitwise_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterGte_bitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitGte_bitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGte_bitwise_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Gte_bitwise_orContext gte_bitwise_or() {
		Gte_bitwise_orContext _localctx = new Gte_bitwise_orContext(Context, State);
		EnterRule(_localctx, 242, RULE_gte_bitwise_or);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1435;
			Match(GREATEREQUAL);
			State = 1436;
			bitwise_or(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gt_bitwise_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(PythonParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_orContext bitwise_or() {
			return GetRuleContext<Bitwise_orContext>(0);
		}
		public Gt_bitwise_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gt_bitwise_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterGt_bitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitGt_bitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGt_bitwise_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Gt_bitwise_orContext gt_bitwise_or() {
		Gt_bitwise_orContext _localctx = new Gt_bitwise_orContext(Context, State);
		EnterRule(_localctx, 244, RULE_gt_bitwise_or);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1438;
			Match(GREATER);
			State = 1439;
			bitwise_or(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Notin_bitwise_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PythonParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(PythonParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_orContext bitwise_or() {
			return GetRuleContext<Bitwise_orContext>(0);
		}
		public Notin_bitwise_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notin_bitwise_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterNotin_bitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitNotin_bitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotin_bitwise_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Notin_bitwise_orContext notin_bitwise_or() {
		Notin_bitwise_orContext _localctx = new Notin_bitwise_orContext(Context, State);
		EnterRule(_localctx, 246, RULE_notin_bitwise_or);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1441;
			Match(NOT);
			State = 1442;
			Match(IN);
			State = 1443;
			bitwise_or(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_bitwise_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(PythonParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_orContext bitwise_or() {
			return GetRuleContext<Bitwise_orContext>(0);
		}
		public In_bitwise_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_bitwise_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterIn_bitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitIn_bitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIn_bitwise_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public In_bitwise_orContext in_bitwise_or() {
		In_bitwise_orContext _localctx = new In_bitwise_orContext(Context, State);
		EnterRule(_localctx, 248, RULE_in_bitwise_or);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1445;
			Match(IN);
			State = 1446;
			bitwise_or(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Isnot_bitwise_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PythonParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(PythonParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_orContext bitwise_or() {
			return GetRuleContext<Bitwise_orContext>(0);
		}
		public Isnot_bitwise_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isnot_bitwise_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterIsnot_bitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitIsnot_bitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsnot_bitwise_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Isnot_bitwise_orContext isnot_bitwise_or() {
		Isnot_bitwise_orContext _localctx = new Isnot_bitwise_orContext(Context, State);
		EnterRule(_localctx, 250, RULE_isnot_bitwise_or);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1448;
			Match(IS);
			State = 1449;
			Match(NOT);
			State = 1450;
			bitwise_or(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Is_bitwise_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(PythonParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_orContext bitwise_or() {
			return GetRuleContext<Bitwise_orContext>(0);
		}
		public Is_bitwise_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_is_bitwise_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterIs_bitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitIs_bitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIs_bitwise_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Is_bitwise_orContext is_bitwise_or() {
		Is_bitwise_orContext _localctx = new Is_bitwise_orContext(Context, State);
		EnterRule(_localctx, 252, RULE_is_bitwise_or);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1452;
			Match(IS);
			State = 1453;
			bitwise_or(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bitwise_orContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_xorContext bitwise_xor() {
			return GetRuleContext<Bitwise_xorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_orContext bitwise_or() {
			return GetRuleContext<Bitwise_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VBAR() { return GetToken(PythonParser.VBAR, 0); }
		public Bitwise_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_or; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterBitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitBitwise_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_orContext bitwise_or() {
		return bitwise_or(0);
	}

	private Bitwise_orContext bitwise_or(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bitwise_orContext _localctx = new Bitwise_orContext(Context, _parentState);
		Bitwise_orContext _prevctx = _localctx;
		int _startState = 254;
		EnterRecursionRule(_localctx, 254, RULE_bitwise_or, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1456;
			bitwise_xor(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1463;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,167,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Bitwise_orContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_bitwise_or);
					State = 1458;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 1459;
					Match(VBAR);
					State = 1460;
					bitwise_xor(0);
					}
					} 
				}
				State = 1465;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,167,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Bitwise_xorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_andContext bitwise_and() {
			return GetRuleContext<Bitwise_andContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_xorContext bitwise_xor() {
			return GetRuleContext<Bitwise_xorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIRCUMFLEX() { return GetToken(PythonParser.CIRCUMFLEX, 0); }
		public Bitwise_xorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_xor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterBitwise_xor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitBitwise_xor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_xor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_xorContext bitwise_xor() {
		return bitwise_xor(0);
	}

	private Bitwise_xorContext bitwise_xor(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bitwise_xorContext _localctx = new Bitwise_xorContext(Context, _parentState);
		Bitwise_xorContext _prevctx = _localctx;
		int _startState = 256;
		EnterRecursionRule(_localctx, 256, RULE_bitwise_xor, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1467;
			bitwise_and(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1474;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,168,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Bitwise_xorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_bitwise_xor);
					State = 1469;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 1470;
					Match(CIRCUMFLEX);
					State = 1471;
					bitwise_and(0);
					}
					} 
				}
				State = 1476;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,168,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Bitwise_andContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Shift_exprContext shift_expr() {
			return GetRuleContext<Shift_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_andContext bitwise_and() {
			return GetRuleContext<Bitwise_andContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPER() { return GetToken(PythonParser.AMPER, 0); }
		public Bitwise_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_and; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterBitwise_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitBitwise_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_andContext bitwise_and() {
		return bitwise_and(0);
	}

	private Bitwise_andContext bitwise_and(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bitwise_andContext _localctx = new Bitwise_andContext(Context, _parentState);
		Bitwise_andContext _prevctx = _localctx;
		int _startState = 258;
		EnterRecursionRule(_localctx, 258, RULE_bitwise_and, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1478;
			shift_expr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1485;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Bitwise_andContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_bitwise_and);
					State = 1480;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 1481;
					Match(AMPER);
					State = 1482;
					shift_expr(0);
					}
					} 
				}
				State = 1487;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Shift_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shift_exprContext shift_expr() {
			return GetRuleContext<Shift_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFTSHIFT() { return GetToken(PythonParser.LEFTSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHTSHIFT() { return GetToken(PythonParser.RIGHTSHIFT, 0); }
		public Shift_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterShift_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitShift_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_exprContext shift_expr() {
		return shift_expr(0);
	}

	private Shift_exprContext shift_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Shift_exprContext _localctx = new Shift_exprContext(Context, _parentState);
		Shift_exprContext _prevctx = _localctx;
		int _startState = 260;
		EnterRecursionRule(_localctx, 260, RULE_shift_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1489;
			sum(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1496;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Shift_exprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_shift_expr);
					State = 1491;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 1492;
					_la = TokenStream.LA(1);
					if ( !(_la==LEFTSHIFT || _la==RIGHTSHIFT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1493;
					sum(0);
					}
					} 
				}
				State = 1498;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PythonParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PythonParser.MINUS, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		return sum(0);
	}

	private SumContext sum(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SumContext _localctx = new SumContext(Context, _parentState);
		SumContext _prevctx = _localctx;
		int _startState = 262;
		EnterRecursionRule(_localctx, 262, RULE_sum, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1500;
			term(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1507;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,171,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SumContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_sum);
					State = 1502;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 1503;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1504;
					term(0);
					}
					} 
				}
				State = 1509;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,171,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PythonParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(PythonParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESLASH() { return GetToken(PythonParser.DOUBLESLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(PythonParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(PythonParser.AT, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 264;
		EnterRecursionRule(_localctx, 264, RULE_term, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1511;
			factor();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1518;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TermContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 1513;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 1514;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 1342177411L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1515;
					factor();
					}
					} 
				}
				State = 1520;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PythonParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(PythonParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(PythonParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PowerContext power() {
			return GetRuleContext<PowerContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 266, RULE_factor);
		try {
			State = 1528;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1521;
				Match(PLUS);
				State = 1522;
				factor();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1523;
				Match(MINUS);
				State = 1524;
				factor();
				}
				break;
			case TILDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1525;
				Match(TILDE);
				State = 1526;
				factor();
				}
				break;
			case FSTRING_START:
			case FALSE:
			case AWAIT:
			case NONE:
			case TRUE:
			case LPAR:
			case LSQB:
			case LBRACE:
			case ELLIPSIS:
			case NAME:
			case NUMBER:
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1527;
				power();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Await_primaryContext await_primary() {
			return GetRuleContext<Await_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(PythonParser.DOUBLESTAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public PowerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterPower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitPower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PowerContext power() {
		PowerContext _localctx = new PowerContext(Context, State);
		EnterRule(_localctx, 268, RULE_power);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1530;
			await_primary();
			State = 1533;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
			case 1:
				{
				State = 1531;
				Match(DOUBLESTAR);
				State = 1532;
				factor();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Await_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AWAIT() { return GetToken(PythonParser.AWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public Await_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_await_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterAwait_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitAwait_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAwait_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Await_primaryContext await_primary() {
		Await_primaryContext _localctx = new Await_primaryContext(Context, State);
		EnterRule(_localctx, 270, RULE_await_primary);
		try {
			State = 1538;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AWAIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1535;
				Match(AWAIT);
				State = 1536;
				primary(0);
				}
				break;
			case FSTRING_START:
			case FALSE:
			case NONE:
			case TRUE:
			case LPAR:
			case LSQB:
			case LBRACE:
			case ELLIPSIS:
			case NAME:
			case NUMBER:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1537;
				primary(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(PythonParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenexpContext genexp() {
			return GetRuleContext<GenexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PythonParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PythonParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(PythonParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlicesContext slices() {
			return GetRuleContext<SlicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(PythonParser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		return primary(0);
	}

	private PrimaryContext primary(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryContext _localctx = new PrimaryContext(Context, _parentState);
		PrimaryContext _prevctx = _localctx;
		int _startState = 272;
		EnterRecursionRule(_localctx, 272, RULE_primary, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1541;
			atom();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1560;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,178,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PrimaryContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_primary);
					State = 1543;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 1556;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,177,Context) ) {
					case 1:
						{
						State = 1544;
						Match(DOT);
						State = 1545;
						Match(NAME);
						}
						break;
					case 2:
						{
						State = 1546;
						genexp();
						}
						break;
					case 3:
						{
						State = 1547;
						Match(LPAR);
						State = 1549;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 31556018110599568L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 119537681L) != 0)) {
							{
							State = 1548;
							arguments();
							}
						}

						State = 1551;
						Match(RPAR);
						}
						break;
					case 4:
						{
						State = 1552;
						Match(LSQB);
						State = 1553;
						slices();
						State = 1554;
						Match(RSQB);
						}
						break;
					}
					}
					} 
				}
				State = 1562;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,178,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SlicesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SliceContext[] slice() {
			return GetRuleContexts<SliceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceContext slice(int i) {
			return GetRuleContext<SliceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Starred_expressionContext[] starred_expression() {
			return GetRuleContexts<Starred_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Starred_expressionContext starred_expression(int i) {
			return GetRuleContext<Starred_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		public SlicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slices; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterSlices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitSlices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlices(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SlicesContext slices() {
		SlicesContext _localctx = new SlicesContext(Context, State);
		EnterRule(_localctx, 274, RULE_slices);
		int _la;
		try {
			int _alt;
			State = 1581;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1563;
				slice();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1566;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FSTRING_START:
				case FALSE:
				case AWAIT:
				case NONE:
				case TRUE:
				case LAMBDA:
				case NOT:
				case LPAR:
				case LSQB:
				case LBRACE:
				case COLON:
				case PLUS:
				case MINUS:
				case TILDE:
				case ELLIPSIS:
				case NAME:
				case NUMBER:
				case STRING:
					{
					State = 1564;
					slice();
					}
					break;
				case STAR:
					{
					State = 1565;
					starred_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1575;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,181,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1568;
						Match(COMMA);
						State = 1571;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case FSTRING_START:
						case FALSE:
						case AWAIT:
						case NONE:
						case TRUE:
						case LAMBDA:
						case NOT:
						case LPAR:
						case LSQB:
						case LBRACE:
						case COLON:
						case PLUS:
						case MINUS:
						case TILDE:
						case ELLIPSIS:
						case NAME:
						case NUMBER:
						case STRING:
							{
							State = 1569;
							slice();
							}
							break;
						case STAR:
							{
							State = 1570;
							starred_expression();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					State = 1577;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,181,Context);
				}
				State = 1579;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1578;
					Match(COMMA);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(PythonParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(PythonParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		public SliceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterSlice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitSlice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceContext slice() {
		SliceContext _localctx = new SliceContext(Context, State);
		EnterRule(_localctx, 276, RULE_slice);
		int _la;
		try {
			State = 1597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1584;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13541619601117584L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 119537665L) != 0)) {
					{
					State = 1583;
					expression();
					}
				}

				State = 1586;
				Match(COLON);
				State = 1588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13541619601117584L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 119537665L) != 0)) {
					{
					State = 1587;
					expression();
					}
				}

				State = 1594;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 1590;
					Match(COLON);
					State = 1592;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13541619601117584L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 119537665L) != 0)) {
						{
						State = 1591;
						expression();
						}
					}

					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1596;
				named_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(PythonParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(PythonParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(PythonParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringsContext strings() {
			return GetRuleContext<StringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(PythonParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupContext group() {
			return GetRuleContext<GroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenexpContext genexp() {
			return GetRuleContext<GenexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListcompContext listcomp() {
			return GetRuleContext<ListcompContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictContext dict() {
			return GetRuleContext<DictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictcompContext dictcomp() {
			return GetRuleContext<DictcompContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetcompContext setcomp() {
			return GetRuleContext<SetcompContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(PythonParser.ELLIPSIS, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 278, RULE_atom);
		try {
			State = 1621;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1599;
				Match(NAME);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1600;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1601;
				Match(FALSE);
				}
				break;
			case NONE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1602;
				Match(NONE);
				}
				break;
			case FSTRING_START:
			case STRING:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1603;
				strings();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1604;
				Match(NUMBER);
				}
				break;
			case LPAR:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1608;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
				case 1:
					{
					State = 1605;
					tuple();
					}
					break;
				case 2:
					{
					State = 1606;
					group();
					}
					break;
				case 3:
					{
					State = 1607;
					genexp();
					}
					break;
				}
				}
				break;
			case LSQB:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1612;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
				case 1:
					{
					State = 1610;
					list();
					}
					break;
				case 2:
					{
					State = 1611;
					listcomp();
					}
					break;
				}
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1618;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
				case 1:
					{
					State = 1614;
					dict();
					}
					break;
				case 2:
					{
					State = 1615;
					set();
					}
					break;
				case 3:
					{
					State = 1616;
					dictcomp();
					}
					break;
				case 4:
					{
					State = 1617;
					setcomp();
					}
					break;
				}
				}
				break;
			case ELLIPSIS:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1620;
				Match(ELLIPSIS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PythonParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PythonParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Yield_exprContext yield_expr() {
			return GetRuleContext<Yield_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		public GroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupContext group() {
		GroupContext _localctx = new GroupContext(Context, State);
		EnterRule(_localctx, 280, RULE_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1623;
			Match(LPAR);
			State = 1626;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case YIELD:
				{
				State = 1624;
				yield_expr();
				}
				break;
			case FSTRING_START:
			case FALSE:
			case AWAIT:
			case NONE:
			case TRUE:
			case LAMBDA:
			case NOT:
			case LPAR:
			case LSQB:
			case LBRACE:
			case PLUS:
			case MINUS:
			case TILDE:
			case ELLIPSIS:
			case NAME:
			case NUMBER:
			case STRING:
				{
				State = 1625;
				named_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1628;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(PythonParser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_paramsContext lambda_params() {
			return GetRuleContext<Lambda_paramsContext>(0);
		}
		public LambdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterLambdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitLambdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdefContext lambdef() {
		LambdefContext _localctx = new LambdefContext(Context, State);
		EnterRule(_localctx, 282, RULE_lambdef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1630;
			Match(LAMBDA);
			State = 1632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & 68719542273L) != 0)) {
				{
				State = 1631;
				lambda_params();
				}
			}

			State = 1634;
			Match(COLON);
			State = 1635;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_paramsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_parametersContext lambda_parameters() {
			return GetRuleContext<Lambda_parametersContext>(0);
		}
		public Lambda_paramsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterLambda_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitLambda_params(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_params(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_paramsContext lambda_params() {
		Lambda_paramsContext _localctx = new Lambda_paramsContext(Context, State);
		EnterRule(_localctx, 284, RULE_lambda_params);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1637;
			lambda_parameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_parametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_slash_no_defaultContext lambda_slash_no_default() {
			return GetRuleContext<Lambda_slash_no_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_param_no_defaultContext[] lambda_param_no_default() {
			return GetRuleContexts<Lambda_param_no_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_param_no_defaultContext lambda_param_no_default(int i) {
			return GetRuleContext<Lambda_param_no_defaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_param_with_defaultContext[] lambda_param_with_default() {
			return GetRuleContexts<Lambda_param_with_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_param_with_defaultContext lambda_param_with_default(int i) {
			return GetRuleContext<Lambda_param_with_defaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_star_etcContext lambda_star_etc() {
			return GetRuleContext<Lambda_star_etcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_slash_with_defaultContext lambda_slash_with_default() {
			return GetRuleContext<Lambda_slash_with_defaultContext>(0);
		}
		public Lambda_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterLambda_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitLambda_parameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_parametersContext lambda_parameters() {
		Lambda_parametersContext _localctx = new Lambda_parametersContext(Context, State);
		EnterRule(_localctx, 286, RULE_lambda_parameters);
		int _la;
		try {
			int _alt;
			State = 1688;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1639;
				lambda_slash_no_default();
				State = 1643;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,195,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1640;
						lambda_param_no_default();
						}
						} 
					}
					State = 1645;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,195,Context);
				}
				State = 1649;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME) {
					{
					{
					State = 1646;
					lambda_param_with_default();
					}
					}
					State = 1651;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1653;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==DOUBLESTAR) {
					{
					State = 1652;
					lambda_star_etc();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1655;
				lambda_slash_with_default();
				State = 1659;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME) {
					{
					{
					State = 1656;
					lambda_param_with_default();
					}
					}
					State = 1661;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==DOUBLESTAR) {
					{
					State = 1662;
					lambda_star_etc();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1666;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1665;
						lambda_param_no_default();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1668;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,200,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 1673;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME) {
					{
					{
					State = 1670;
					lambda_param_with_default();
					}
					}
					State = 1675;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1677;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==DOUBLESTAR) {
					{
					State = 1676;
					lambda_star_etc();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1679;
					lambda_param_with_default();
					}
					}
					State = 1682;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==NAME );
				State = 1685;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STAR || _la==DOUBLESTAR) {
					{
					State = 1684;
					lambda_star_etc();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1687;
				lambda_star_etc();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_slash_no_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(PythonParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_param_no_defaultContext[] lambda_param_no_default() {
			return GetRuleContexts<Lambda_param_no_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_param_no_defaultContext lambda_param_no_default(int i) {
			return GetRuleContext<Lambda_param_no_defaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PythonParser.COMMA, 0); }
		public Lambda_slash_no_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_slash_no_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterLambda_slash_no_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitLambda_slash_no_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_slash_no_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_slash_no_defaultContext lambda_slash_no_default() {
		Lambda_slash_no_defaultContext _localctx = new Lambda_slash_no_defaultContext(Context, State);
		EnterRule(_localctx, 288, RULE_lambda_slash_no_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1691;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1690;
				lambda_param_no_default();
				}
				}
				State = 1693;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			State = 1695;
			Match(SLASH);
			State = 1697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1696;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_slash_with_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(PythonParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_param_no_defaultContext[] lambda_param_no_default() {
			return GetRuleContexts<Lambda_param_no_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_param_no_defaultContext lambda_param_no_default(int i) {
			return GetRuleContext<Lambda_param_no_defaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_param_with_defaultContext[] lambda_param_with_default() {
			return GetRuleContexts<Lambda_param_with_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_param_with_defaultContext lambda_param_with_default(int i) {
			return GetRuleContext<Lambda_param_with_defaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PythonParser.COMMA, 0); }
		public Lambda_slash_with_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_slash_with_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterLambda_slash_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitLambda_slash_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_slash_with_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_slash_with_defaultContext lambda_slash_with_default() {
		Lambda_slash_with_defaultContext _localctx = new Lambda_slash_with_defaultContext(Context, State);
		EnterRule(_localctx, 290, RULE_lambda_slash_with_default);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1702;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,208,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1699;
					lambda_param_no_default();
					}
					} 
				}
				State = 1704;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,208,Context);
			}
			State = 1706;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1705;
				lambda_param_with_default();
				}
				}
				State = 1708;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			State = 1710;
			Match(SLASH);
			State = 1712;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1711;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_star_etcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PythonParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_param_no_defaultContext lambda_param_no_default() {
			return GetRuleContext<Lambda_param_no_defaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_param_maybe_defaultContext[] lambda_param_maybe_default() {
			return GetRuleContexts<Lambda_param_maybe_defaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_param_maybe_defaultContext lambda_param_maybe_default(int i) {
			return GetRuleContext<Lambda_param_maybe_defaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_kwdsContext lambda_kwds() {
			return GetRuleContext<Lambda_kwdsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PythonParser.COMMA, 0); }
		public Lambda_star_etcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_star_etc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterLambda_star_etc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitLambda_star_etc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_star_etc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_star_etcContext lambda_star_etc() {
		Lambda_star_etcContext _localctx = new Lambda_star_etcContext(Context, State);
		EnterRule(_localctx, 292, RULE_lambda_star_etc);
		int _la;
		try {
			State = 1736;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,215,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1714;
				Match(STAR);
				State = 1715;
				lambda_param_no_default();
				State = 1719;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME) {
					{
					{
					State = 1716;
					lambda_param_maybe_default();
					}
					}
					State = 1721;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1723;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLESTAR) {
					{
					State = 1722;
					lambda_kwds();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1725;
				Match(STAR);
				State = 1726;
				Match(COMMA);
				State = 1728;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1727;
					lambda_param_maybe_default();
					}
					}
					State = 1730;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==NAME );
				State = 1733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOUBLESTAR) {
					{
					State = 1732;
					lambda_kwds();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1735;
				lambda_kwds();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_kwdsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(PythonParser.DOUBLESTAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_param_no_defaultContext lambda_param_no_default() {
			return GetRuleContext<Lambda_param_no_defaultContext>(0);
		}
		public Lambda_kwdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_kwds; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterLambda_kwds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitLambda_kwds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_kwds(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_kwdsContext lambda_kwds() {
		Lambda_kwdsContext _localctx = new Lambda_kwdsContext(Context, State);
		EnterRule(_localctx, 294, RULE_lambda_kwds);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1738;
			Match(DOUBLESTAR);
			State = 1739;
			lambda_param_no_default();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_param_no_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_paramContext lambda_param() {
			return GetRuleContext<Lambda_paramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PythonParser.COMMA, 0); }
		public Lambda_param_no_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_param_no_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterLambda_param_no_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitLambda_param_no_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_param_no_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_param_no_defaultContext lambda_param_no_default() {
		Lambda_param_no_defaultContext _localctx = new Lambda_param_no_defaultContext(Context, State);
		EnterRule(_localctx, 296, RULE_lambda_param_no_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1741;
			lambda_param();
			State = 1743;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1742;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_param_with_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_paramContext lambda_param() {
			return GetRuleContext<Lambda_paramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_assignmentContext default_assignment() {
			return GetRuleContext<Default_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PythonParser.COMMA, 0); }
		public Lambda_param_with_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_param_with_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterLambda_param_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitLambda_param_with_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_param_with_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_param_with_defaultContext lambda_param_with_default() {
		Lambda_param_with_defaultContext _localctx = new Lambda_param_with_defaultContext(Context, State);
		EnterRule(_localctx, 298, RULE_lambda_param_with_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1745;
			lambda_param();
			State = 1746;
			default_assignment();
			State = 1748;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1747;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_param_maybe_defaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Lambda_paramContext lambda_param() {
			return GetRuleContext<Lambda_paramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_assignmentContext default_assignment() {
			return GetRuleContext<Default_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PythonParser.COMMA, 0); }
		public Lambda_param_maybe_defaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_param_maybe_default; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterLambda_param_maybe_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitLambda_param_maybe_default(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_param_maybe_default(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_param_maybe_defaultContext lambda_param_maybe_default() {
		Lambda_param_maybe_defaultContext _localctx = new Lambda_param_maybe_defaultContext(Context, State);
		EnterRule(_localctx, 300, RULE_lambda_param_maybe_default);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1750;
			lambda_param();
			State = 1752;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 1751;
				default_assignment();
				}
			}

			State = 1755;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1754;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_paramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		public Lambda_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterLambda_param(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitLambda_param(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_paramContext lambda_param() {
		Lambda_paramContext _localctx = new Lambda_paramContext(Context, State);
		EnterRule(_localctx, 302, RULE_lambda_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1757;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fstring_middleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fstring_replacement_fieldContext fstring_replacement_field() {
			return GetRuleContext<Fstring_replacement_fieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FSTRING_MIDDLE() { return GetToken(PythonParser.FSTRING_MIDDLE, 0); }
		public Fstring_middleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fstring_middle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterFstring_middle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitFstring_middle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFstring_middle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fstring_middleContext fstring_middle() {
		Fstring_middleContext _localctx = new Fstring_middleContext(Context, State);
		EnterRule(_localctx, 304, RULE_fstring_middle);
		try {
			State = 1761;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1759;
				fstring_replacement_field();
				}
				break;
			case FSTRING_MIDDLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1760;
				Match(FSTRING_MIDDLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fstring_replacement_fieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(PythonParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(PythonParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Yield_exprContext yield_expr() {
			return GetRuleContext<Yield_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_expressionsContext star_expressions() {
			return GetRuleContext<Star_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PythonParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fstring_conversionContext fstring_conversion() {
			return GetRuleContext<Fstring_conversionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fstring_full_format_specContext fstring_full_format_spec() {
			return GetRuleContext<Fstring_full_format_specContext>(0);
		}
		public Fstring_replacement_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fstring_replacement_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterFstring_replacement_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitFstring_replacement_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFstring_replacement_field(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fstring_replacement_fieldContext fstring_replacement_field() {
		Fstring_replacement_fieldContext _localctx = new Fstring_replacement_fieldContext(Context, State);
		EnterRule(_localctx, 306, RULE_fstring_replacement_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1763;
			Match(LBRACE);
			State = 1766;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case YIELD:
				{
				State = 1764;
				yield_expr();
				}
				break;
			case FSTRING_START:
			case FALSE:
			case AWAIT:
			case NONE:
			case TRUE:
			case LAMBDA:
			case NOT:
			case LPAR:
			case LSQB:
			case LBRACE:
			case PLUS:
			case MINUS:
			case STAR:
			case TILDE:
			case ELLIPSIS:
			case NAME:
			case NUMBER:
			case STRING:
				{
				State = 1765;
				star_expressions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1769;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 1768;
				Match(EQUAL);
				}
			}

			State = 1772;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCLAMATION) {
				{
				State = 1771;
				fstring_conversion();
				}
			}

			State = 1775;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 1774;
				fstring_full_format_spec();
				}
			}

			State = 1777;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fstring_conversionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION() { return GetToken(PythonParser.EXCLAMATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		public Fstring_conversionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fstring_conversion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterFstring_conversion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitFstring_conversion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFstring_conversion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fstring_conversionContext fstring_conversion() {
		Fstring_conversionContext _localctx = new Fstring_conversionContext(Context, State);
		EnterRule(_localctx, 308, RULE_fstring_conversion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1779;
			Match(EXCLAMATION);
			State = 1780;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fstring_full_format_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fstring_format_specContext[] fstring_format_spec() {
			return GetRuleContexts<Fstring_format_specContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fstring_format_specContext fstring_format_spec(int i) {
			return GetRuleContext<Fstring_format_specContext>(i);
		}
		public Fstring_full_format_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fstring_full_format_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterFstring_full_format_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitFstring_full_format_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFstring_full_format_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fstring_full_format_specContext fstring_full_format_spec() {
		Fstring_full_format_specContext _localctx = new Fstring_full_format_specContext(Context, State);
		EnterRule(_localctx, 310, RULE_fstring_full_format_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1782;
			Match(COLON);
			State = 1786;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FSTRING_MIDDLE || _la==LBRACE) {
				{
				{
				State = 1783;
				fstring_format_spec();
				}
				}
				State = 1788;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fstring_format_specContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FSTRING_MIDDLE() { return GetToken(PythonParser.FSTRING_MIDDLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fstring_replacement_fieldContext fstring_replacement_field() {
			return GetRuleContext<Fstring_replacement_fieldContext>(0);
		}
		public Fstring_format_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fstring_format_spec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterFstring_format_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitFstring_format_spec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFstring_format_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fstring_format_specContext fstring_format_spec() {
		Fstring_format_specContext _localctx = new Fstring_format_specContext(Context, State);
		EnterRule(_localctx, 312, RULE_fstring_format_spec);
		try {
			State = 1791;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FSTRING_MIDDLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1789;
				Match(FSTRING_MIDDLE);
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1790;
				fstring_replacement_field();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FstringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FSTRING_START() { return GetToken(PythonParser.FSTRING_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FSTRING_END() { return GetToken(PythonParser.FSTRING_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fstring_middleContext[] fstring_middle() {
			return GetRuleContexts<Fstring_middleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fstring_middleContext fstring_middle(int i) {
			return GetRuleContext<Fstring_middleContext>(i);
		}
		public FstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fstring; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterFstring(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitFstring(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFstring(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FstringContext fstring() {
		FstringContext _localctx = new FstringContext(Context, State);
		EnterRule(_localctx, 314, RULE_fstring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1793;
			Match(FSTRING_START);
			State = 1797;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FSTRING_MIDDLE || _la==LBRACE) {
				{
				{
				State = 1794;
				fstring_middle();
				}
				}
				State = 1799;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1800;
			Match(FSTRING_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PythonParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 316, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1802;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FstringContext[] fstring() {
			return GetRuleContexts<FstringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FstringContext fstring(int i) {
			return GetRuleContext<FstringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		public StringsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterStrings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitStrings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringsContext strings() {
		StringsContext _localctx = new StringsContext(Context, State);
		EnterRule(_localctx, 318, RULE_strings);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1806;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 1806;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FSTRING_START:
						{
						State = 1804;
						fstring();
						}
						break;
					case STRING:
						{
						State = 1805;
						@string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1808;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,229,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(PythonParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(PythonParser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionsContext star_named_expressions() {
			return GetRuleContext<Star_named_expressionsContext>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 320, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1810;
			Match(LSQB);
			State = 1812;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 31556018110599568L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 119537665L) != 0)) {
				{
				State = 1811;
				star_named_expressions();
				}
			}

			State = 1814;
			Match(RSQB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PythonParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PythonParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext star_named_expression() {
			return GetRuleContext<Star_named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PythonParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionsContext star_named_expressions() {
			return GetRuleContext<Star_named_expressionsContext>(0);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 322, RULE_tuple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1816;
			Match(LPAR);
			State = 1822;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 31556018110599568L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 119537665L) != 0)) {
				{
				State = 1817;
				star_named_expression();
				State = 1818;
				Match(COMMA);
				State = 1820;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 31556018110599568L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 119537665L) != 0)) {
					{
					State = 1819;
					star_named_expressions();
					}
				}

				}
			}

			State = 1824;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(PythonParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionsContext star_named_expressions() {
			return GetRuleContext<Star_named_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(PythonParser.RBRACE, 0); }
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 324, RULE_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1826;
			Match(LBRACE);
			State = 1827;
			star_named_expressions();
			State = 1828;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(PythonParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(PythonParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Double_starred_kvpairsContext double_starred_kvpairs() {
			return GetRuleContext<Double_starred_kvpairsContext>(0);
		}
		public DictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dict; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterDict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitDict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDict(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictContext dict() {
		DictContext _localctx = new DictContext(Context, State);
		EnterRule(_localctx, 326, RULE_dict);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1830;
			Match(LBRACE);
			State = 1832;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 13541619601117584L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 119537681L) != 0)) {
				{
				State = 1831;
				double_starred_kvpairs();
				}
			}

			State = 1834;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Double_starred_kvpairsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Double_starred_kvpairContext[] double_starred_kvpair() {
			return GetRuleContexts<Double_starred_kvpairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Double_starred_kvpairContext double_starred_kvpair(int i) {
			return GetRuleContext<Double_starred_kvpairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		public Double_starred_kvpairsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double_starred_kvpairs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterDouble_starred_kvpairs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitDouble_starred_kvpairs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble_starred_kvpairs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Double_starred_kvpairsContext double_starred_kvpairs() {
		Double_starred_kvpairsContext _localctx = new Double_starred_kvpairsContext(Context, State);
		EnterRule(_localctx, 328, RULE_double_starred_kvpairs);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1836;
			double_starred_kvpair();
			State = 1841;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,234,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1837;
					Match(COMMA);
					State = 1838;
					double_starred_kvpair();
					}
					} 
				}
				State = 1843;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,234,Context);
			}
			State = 1845;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1844;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Double_starred_kvpairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(PythonParser.DOUBLESTAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_orContext bitwise_or() {
			return GetRuleContext<Bitwise_orContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KvpairContext kvpair() {
			return GetRuleContext<KvpairContext>(0);
		}
		public Double_starred_kvpairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double_starred_kvpair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterDouble_starred_kvpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitDouble_starred_kvpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble_starred_kvpair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Double_starred_kvpairContext double_starred_kvpair() {
		Double_starred_kvpairContext _localctx = new Double_starred_kvpairContext(Context, State);
		EnterRule(_localctx, 330, RULE_double_starred_kvpair);
		try {
			State = 1850;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOUBLESTAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1847;
				Match(DOUBLESTAR);
				State = 1848;
				bitwise_or(0);
				}
				break;
			case FSTRING_START:
			case FALSE:
			case AWAIT:
			case NONE:
			case TRUE:
			case LAMBDA:
			case NOT:
			case LPAR:
			case LSQB:
			case LBRACE:
			case PLUS:
			case MINUS:
			case TILDE:
			case ELLIPSIS:
			case NAME:
			case NUMBER:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1849;
				kvpair();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KvpairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PythonParser.COLON, 0); }
		public KvpairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kvpair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterKvpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitKvpair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKvpair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KvpairContext kvpair() {
		KvpairContext _localctx = new KvpairContext(Context, State);
		EnterRule(_localctx, 332, RULE_kvpair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1852;
			expression();
			State = 1853;
			Match(COLON);
			State = 1854;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_if_clausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public For_if_clauseContext[] for_if_clause() {
			return GetRuleContexts<For_if_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_if_clauseContext for_if_clause(int i) {
			return GetRuleContext<For_if_clauseContext>(i);
		}
		public For_if_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_if_clauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterFor_if_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitFor_if_clauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_if_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_if_clausesContext for_if_clauses() {
		For_if_clausesContext _localctx = new For_if_clausesContext(Context, State);
		EnterRule(_localctx, 334, RULE_for_if_clauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1857;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1856;
				for_if_clause();
				}
				}
				State = 1859;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==FOR || _la==ASYNC );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_if_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(PythonParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_targetsContext star_targets() {
			return GetRuleContext<Star_targetsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(PythonParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DisjunctionContext[] disjunction() {
			return GetRuleContexts<DisjunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DisjunctionContext disjunction(int i) {
			return GetRuleContext<DisjunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(PythonParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(PythonParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(PythonParser.IF, i);
		}
		public For_if_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_if_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterFor_if_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitFor_if_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_if_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_if_clauseContext for_if_clause() {
		For_if_clauseContext _localctx = new For_if_clauseContext(Context, State);
		EnterRule(_localctx, 336, RULE_for_if_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1862;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASYNC) {
				{
				State = 1861;
				Match(ASYNC);
				}
			}

			State = 1864;
			Match(FOR);
			State = 1865;
			star_targets();
			State = 1866;
			Match(IN);
			State = 1867;
			disjunction();
			State = 1872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IF) {
				{
				{
				State = 1868;
				Match(IF);
				State = 1869;
				disjunction();
				}
				}
				State = 1874;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListcompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(PythonParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_if_clausesContext for_if_clauses() {
			return GetRuleContext<For_if_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(PythonParser.RSQB, 0); }
		public ListcompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listcomp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterListcomp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitListcomp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListcomp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListcompContext listcomp() {
		ListcompContext _localctx = new ListcompContext(Context, State);
		EnterRule(_localctx, 338, RULE_listcomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1875;
			Match(LSQB);
			State = 1876;
			named_expression();
			State = 1877;
			for_if_clauses();
			State = 1878;
			Match(RSQB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetcompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(PythonParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Named_expressionContext named_expression() {
			return GetRuleContext<Named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_if_clausesContext for_if_clauses() {
			return GetRuleContext<For_if_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(PythonParser.RBRACE, 0); }
		public SetcompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setcomp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterSetcomp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitSetcomp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetcomp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetcompContext setcomp() {
		SetcompContext _localctx = new SetcompContext(Context, State);
		EnterRule(_localctx, 340, RULE_setcomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1880;
			Match(LBRACE);
			State = 1881;
			named_expression();
			State = 1882;
			for_if_clauses();
			State = 1883;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenexpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PythonParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public For_if_clausesContext for_if_clauses() {
			return GetRuleContext<For_if_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PythonParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GenexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterGenexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitGenexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenexpContext genexp() {
		GenexpContext _localctx = new GenexpContext(Context, State);
		EnterRule(_localctx, 342, RULE_genexp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1885;
			Match(LPAR);
			State = 1888;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,240,Context) ) {
			case 1:
				{
				State = 1886;
				assignment_expression();
				}
				break;
			case 2:
				{
				State = 1887;
				expression();
				}
				break;
			}
			State = 1890;
			for_if_clauses();
			State = 1891;
			Match(RPAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictcompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(PythonParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KvpairContext kvpair() {
			return GetRuleContext<KvpairContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_if_clausesContext for_if_clauses() {
			return GetRuleContext<For_if_clausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(PythonParser.RBRACE, 0); }
		public DictcompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictcomp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterDictcomp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitDictcomp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictcomp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictcompContext dictcomp() {
		DictcompContext _localctx = new DictcompContext(Context, State);
		EnterRule(_localctx, 344, RULE_dictcomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1893;
			Match(LBRACE);
			State = 1894;
			kvpair();
			State = 1895;
			for_if_clauses();
			State = 1896;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PythonParser.COMMA, 0); }
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 346, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1898;
			args();
			State = 1900;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1899;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Starred_expressionContext[] starred_expression() {
			return GetRuleContexts<Starred_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Starred_expressionContext starred_expression(int i) {
			return GetRuleContext<Starred_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KwargsContext kwargs() {
			return GetRuleContext<KwargsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext[] assignment_expression() {
			return GetRuleContexts<Assignment_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression(int i) {
			return GetRuleContext<Assignment_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 348, RULE_args);
		try {
			int _alt;
			State = 1927;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1907;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STAR:
					{
					State = 1902;
					starred_expression();
					}
					break;
				case FSTRING_START:
				case FALSE:
				case AWAIT:
				case NONE:
				case TRUE:
				case LAMBDA:
				case NOT:
				case LPAR:
				case LSQB:
				case LBRACE:
				case PLUS:
				case MINUS:
				case TILDE:
				case ELLIPSIS:
				case NAME:
				case NUMBER:
				case STRING:
					{
					State = 1905;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
					case 1:
						{
						State = 1903;
						assignment_expression();
						}
						break;
					case 2:
						{
						State = 1904;
						expression();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1919;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,246,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1909;
						Match(COMMA);
						State = 1915;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case STAR:
							{
							State = 1910;
							starred_expression();
							}
							break;
						case FSTRING_START:
						case FALSE:
						case AWAIT:
						case NONE:
						case TRUE:
						case LAMBDA:
						case NOT:
						case LPAR:
						case LSQB:
						case LBRACE:
						case PLUS:
						case MINUS:
						case TILDE:
						case ELLIPSIS:
						case NAME:
						case NUMBER:
						case STRING:
							{
							State = 1913;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
							case 1:
								{
								State = 1911;
								assignment_expression();
								}
								break;
							case 2:
								{
								State = 1912;
								expression();
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					State = 1921;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,246,Context);
				}
				State = 1924;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,247,Context) ) {
				case 1:
					{
					State = 1922;
					Match(COMMA);
					State = 1923;
					kwargs();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1926;
				kwargs();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KwargsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_starredContext[] kwarg_or_starred() {
			return GetRuleContexts<Kwarg_or_starredContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_starredContext kwarg_or_starred(int i) {
			return GetRuleContext<Kwarg_or_starredContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_double_starredContext[] kwarg_or_double_starred() {
			return GetRuleContexts<Kwarg_or_double_starredContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Kwarg_or_double_starredContext kwarg_or_double_starred(int i) {
			return GetRuleContext<Kwarg_or_double_starredContext>(i);
		}
		public KwargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwargs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterKwargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitKwargs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwargs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KwargsContext kwargs() {
		KwargsContext _localctx = new KwargsContext(Context, State);
		EnterRule(_localctx, 350, RULE_kwargs);
		try {
			int _alt;
			State = 1956;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,253,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1929;
				kwarg_or_starred();
				State = 1934;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,249,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1930;
						Match(COMMA);
						State = 1931;
						kwarg_or_starred();
						}
						} 
					}
					State = 1936;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,249,Context);
				}
				State = 1946;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
				case 1:
					{
					State = 1937;
					Match(COMMA);
					State = 1938;
					kwarg_or_double_starred();
					State = 1943;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,250,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1939;
							Match(COMMA);
							State = 1940;
							kwarg_or_double_starred();
							}
							} 
						}
						State = 1945;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,250,Context);
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1948;
				kwarg_or_double_starred();
				State = 1953;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,252,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1949;
						Match(COMMA);
						State = 1950;
						kwarg_or_double_starred();
						}
						} 
					}
					State = 1955;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,252,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Starred_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PythonParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Starred_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_starred_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterStarred_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitStarred_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStarred_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Starred_expressionContext starred_expression() {
		Starred_expressionContext _localctx = new Starred_expressionContext(Context, State);
		EnterRule(_localctx, 352, RULE_starred_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1958;
			Match(STAR);
			State = 1959;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kwarg_or_starredContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PythonParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Starred_expressionContext starred_expression() {
			return GetRuleContext<Starred_expressionContext>(0);
		}
		public Kwarg_or_starredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwarg_or_starred; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterKwarg_or_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitKwarg_or_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwarg_or_starred(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kwarg_or_starredContext kwarg_or_starred() {
		Kwarg_or_starredContext _localctx = new Kwarg_or_starredContext(Context, State);
		EnterRule(_localctx, 354, RULE_kwarg_or_starred);
		try {
			State = 1965;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1961;
				Match(NAME);
				State = 1962;
				Match(EQUAL);
				State = 1963;
				expression();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1964;
				starred_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Kwarg_or_double_starredContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(PythonParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(PythonParser.DOUBLESTAR, 0); }
		public Kwarg_or_double_starredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kwarg_or_double_starred; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterKwarg_or_double_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitKwarg_or_double_starred(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKwarg_or_double_starred(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Kwarg_or_double_starredContext kwarg_or_double_starred() {
		Kwarg_or_double_starredContext _localctx = new Kwarg_or_double_starredContext(Context, State);
		EnterRule(_localctx, 356, RULE_kwarg_or_double_starred);
		try {
			State = 1972;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1967;
				Match(NAME);
				State = 1968;
				Match(EQUAL);
				State = 1969;
				expression();
				}
				break;
			case DOUBLESTAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1970;
				Match(DOUBLESTAR);
				State = 1971;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_targetsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Star_targetContext[] star_target() {
			return GetRuleContexts<Star_targetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_targetContext star_target(int i) {
			return GetRuleContext<Star_targetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		public Star_targetsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_targets; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterStar_targets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitStar_targets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_targets(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_targetsContext star_targets() {
		Star_targetsContext _localctx = new Star_targetsContext(Context, State);
		EnterRule(_localctx, 358, RULE_star_targets);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1974;
			star_target();
			State = 1979;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,256,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1975;
					Match(COMMA);
					State = 1976;
					star_target();
					}
					} 
				}
				State = 1981;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,256,Context);
			}
			State = 1983;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1982;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_targets_list_seqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Star_targetContext[] star_target() {
			return GetRuleContexts<Star_targetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_targetContext star_target(int i) {
			return GetRuleContext<Star_targetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		public Star_targets_list_seqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_targets_list_seq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterStar_targets_list_seq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitStar_targets_list_seq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_targets_list_seq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_targets_list_seqContext star_targets_list_seq() {
		Star_targets_list_seqContext _localctx = new Star_targets_list_seqContext(Context, State);
		EnterRule(_localctx, 360, RULE_star_targets_list_seq);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1985;
			star_target();
			State = 1988;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1986;
					Match(COMMA);
					State = 1987;
					star_target();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1990;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,258,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 1993;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1992;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_targets_tuple_seqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Star_targetContext[] star_target() {
			return GetRuleContexts<Star_targetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_targetContext star_target(int i) {
			return GetRuleContext<Star_targetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		public Star_targets_tuple_seqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_targets_tuple_seq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterStar_targets_tuple_seq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitStar_targets_tuple_seq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_targets_tuple_seq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_targets_tuple_seqContext star_targets_tuple_seq() {
		Star_targets_tuple_seqContext _localctx = new Star_targets_tuple_seqContext(Context, State);
		EnterRule(_localctx, 362, RULE_star_targets_tuple_seq);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1995;
			star_target();
			State = 2006;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,262,Context) ) {
			case 1:
				{
				State = 1996;
				Match(COMMA);
				}
				break;
			case 2:
				{
				State = 1999;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1997;
						Match(COMMA);
						State = 1998;
						star_target();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2001;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,260,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 2004;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2003;
					Match(COMMA);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PythonParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_targetContext star_target() {
			return GetRuleContext<Star_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Target_with_star_atomContext target_with_star_atom() {
			return GetRuleContext<Target_with_star_atomContext>(0);
		}
		public Star_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterStar_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitStar_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_targetContext star_target() {
		Star_targetContext _localctx = new Star_targetContext(Context, State);
		EnterRule(_localctx, 364, RULE_star_target);
		try {
			State = 2011;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2008;
				Match(STAR);
				{
				State = 2009;
				star_target();
				}
				}
				break;
			case FSTRING_START:
			case FALSE:
			case NONE:
			case TRUE:
			case LPAR:
			case LSQB:
			case LBRACE:
			case ELLIPSIS:
			case NAME:
			case NUMBER:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2010;
				target_with_star_atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Target_with_star_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public T_primaryContext t_primary() {
			return GetRuleContext<T_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(PythonParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(PythonParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlicesContext slices() {
			return GetRuleContext<SlicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(PythonParser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_atomContext star_atom() {
			return GetRuleContext<Star_atomContext>(0);
		}
		public Target_with_star_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target_with_star_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterTarget_with_star_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitTarget_with_star_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTarget_with_star_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Target_with_star_atomContext target_with_star_atom() {
		Target_with_star_atomContext _localctx = new Target_with_star_atomContext(Context, State);
		EnterRule(_localctx, 366, RULE_target_with_star_atom);
		try {
			State = 2023;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,265,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2013;
				t_primary(0);
				State = 2020;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 2014;
					Match(DOT);
					State = 2015;
					Match(NAME);
					}
					break;
				case LSQB:
					{
					State = 2016;
					Match(LSQB);
					State = 2017;
					slices();
					State = 2018;
					Match(RSQB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2022;
				star_atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PythonParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Target_with_star_atomContext target_with_star_atom() {
			return GetRuleContext<Target_with_star_atomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PythonParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_targets_tuple_seqContext star_targets_tuple_seq() {
			return GetRuleContext<Star_targets_tuple_seqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(PythonParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(PythonParser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_targets_list_seqContext star_targets_list_seq() {
			return GetRuleContext<Star_targets_list_seqContext>(0);
		}
		public Star_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterStar_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitStar_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_atomContext star_atom() {
		Star_atomContext _localctx = new Star_atomContext(Context, State);
		EnterRule(_localctx, 368, RULE_star_atom);
		int _la;
		try {
			State = 2040;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,268,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2025;
				Match(NAME);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2026;
				Match(LPAR);
				State = 2027;
				target_with_star_atom();
				State = 2028;
				Match(RPAR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2030;
				Match(LPAR);
				State = 2032;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18045184835195024L) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 57L) != 0)) {
					{
					State = 2031;
					star_targets_tuple_seq();
					}
				}

				State = 2034;
				Match(RPAR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2035;
				Match(LSQB);
				State = 2037;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18045184835195024L) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 57L) != 0)) {
					{
					State = 2036;
					star_targets_list_seq();
					}
				}

				State = 2039;
				Match(RSQB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Single_subscript_attribute_targetContext single_subscript_attribute_target() {
			return GetRuleContext<Single_subscript_attribute_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PythonParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Single_targetContext single_target() {
			return GetRuleContext<Single_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PythonParser.RPAR, 0); }
		public Single_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterSingle_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitSingle_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_targetContext single_target() {
		Single_targetContext _localctx = new Single_targetContext(Context, State);
		EnterRule(_localctx, 370, RULE_single_target);
		try {
			State = 2048;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,269,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2042;
				single_subscript_attribute_target();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2043;
				Match(NAME);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2044;
				Match(LPAR);
				State = 2045;
				single_target();
				State = 2046;
				Match(RPAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_subscript_attribute_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public T_primaryContext t_primary() {
			return GetRuleContext<T_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(PythonParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(PythonParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlicesContext slices() {
			return GetRuleContext<SlicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(PythonParser.RSQB, 0); }
		public Single_subscript_attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_subscript_attribute_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterSingle_subscript_attribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitSingle_subscript_attribute_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_subscript_attribute_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_subscript_attribute_targetContext single_subscript_attribute_target() {
		Single_subscript_attribute_targetContext _localctx = new Single_subscript_attribute_targetContext(Context, State);
		EnterRule(_localctx, 372, RULE_single_subscript_attribute_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2050;
			t_primary(0);
			State = 2057;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT:
				{
				State = 2051;
				Match(DOT);
				State = 2052;
				Match(NAME);
				}
				break;
			case LSQB:
				{
				State = 2053;
				Match(LSQB);
				State = 2054;
				slices();
				State = 2055;
				Match(RSQB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class T_primaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public T_primaryContext t_primary() {
			return GetRuleContext<T_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(PythonParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(PythonParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlicesContext slices() {
			return GetRuleContext<SlicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(PythonParser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenexpContext genexp() {
			return GetRuleContext<GenexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PythonParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PythonParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public T_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_t_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterT_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitT_primary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitT_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public T_primaryContext t_primary() {
		return t_primary(0);
	}

	private T_primaryContext t_primary(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		T_primaryContext _localctx = new T_primaryContext(Context, _parentState);
		T_primaryContext _prevctx = _localctx;
		int _startState = 374;
		EnterRecursionRule(_localctx, 374, RULE_t_primary, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2060;
			atom();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2079;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,273,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new T_primaryContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_t_primary);
					State = 2062;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 2075;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,272,Context) ) {
					case 1:
						{
						State = 2063;
						Match(DOT);
						State = 2064;
						Match(NAME);
						}
						break;
					case 2:
						{
						State = 2065;
						Match(LSQB);
						State = 2066;
						slices();
						State = 2067;
						Match(RSQB);
						}
						break;
					case 3:
						{
						State = 2069;
						genexp();
						}
						break;
					case 4:
						{
						State = 2070;
						Match(LPAR);
						State = 2072;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 31556018110599568L) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 119537681L) != 0)) {
							{
							State = 2071;
							arguments();
							}
						}

						State = 2074;
						Match(RPAR);
						}
						break;
					}
					}
					} 
				}
				State = 2081;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,273,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Del_targetsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Del_targetContext[] del_target() {
			return GetRuleContexts<Del_targetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Del_targetContext del_target(int i) {
			return GetRuleContext<Del_targetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		public Del_targetsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_del_targets; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterDel_targets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitDel_targets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDel_targets(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Del_targetsContext del_targets() {
		Del_targetsContext _localctx = new Del_targetsContext(Context, State);
		EnterRule(_localctx, 376, RULE_del_targets);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2082;
			del_target();
			State = 2087;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,274,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2083;
					Match(COMMA);
					State = 2084;
					del_target();
					}
					} 
				}
				State = 2089;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,274,Context);
			}
			State = 2091;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2090;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Del_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public T_primaryContext t_primary() {
			return GetRuleContext<T_primaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(PythonParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(PythonParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SlicesContext slices() {
			return GetRuleContext<SlicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(PythonParser.RSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Del_t_atomContext del_t_atom() {
			return GetRuleContext<Del_t_atomContext>(0);
		}
		public Del_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_del_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterDel_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitDel_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDel_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Del_targetContext del_target() {
		Del_targetContext _localctx = new Del_targetContext(Context, State);
		EnterRule(_localctx, 378, RULE_del_target);
		try {
			State = 2103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2093;
				t_primary(0);
				State = 2100;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 2094;
					Match(DOT);
					State = 2095;
					Match(NAME);
					}
					break;
				case LSQB:
					{
					State = 2096;
					Match(LSQB);
					State = 2097;
					slices();
					State = 2098;
					Match(RSQB);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2102;
				del_t_atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Del_t_atomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAR() { return GetToken(PythonParser.LPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Del_targetContext del_target() {
			return GetRuleContext<Del_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAR() { return GetToken(PythonParser.RPAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Del_targetsContext del_targets() {
			return GetRuleContext<Del_targetsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQB() { return GetToken(PythonParser.LSQB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQB() { return GetToken(PythonParser.RSQB, 0); }
		public Del_t_atomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_del_t_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterDel_t_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitDel_t_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDel_t_atom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Del_t_atomContext del_t_atom() {
		Del_t_atomContext _localctx = new Del_t_atomContext(Context, State);
		EnterRule(_localctx, 380, RULE_del_t_atom);
		int _la;
		try {
			State = 2120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,280,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2105;
				Match(NAME);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2106;
				Match(LPAR);
				State = 2107;
				del_target();
				State = 2108;
				Match(RPAR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2110;
				Match(LPAR);
				State = 2112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 30786325713040L) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 57L) != 0)) {
					{
					State = 2111;
					del_targets();
					}
				}

				State = 2114;
				Match(RPAR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2115;
				Match(LSQB);
				State = 2117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 30786325713040L) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 57L) != 0)) {
					{
					State = 2116;
					del_targets();
					}
				}

				State = 2119;
				Match(RSQB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_expressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(PythonParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(PythonParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PythonParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(PythonParser.DOUBLESTAR, 0); }
		public Type_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterType_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitType_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_expressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_expressionsContext type_expressions() {
		Type_expressionsContext _localctx = new Type_expressionsContext(Context, State);
		EnterRule(_localctx, 382, RULE_type_expressions);
		int _la;
		try {
			int _alt;
			State = 2153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FSTRING_START:
			case FALSE:
			case AWAIT:
			case NONE:
			case TRUE:
			case LAMBDA:
			case NOT:
			case LPAR:
			case LSQB:
			case LBRACE:
			case PLUS:
			case MINUS:
			case TILDE:
			case ELLIPSIS:
			case NAME:
			case NUMBER:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2122;
				expression();
				State = 2127;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,281,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2123;
						Match(COMMA);
						State = 2124;
						expression();
						}
						} 
					}
					State = 2129;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,281,Context);
				}
				State = 2142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2130;
					Match(COMMA);
					State = 2140;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STAR:
						{
						State = 2131;
						Match(STAR);
						State = 2132;
						expression();
						State = 2136;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2133;
							Match(COMMA);
							State = 2134;
							Match(DOUBLESTAR);
							State = 2135;
							expression();
							}
						}

						}
						break;
					case DOUBLESTAR:
						{
						State = 2138;
						Match(DOUBLESTAR);
						State = 2139;
						expression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2144;
				Match(STAR);
				State = 2145;
				expression();
				State = 2149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2146;
					Match(COMMA);
					State = 2147;
					Match(DOUBLESTAR);
					State = 2148;
					expression();
					}
				}

				}
				break;
			case DOUBLESTAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2151;
				Match(DOUBLESTAR);
				State = 2152;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_type_commentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(PythonParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_COMMENT() { return GetToken(PythonParser.TYPE_COMMENT, 0); }
		public Func_type_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_type_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterFunc_type_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitFunc_type_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_type_comment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_type_commentContext func_type_comment() {
		Func_type_commentContext _localctx = new Func_type_commentContext(Context, State);
		EnterRule(_localctx, 384, RULE_func_type_comment);
		try {
			State = 2158;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEWLINE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2155;
				Match(NEWLINE);
				State = 2156;
				Match(TYPE_COMMENT);
				}
				break;
			case TYPE_COMMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2157;
				Match(TYPE_COMMENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Soft_kw_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		public Soft_kw_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soft_kw_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterSoft_kw_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitSoft_kw_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoft_kw_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Soft_kw_typeContext soft_kw_type() {
		Soft_kw_typeContext _localctx = new Soft_kw_typeContext(Context, State);
		EnterRule(_localctx, 386, RULE_soft_kw_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2160;
			if (!(this.isEqualToCurrentTokenText("type"))) throw new FailedPredicateException(this, "this.isEqualToCurrentTokenText(\"type\")");
			State = 2161;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Soft_kw_matchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		public Soft_kw_matchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soft_kw_match; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterSoft_kw_match(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitSoft_kw_match(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoft_kw_match(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Soft_kw_matchContext soft_kw_match() {
		Soft_kw_matchContext _localctx = new Soft_kw_matchContext(Context, State);
		EnterRule(_localctx, 388, RULE_soft_kw_match);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2163;
			if (!(this.isEqualToCurrentTokenText("match"))) throw new FailedPredicateException(this, "this.isEqualToCurrentTokenText(\"match\")");
			State = 2164;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Soft_kw_caseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		public Soft_kw_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soft_kw_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterSoft_kw_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitSoft_kw_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoft_kw_case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Soft_kw_caseContext soft_kw_case() {
		Soft_kw_caseContext _localctx = new Soft_kw_caseContext(Context, State);
		EnterRule(_localctx, 390, RULE_soft_kw_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2166;
			if (!(this.isEqualToCurrentTokenText("case"))) throw new FailedPredicateException(this, "this.isEqualToCurrentTokenText(\"case\")");
			State = 2167;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Soft_kw_wildcardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		public Soft_kw_wildcardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soft_kw_wildcard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterSoft_kw_wildcard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitSoft_kw_wildcard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoft_kw_wildcard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Soft_kw_wildcardContext soft_kw_wildcard() {
		Soft_kw_wildcardContext _localctx = new Soft_kw_wildcardContext(Context, State);
		EnterRule(_localctx, 392, RULE_soft_kw_wildcard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2169;
			if (!(this.isEqualToCurrentTokenText("_"))) throw new FailedPredicateException(this, "this.isEqualToCurrentTokenText(\"_\")");
			State = 2170;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Soft_kw__not__wildcardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(PythonParser.NAME, 0); }
		public Soft_kw__not__wildcardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_soft_kw__not__wildcard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.EnterSoft_kw__not__wildcard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPythonParserListener typedListener = listener as IPythonParserListener;
			if (typedListener != null) typedListener.ExitSoft_kw__not__wildcard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPythonParserVisitor<TResult> typedVisitor = visitor as IPythonParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoft_kw__not__wildcard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Soft_kw__not__wildcardContext soft_kw__not__wildcard() {
		Soft_kw__not__wildcardContext _localctx = new Soft_kw__not__wildcardContext(Context, State);
		EnterRule(_localctx, 394, RULE_soft_kw__not__wildcard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2172;
			if (!(this.isnotEqualToCurrentTokenText("_"))) throw new FailedPredicateException(this, "this.isnotEqualToCurrentTokenText(\"_\")");
			State = 2173;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 29: return dotted_name_sempred((Dotted_nameContext)_localctx, predIndex);
		case 127: return bitwise_or_sempred((Bitwise_orContext)_localctx, predIndex);
		case 128: return bitwise_xor_sempred((Bitwise_xorContext)_localctx, predIndex);
		case 129: return bitwise_and_sempred((Bitwise_andContext)_localctx, predIndex);
		case 130: return shift_expr_sempred((Shift_exprContext)_localctx, predIndex);
		case 131: return sum_sempred((SumContext)_localctx, predIndex);
		case 132: return term_sempred((TermContext)_localctx, predIndex);
		case 136: return primary_sempred((PrimaryContext)_localctx, predIndex);
		case 187: return t_primary_sempred((T_primaryContext)_localctx, predIndex);
		case 193: return soft_kw_type_sempred((Soft_kw_typeContext)_localctx, predIndex);
		case 194: return soft_kw_match_sempred((Soft_kw_matchContext)_localctx, predIndex);
		case 195: return soft_kw_case_sempred((Soft_kw_caseContext)_localctx, predIndex);
		case 196: return soft_kw_wildcard_sempred((Soft_kw_wildcardContext)_localctx, predIndex);
		case 197: return soft_kw__not__wildcard_sempred((Soft_kw__not__wildcardContext)_localctx, predIndex);
		}
		return true;
	}
	private bool dotted_name_sempred(Dotted_nameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool bitwise_or_sempred(Bitwise_orContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool bitwise_xor_sempred(Bitwise_xorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool bitwise_and_sempred(Bitwise_andContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 2);
		}
		return true;
	}
	private bool shift_expr_sempred(Shift_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 2);
		}
		return true;
	}
	private bool sum_sempred(SumContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 2);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 2);
		}
		return true;
	}
	private bool primary_sempred(PrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 2);
		}
		return true;
	}
	private bool t_primary_sempred(T_primaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 2);
		}
		return true;
	}
	private bool soft_kw_type_sempred(Soft_kw_typeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return this.isEqualToCurrentTokenText("type");
		}
		return true;
	}
	private bool soft_kw_match_sempred(Soft_kw_matchContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return this.isEqualToCurrentTokenText("match");
		}
		return true;
	}
	private bool soft_kw_case_sempred(Soft_kw_caseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return this.isEqualToCurrentTokenText("case");
		}
		return true;
	}
	private bool soft_kw_wildcard_sempred(Soft_kw_wildcardContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return this.isEqualToCurrentTokenText("_");
		}
		return true;
	}
	private bool soft_kw__not__wildcard_sempred(Soft_kw__not__wildcardContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return this.isnotEqualToCurrentTokenText("_");
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,97,2176,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,1,0,3,0,398,8,0,1,0,1,0,1,1,1,1,1,
		2,1,2,5,2,406,8,2,10,2,12,2,409,9,2,1,2,1,2,1,3,1,3,3,3,415,8,3,1,3,1,
		3,1,3,1,3,5,3,421,8,3,10,3,12,3,424,9,3,1,3,1,3,1,4,1,4,1,5,4,5,431,8,
		5,11,5,12,5,432,1,6,1,6,3,6,437,8,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,445,8,
		7,1,8,1,8,1,8,5,8,450,8,8,10,8,12,8,453,9,8,1,8,3,8,456,8,8,1,8,1,8,1,
		9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,474,8,9,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,484,8,10,1,11,1,11,1,11,1,11,1,
		11,3,11,491,8,11,1,11,1,11,1,11,1,11,1,11,3,11,498,8,11,1,11,1,11,1,11,
		1,11,3,11,504,8,11,1,11,1,11,1,11,4,11,509,8,11,11,11,12,11,510,1,11,1,
		11,3,11,515,8,11,1,11,3,11,518,8,11,1,11,1,11,1,11,1,11,3,11,524,8,11,
		3,11,526,8,11,1,12,1,12,3,12,530,8,12,1,13,1,13,1,14,1,14,3,14,536,8,14,
		1,15,1,15,1,15,1,15,3,15,542,8,15,3,15,544,8,15,1,16,1,16,1,16,1,16,5,
		16,550,8,16,10,16,12,16,553,9,16,1,17,1,17,1,17,1,17,5,17,559,8,17,10,
		17,12,17,562,9,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,3,20,573,
		8,20,1,21,1,21,3,21,577,8,21,1,22,1,22,1,22,1,23,1,23,5,23,584,8,23,10,
		23,12,23,587,9,23,1,23,1,23,1,23,1,23,1,23,1,23,4,23,595,8,23,11,23,12,
		23,596,1,23,1,23,3,23,601,8,23,1,24,1,24,1,24,3,24,606,8,24,1,24,1,24,
		1,24,1,24,3,24,612,8,24,1,25,1,25,1,25,5,25,617,8,25,10,25,12,25,620,9,
		25,1,26,1,26,1,26,3,26,625,8,26,1,27,1,27,1,27,5,27,630,8,27,10,27,12,
		27,633,9,27,1,28,1,28,1,28,3,28,638,8,28,1,29,1,29,1,29,1,29,1,29,1,29,
		5,29,646,8,29,10,29,12,29,649,9,29,1,30,1,30,1,30,1,30,1,30,1,30,3,30,
		657,8,30,1,31,1,31,1,31,1,31,4,31,663,8,31,11,31,12,31,664,1,32,1,32,1,
		32,1,32,3,32,671,8,32,1,33,1,33,1,33,3,33,676,8,33,1,33,1,33,3,33,680,
		8,33,1,33,3,33,683,8,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,3,34,692,8,
		34,1,35,1,35,1,35,3,35,697,8,35,1,35,1,35,3,35,701,8,35,1,35,1,35,1,35,
		3,35,706,8,35,1,35,1,35,3,35,710,8,35,1,35,1,35,1,35,1,35,1,35,3,35,717,
		8,35,1,35,1,35,3,35,721,8,35,1,35,1,35,1,35,3,35,726,8,35,1,35,1,35,3,
		35,730,8,35,1,35,3,35,733,8,35,1,36,1,36,1,37,1,37,5,37,739,8,37,10,37,
		12,37,742,9,37,1,37,5,37,745,8,37,10,37,12,37,748,9,37,1,37,3,37,751,8,
		37,1,37,1,37,5,37,755,8,37,10,37,12,37,758,9,37,1,37,3,37,761,8,37,1,37,
		4,37,764,8,37,11,37,12,37,765,1,37,5,37,769,8,37,10,37,12,37,772,9,37,
		1,37,3,37,775,8,37,1,37,4,37,778,8,37,11,37,12,37,779,1,37,3,37,783,8,
		37,1,37,3,37,786,8,37,1,38,4,38,789,8,38,11,38,12,38,790,1,38,1,38,3,38,
		795,8,38,1,39,5,39,798,8,39,10,39,12,39,801,9,39,1,39,4,39,804,8,39,11,
		39,12,39,805,1,39,1,39,3,39,810,8,39,1,40,1,40,1,40,5,40,815,8,40,10,40,
		12,40,818,9,40,1,40,3,40,821,8,40,1,40,1,40,1,40,5,40,826,8,40,10,40,12,
		40,829,9,40,1,40,3,40,832,8,40,1,40,1,40,1,40,4,40,837,8,40,11,40,12,40,
		838,1,40,3,40,842,8,40,1,40,3,40,845,8,40,1,41,1,41,1,41,1,42,1,42,3,42,
		852,8,42,1,42,3,42,855,8,42,1,43,1,43,3,43,859,8,43,1,43,3,43,862,8,43,
		1,44,1,44,1,44,3,44,867,8,44,1,44,3,44,870,8,44,1,45,1,45,3,45,874,8,45,
		1,45,3,45,877,8,45,1,45,3,45,880,8,45,1,46,1,46,3,46,884,8,46,1,47,1,47,
		1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,
		1,51,1,51,3,51,904,8,51,3,51,906,8,51,1,52,1,52,1,52,1,52,1,52,1,52,3,
		52,914,8,52,3,52,916,8,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,
		3,54,927,8,54,1,55,3,55,930,8,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,938,
		8,55,1,55,1,55,3,55,942,8,55,1,56,3,56,945,8,56,1,56,1,56,1,56,1,56,1,
		56,5,56,952,8,56,10,56,12,56,955,9,56,1,56,3,56,958,8,56,1,56,1,56,1,56,
		1,56,1,56,1,56,5,56,966,8,56,10,56,12,56,969,9,56,1,56,1,56,3,56,973,8,
		56,3,56,975,8,56,1,56,1,56,1,57,1,57,1,57,3,57,982,8,57,1,58,1,58,1,58,
		1,58,1,58,1,58,1,58,1,58,1,58,4,58,993,8,58,11,58,12,58,994,1,58,3,58,
		998,8,58,1,58,3,58,1001,8,58,1,58,1,58,1,58,1,58,4,58,1007,8,58,11,58,
		12,58,1008,1,58,3,58,1012,8,58,1,58,3,58,1015,8,58,3,58,1017,8,58,1,59,
		1,59,1,59,1,59,3,59,1023,8,59,3,59,1025,8,59,1,59,1,59,1,59,1,60,1,60,
		1,60,1,60,1,60,3,60,1035,8,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,62,
		1,62,1,62,1,62,1,62,1,62,4,62,1050,8,62,11,62,12,62,1051,1,62,1,62,1,63,
		1,63,1,63,3,63,1059,8,63,1,63,3,63,1062,8,63,1,64,1,64,1,64,3,64,1067,
		8,64,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,3,66,1077,8,66,1,67,1,67,
		3,67,1081,8,67,1,68,1,68,1,68,1,68,1,69,1,69,1,69,5,69,1090,8,69,10,69,
		12,69,1093,9,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1103,8,70,
		1,71,1,71,1,71,1,71,1,71,1,71,3,71,1111,8,71,1,72,1,72,1,72,1,72,1,72,
		1,72,3,72,1119,8,72,1,73,1,73,1,73,1,73,1,74,3,74,1126,8,74,1,74,1,74,
		1,75,3,75,1131,8,75,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,
		1,80,1,80,1,81,1,81,1,82,1,82,1,82,4,82,1150,8,82,11,82,12,82,1151,1,83,
		1,83,1,83,5,83,1157,8,83,10,83,12,83,1160,9,83,1,84,1,84,1,84,1,84,1,85,
		1,85,3,85,1168,8,85,1,85,1,85,1,85,3,85,1173,8,85,1,85,3,85,1176,8,85,
		1,86,1,86,1,86,3,86,1181,8,86,1,87,1,87,1,87,5,87,1186,8,87,10,87,12,87,
		1189,9,87,1,87,3,87,1192,8,87,1,88,1,88,3,88,1196,8,88,1,89,1,89,1,89,
		1,90,1,90,1,90,1,90,1,90,3,90,1206,8,90,1,90,1,90,1,90,1,90,1,90,1,90,
		3,90,1214,8,90,1,90,3,90,1217,8,90,1,90,1,90,3,90,1221,8,90,1,91,1,91,
		1,91,5,91,1226,8,91,10,91,12,91,1229,9,91,1,92,1,92,3,92,1233,8,92,1,92,
		1,92,1,92,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,3,94,1246,8,94,1,94,
		3,94,1249,8,94,1,94,3,94,1252,8,94,3,94,1254,8,94,1,94,1,94,1,95,1,95,
		1,95,5,95,1261,8,95,10,95,12,95,1264,9,95,1,96,1,96,1,96,5,96,1269,8,96,
		10,96,12,96,1272,9,96,1,97,1,97,1,97,1,97,1,98,1,98,1,98,3,98,1281,8,98,
		1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,100,1,100,1,100,5,100,1293,8,100,
		10,100,12,100,1296,9,100,1,100,3,100,1299,8,100,1,101,1,101,3,101,1303,
		8,101,1,101,1,101,1,101,1,101,3,101,1309,8,101,1,102,1,102,1,102,1,103,
		1,103,1,103,5,103,1317,8,103,10,103,12,103,1320,9,103,1,103,3,103,1323,
		8,103,1,104,1,104,1,104,1,104,1,104,1,104,3,104,1331,8,104,1,104,3,104,
		1334,8,104,1,105,1,105,1,105,1,105,3,105,1340,8,105,3,105,1342,8,105,1,
		106,1,106,1,106,5,106,1347,8,106,10,106,12,106,1350,9,106,1,106,3,106,
		1353,8,106,1,107,1,107,1,107,3,107,1358,8,107,1,108,1,108,1,108,5,108,
		1363,8,108,10,108,12,108,1366,9,108,1,108,3,108,1369,8,108,1,109,1,109,
		1,109,3,109,1374,8,109,1,110,1,110,1,110,1,110,1,111,1,111,3,111,1382,
		8,111,1,112,1,112,1,112,5,112,1387,8,112,10,112,12,112,1390,9,112,1,113,
		1,113,1,113,5,113,1395,8,113,10,113,12,113,1398,9,113,1,114,1,114,1,114,
		3,114,1403,8,114,1,115,1,115,5,115,1407,8,115,10,115,12,115,1410,9,115,
		1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,1,116,3,116,1422,
		8,116,1,117,1,117,1,117,1,118,1,118,1,118,1,119,1,119,1,119,1,120,1,120,
		1,120,1,121,1,121,1,121,1,122,1,122,1,122,1,123,1,123,1,123,1,123,1,124,
		1,124,1,124,1,125,1,125,1,125,1,125,1,126,1,126,1,126,1,127,1,127,1,127,
		1,127,1,127,1,127,5,127,1462,8,127,10,127,12,127,1465,9,127,1,128,1,128,
		1,128,1,128,1,128,1,128,5,128,1473,8,128,10,128,12,128,1476,9,128,1,129,
		1,129,1,129,1,129,1,129,1,129,5,129,1484,8,129,10,129,12,129,1487,9,129,
		1,130,1,130,1,130,1,130,1,130,1,130,5,130,1495,8,130,10,130,12,130,1498,
		9,130,1,131,1,131,1,131,1,131,1,131,1,131,5,131,1506,8,131,10,131,12,131,
		1509,9,131,1,132,1,132,1,132,1,132,1,132,1,132,5,132,1517,8,132,10,132,
		12,132,1520,9,132,1,133,1,133,1,133,1,133,1,133,1,133,1,133,3,133,1529,
		8,133,1,134,1,134,1,134,3,134,1534,8,134,1,135,1,135,1,135,3,135,1539,
		8,135,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,3,136,1550,
		8,136,1,136,1,136,1,136,1,136,1,136,3,136,1557,8,136,5,136,1559,8,136,
		10,136,12,136,1562,9,136,1,137,1,137,1,137,3,137,1567,8,137,1,137,1,137,
		1,137,3,137,1572,8,137,5,137,1574,8,137,10,137,12,137,1577,9,137,1,137,
		3,137,1580,8,137,3,137,1582,8,137,1,138,3,138,1585,8,138,1,138,1,138,3,
		138,1589,8,138,1,138,1,138,3,138,1593,8,138,3,138,1595,8,138,1,138,3,138,
		1598,8,138,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,3,139,
		1609,8,139,1,139,1,139,3,139,1613,8,139,1,139,1,139,1,139,1,139,3,139,
		1619,8,139,1,139,3,139,1622,8,139,1,140,1,140,1,140,3,140,1627,8,140,1,
		140,1,140,1,141,1,141,3,141,1633,8,141,1,141,1,141,1,141,1,142,1,142,1,
		143,1,143,5,143,1642,8,143,10,143,12,143,1645,9,143,1,143,5,143,1648,8,
		143,10,143,12,143,1651,9,143,1,143,3,143,1654,8,143,1,143,1,143,5,143,
		1658,8,143,10,143,12,143,1661,9,143,1,143,3,143,1664,8,143,1,143,4,143,
		1667,8,143,11,143,12,143,1668,1,143,5,143,1672,8,143,10,143,12,143,1675,
		9,143,1,143,3,143,1678,8,143,1,143,4,143,1681,8,143,11,143,12,143,1682,
		1,143,3,143,1686,8,143,1,143,3,143,1689,8,143,1,144,4,144,1692,8,144,11,
		144,12,144,1693,1,144,1,144,3,144,1698,8,144,1,145,5,145,1701,8,145,10,
		145,12,145,1704,9,145,1,145,4,145,1707,8,145,11,145,12,145,1708,1,145,
		1,145,3,145,1713,8,145,1,146,1,146,1,146,5,146,1718,8,146,10,146,12,146,
		1721,9,146,1,146,3,146,1724,8,146,1,146,1,146,1,146,4,146,1729,8,146,11,
		146,12,146,1730,1,146,3,146,1734,8,146,1,146,3,146,1737,8,146,1,147,1,
		147,1,147,1,148,1,148,3,148,1744,8,148,1,149,1,149,1,149,3,149,1749,8,
		149,1,150,1,150,3,150,1753,8,150,1,150,3,150,1756,8,150,1,151,1,151,1,
		152,1,152,3,152,1762,8,152,1,153,1,153,1,153,3,153,1767,8,153,1,153,3,
		153,1770,8,153,1,153,3,153,1773,8,153,1,153,3,153,1776,8,153,1,153,1,153,
		1,154,1,154,1,154,1,155,1,155,5,155,1785,8,155,10,155,12,155,1788,9,155,
		1,156,1,156,3,156,1792,8,156,1,157,1,157,5,157,1796,8,157,10,157,12,157,
		1799,9,157,1,157,1,157,1,158,1,158,1,159,1,159,4,159,1807,8,159,11,159,
		12,159,1808,1,160,1,160,3,160,1813,8,160,1,160,1,160,1,161,1,161,1,161,
		1,161,3,161,1821,8,161,3,161,1823,8,161,1,161,1,161,1,162,1,162,1,162,
		1,162,1,163,1,163,3,163,1833,8,163,1,163,1,163,1,164,1,164,1,164,5,164,
		1840,8,164,10,164,12,164,1843,9,164,1,164,3,164,1846,8,164,1,165,1,165,
		1,165,3,165,1851,8,165,1,166,1,166,1,166,1,166,1,167,4,167,1858,8,167,
		11,167,12,167,1859,1,168,3,168,1863,8,168,1,168,1,168,1,168,1,168,1,168,
		1,168,5,168,1871,8,168,10,168,12,168,1874,9,168,1,169,1,169,1,169,1,169,
		1,169,1,170,1,170,1,170,1,170,1,170,1,171,1,171,1,171,3,171,1889,8,171,
		1,171,1,171,1,171,1,172,1,172,1,172,1,172,1,172,1,173,1,173,3,173,1901,
		8,173,1,174,1,174,1,174,3,174,1906,8,174,3,174,1908,8,174,1,174,1,174,
		1,174,1,174,3,174,1914,8,174,3,174,1916,8,174,5,174,1918,8,174,10,174,
		12,174,1921,9,174,1,174,1,174,3,174,1925,8,174,1,174,3,174,1928,8,174,
		1,175,1,175,1,175,5,175,1933,8,175,10,175,12,175,1936,9,175,1,175,1,175,
		1,175,1,175,5,175,1942,8,175,10,175,12,175,1945,9,175,3,175,1947,8,175,
		1,175,1,175,1,175,5,175,1952,8,175,10,175,12,175,1955,9,175,3,175,1957,
		8,175,1,176,1,176,1,176,1,177,1,177,1,177,1,177,3,177,1966,8,177,1,178,
		1,178,1,178,1,178,1,178,3,178,1973,8,178,1,179,1,179,1,179,5,179,1978,
		8,179,10,179,12,179,1981,9,179,1,179,3,179,1984,8,179,1,180,1,180,1,180,
		4,180,1989,8,180,11,180,12,180,1990,1,180,3,180,1994,8,180,1,181,1,181,
		1,181,1,181,4,181,2000,8,181,11,181,12,181,2001,1,181,3,181,2005,8,181,
		3,181,2007,8,181,1,182,1,182,1,182,3,182,2012,8,182,1,183,1,183,1,183,
		1,183,1,183,1,183,1,183,3,183,2021,8,183,1,183,3,183,2024,8,183,1,184,
		1,184,1,184,1,184,1,184,1,184,1,184,3,184,2033,8,184,1,184,1,184,1,184,
		3,184,2038,8,184,1,184,3,184,2041,8,184,1,185,1,185,1,185,1,185,1,185,
		1,185,3,185,2049,8,185,1,186,1,186,1,186,1,186,1,186,1,186,1,186,3,186,
		2058,8,186,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,
		1,187,1,187,1,187,3,187,2073,8,187,1,187,3,187,2076,8,187,5,187,2078,8,
		187,10,187,12,187,2081,9,187,1,188,1,188,1,188,5,188,2086,8,188,10,188,
		12,188,2089,9,188,1,188,3,188,2092,8,188,1,189,1,189,1,189,1,189,1,189,
		1,189,1,189,3,189,2101,8,189,1,189,3,189,2104,8,189,1,190,1,190,1,190,
		1,190,1,190,1,190,1,190,3,190,2113,8,190,1,190,1,190,1,190,3,190,2118,
		8,190,1,190,3,190,2121,8,190,1,191,1,191,1,191,5,191,2126,8,191,10,191,
		12,191,2129,9,191,1,191,1,191,1,191,1,191,1,191,1,191,3,191,2137,8,191,
		1,191,1,191,3,191,2141,8,191,3,191,2143,8,191,1,191,1,191,1,191,1,191,
		1,191,3,191,2150,8,191,1,191,1,191,3,191,2154,8,191,1,192,1,192,1,192,
		3,192,2159,8,192,1,193,1,193,1,193,1,194,1,194,1,194,1,195,1,195,1,195,
		1,196,1,196,1,196,1,197,1,197,1,197,1,197,0,9,58,254,256,258,260,262,264,
		272,374,198,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
		42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
		90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
		128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
		164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
		200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
		236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,
		272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,
		308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,
		344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,
		380,382,384,386,388,390,392,394,0,5,3,0,71,81,83,83,85,85,2,0,48,48,87,
		87,1,0,52,53,1,0,68,69,4,0,54,55,61,61,82,82,84,84,2345,0,397,1,0,0,0,
		2,401,1,0,0,0,4,403,1,0,0,0,6,412,1,0,0,0,8,427,1,0,0,0,10,430,1,0,0,0,
		12,436,1,0,0,0,14,444,1,0,0,0,16,446,1,0,0,0,18,473,1,0,0,0,20,483,1,0,
		0,0,22,525,1,0,0,0,24,529,1,0,0,0,26,531,1,0,0,0,28,533,1,0,0,0,30,537,
		1,0,0,0,32,545,1,0,0,0,34,554,1,0,0,0,36,563,1,0,0,0,38,566,1,0,0,0,40,
		568,1,0,0,0,42,576,1,0,0,0,44,578,1,0,0,0,46,600,1,0,0,0,48,611,1,0,0,
		0,50,613,1,0,0,0,52,621,1,0,0,0,54,626,1,0,0,0,56,634,1,0,0,0,58,639,1,
		0,0,0,60,656,1,0,0,0,62,662,1,0,0,0,64,670,1,0,0,0,66,672,1,0,0,0,68,691,
		1,0,0,0,70,732,1,0,0,0,72,734,1,0,0,0,74,785,1,0,0,0,76,788,1,0,0,0,78,
		799,1,0,0,0,80,844,1,0,0,0,82,846,1,0,0,0,84,849,1,0,0,0,86,856,1,0,0,
		0,88,863,1,0,0,0,90,871,1,0,0,0,92,881,1,0,0,0,94,885,1,0,0,0,96,888,1,
		0,0,0,98,891,1,0,0,0,100,894,1,0,0,0,102,897,1,0,0,0,104,907,1,0,0,0,106,
		917,1,0,0,0,108,921,1,0,0,0,110,929,1,0,0,0,112,944,1,0,0,0,114,978,1,
		0,0,0,116,1016,1,0,0,0,118,1018,1,0,0,0,120,1029,1,0,0,0,122,1039,1,0,
		0,0,124,1043,1,0,0,0,126,1061,1,0,0,0,128,1063,1,0,0,0,130,1071,1,0,0,
		0,132,1076,1,0,0,0,134,1080,1,0,0,0,136,1082,1,0,0,0,138,1086,1,0,0,0,
		140,1102,1,0,0,0,142,1110,1,0,0,0,144,1118,1,0,0,0,146,1120,1,0,0,0,148,
		1125,1,0,0,0,150,1130,1,0,0,0,152,1134,1,0,0,0,154,1136,1,0,0,0,156,1138,
		1,0,0,0,158,1140,1,0,0,0,160,1142,1,0,0,0,162,1144,1,0,0,0,164,1146,1,
		0,0,0,166,1153,1,0,0,0,168,1161,1,0,0,0,170,1175,1,0,0,0,172,1177,1,0,
		0,0,174,1182,1,0,0,0,176,1195,1,0,0,0,178,1197,1,0,0,0,180,1220,1,0,0,
		0,182,1222,1,0,0,0,184,1232,1,0,0,0,186,1237,1,0,0,0,188,1240,1,0,0,0,
		190,1257,1,0,0,0,192,1265,1,0,0,0,194,1273,1,0,0,0,196,1277,1,0,0,0,198,
		1285,1,0,0,0,200,1289,1,0,0,0,202,1308,1,0,0,0,204,1310,1,0,0,0,206,1313,
		1,0,0,0,208,1333,1,0,0,0,210,1335,1,0,0,0,212,1343,1,0,0,0,214,1357,1,
		0,0,0,216,1359,1,0,0,0,218,1373,1,0,0,0,220,1375,1,0,0,0,222,1381,1,0,
		0,0,224,1383,1,0,0,0,226,1391,1,0,0,0,228,1402,1,0,0,0,230,1404,1,0,0,
		0,232,1421,1,0,0,0,234,1423,1,0,0,0,236,1426,1,0,0,0,238,1429,1,0,0,0,
		240,1432,1,0,0,0,242,1435,1,0,0,0,244,1438,1,0,0,0,246,1441,1,0,0,0,248,
		1445,1,0,0,0,250,1448,1,0,0,0,252,1452,1,0,0,0,254,1455,1,0,0,0,256,1466,
		1,0,0,0,258,1477,1,0,0,0,260,1488,1,0,0,0,262,1499,1,0,0,0,264,1510,1,
		0,0,0,266,1528,1,0,0,0,268,1530,1,0,0,0,270,1538,1,0,0,0,272,1540,1,0,
		0,0,274,1581,1,0,0,0,276,1597,1,0,0,0,278,1621,1,0,0,0,280,1623,1,0,0,
		0,282,1630,1,0,0,0,284,1637,1,0,0,0,286,1688,1,0,0,0,288,1691,1,0,0,0,
		290,1702,1,0,0,0,292,1736,1,0,0,0,294,1738,1,0,0,0,296,1741,1,0,0,0,298,
		1745,1,0,0,0,300,1750,1,0,0,0,302,1757,1,0,0,0,304,1761,1,0,0,0,306,1763,
		1,0,0,0,308,1779,1,0,0,0,310,1782,1,0,0,0,312,1791,1,0,0,0,314,1793,1,
		0,0,0,316,1802,1,0,0,0,318,1806,1,0,0,0,320,1810,1,0,0,0,322,1816,1,0,
		0,0,324,1826,1,0,0,0,326,1830,1,0,0,0,328,1836,1,0,0,0,330,1850,1,0,0,
		0,332,1852,1,0,0,0,334,1857,1,0,0,0,336,1862,1,0,0,0,338,1875,1,0,0,0,
		340,1880,1,0,0,0,342,1885,1,0,0,0,344,1893,1,0,0,0,346,1898,1,0,0,0,348,
		1927,1,0,0,0,350,1956,1,0,0,0,352,1958,1,0,0,0,354,1965,1,0,0,0,356,1972,
		1,0,0,0,358,1974,1,0,0,0,360,1985,1,0,0,0,362,1995,1,0,0,0,364,2011,1,
		0,0,0,366,2023,1,0,0,0,368,2040,1,0,0,0,370,2048,1,0,0,0,372,2050,1,0,
		0,0,374,2059,1,0,0,0,376,2082,1,0,0,0,378,2103,1,0,0,0,380,2120,1,0,0,
		0,382,2153,1,0,0,0,384,2158,1,0,0,0,386,2160,1,0,0,0,388,2163,1,0,0,0,
		390,2166,1,0,0,0,392,2169,1,0,0,0,394,2172,1,0,0,0,396,398,3,10,5,0,397,
		396,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,400,5,0,0,1,400,1,1,0,
		0,0,401,402,3,14,7,0,402,3,1,0,0,0,403,407,3,206,103,0,404,406,5,93,0,
		0,405,404,1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,
		410,1,0,0,0,409,407,1,0,0,0,410,411,5,0,0,1,411,5,1,0,0,0,412,414,5,42,
		0,0,413,415,3,382,191,0,414,413,1,0,0,0,414,415,1,0,0,0,415,416,1,0,0,
		0,416,417,5,45,0,0,417,418,5,86,0,0,418,422,3,208,104,0,419,421,5,93,0,
		0,420,419,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,423,
		425,1,0,0,0,424,422,1,0,0,0,425,426,5,0,0,1,426,7,1,0,0,0,427,428,3,212,
		106,0,428,9,1,0,0,0,429,431,3,12,6,0,430,429,1,0,0,0,431,432,1,0,0,0,432,
		430,1,0,0,0,432,433,1,0,0,0,433,11,1,0,0,0,434,437,3,20,10,0,435,437,3,
		16,8,0,436,434,1,0,0,0,436,435,1,0,0,0,437,13,1,0,0,0,438,439,3,20,10,
		0,439,440,5,93,0,0,440,445,1,0,0,0,441,445,3,16,8,0,442,445,5,93,0,0,443,
		445,5,0,0,1,444,438,1,0,0,0,444,441,1,0,0,0,444,442,1,0,0,0,444,443,1,
		0,0,0,445,15,1,0,0,0,446,451,3,18,9,0,447,448,5,51,0,0,448,450,3,18,9,
		0,449,447,1,0,0,0,450,453,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,
		455,1,0,0,0,453,451,1,0,0,0,454,456,5,51,0,0,455,454,1,0,0,0,455,456,1,
		0,0,0,456,457,1,0,0,0,457,458,5,93,0,0,458,17,1,0,0,0,459,474,3,22,11,
		0,460,474,3,196,98,0,461,474,3,212,106,0,462,474,3,28,14,0,463,474,3,42,
		21,0,464,474,3,30,15,0,465,474,5,11,0,0,466,474,3,36,18,0,467,474,3,38,
		19,0,468,474,3,40,20,0,469,474,5,13,0,0,470,474,5,23,0,0,471,474,3,32,
		16,0,472,474,3,34,17,0,473,459,1,0,0,0,473,460,1,0,0,0,473,461,1,0,0,0,
		473,462,1,0,0,0,473,463,1,0,0,0,473,464,1,0,0,0,473,465,1,0,0,0,473,466,
		1,0,0,0,473,467,1,0,0,0,473,468,1,0,0,0,473,469,1,0,0,0,473,470,1,0,0,
		0,473,471,1,0,0,0,473,472,1,0,0,0,474,19,1,0,0,0,475,484,3,68,34,0,476,
		484,3,102,51,0,477,484,3,64,32,0,478,484,3,112,56,0,479,484,3,110,55,0,
		480,484,3,116,58,0,481,484,3,108,54,0,482,484,3,124,62,0,483,475,1,0,0,
		0,483,476,1,0,0,0,483,477,1,0,0,0,483,478,1,0,0,0,483,479,1,0,0,0,483,
		480,1,0,0,0,483,481,1,0,0,0,483,482,1,0,0,0,484,21,1,0,0,0,485,486,5,90,
		0,0,486,487,5,49,0,0,487,490,3,208,104,0,488,489,5,60,0,0,489,491,3,24,
		12,0,490,488,1,0,0,0,490,491,1,0,0,0,491,526,1,0,0,0,492,493,5,42,0,0,
		493,494,3,370,185,0,494,495,5,45,0,0,495,498,1,0,0,0,496,498,3,372,186,
		0,497,492,1,0,0,0,497,496,1,0,0,0,498,499,1,0,0,0,499,500,5,49,0,0,500,
		503,3,208,104,0,501,502,5,60,0,0,502,504,3,24,12,0,503,501,1,0,0,0,503,
		504,1,0,0,0,504,526,1,0,0,0,505,506,3,358,179,0,506,507,5,60,0,0,507,509,
		1,0,0,0,508,505,1,0,0,0,509,510,1,0,0,0,510,508,1,0,0,0,510,511,1,0,0,
		0,511,514,1,0,0,0,512,515,3,210,105,0,513,515,3,212,106,0,514,512,1,0,
		0,0,514,513,1,0,0,0,515,517,1,0,0,0,516,518,5,3,0,0,517,516,1,0,0,0,517,
		518,1,0,0,0,518,526,1,0,0,0,519,520,3,370,185,0,520,523,3,26,13,0,521,
		524,3,210,105,0,522,524,3,212,106,0,523,521,1,0,0,0,523,522,1,0,0,0,524,
		526,1,0,0,0,525,485,1,0,0,0,525,497,1,0,0,0,525,508,1,0,0,0,525,519,1,
		0,0,0,526,23,1,0,0,0,527,530,3,210,105,0,528,530,3,212,106,0,529,527,1,
		0,0,0,529,528,1,0,0,0,530,25,1,0,0,0,531,532,7,0,0,0,532,27,1,0,0,0,533,
		535,5,21,0,0,534,536,3,212,106,0,535,534,1,0,0,0,535,536,1,0,0,0,536,29,
		1,0,0,0,537,543,5,16,0,0,538,541,3,208,104,0,539,540,5,29,0,0,540,542,
		3,208,104,0,541,539,1,0,0,0,541,542,1,0,0,0,542,544,1,0,0,0,543,538,1,
		0,0,0,543,544,1,0,0,0,544,31,1,0,0,0,545,546,5,34,0,0,546,551,5,90,0,0,
		547,548,5,50,0,0,548,550,5,90,0,0,549,547,1,0,0,0,550,553,1,0,0,0,551,
		549,1,0,0,0,551,552,1,0,0,0,552,33,1,0,0,0,553,551,1,0,0,0,554,555,5,30,
		0,0,555,560,5,90,0,0,556,557,5,50,0,0,557,559,5,90,0,0,558,556,1,0,0,0,
		559,562,1,0,0,0,560,558,1,0,0,0,560,561,1,0,0,0,561,35,1,0,0,0,562,560,
		1,0,0,0,563,564,5,33,0,0,564,565,3,376,188,0,565,37,1,0,0,0,566,567,3,
		210,105,0,567,39,1,0,0,0,568,569,5,32,0,0,569,572,3,208,104,0,570,571,
		5,50,0,0,571,573,3,208,104,0,572,570,1,0,0,0,572,573,1,0,0,0,573,41,1,
		0,0,0,574,577,3,44,22,0,575,577,3,46,23,0,576,574,1,0,0,0,576,575,1,0,
		0,0,577,43,1,0,0,0,578,579,5,10,0,0,579,580,3,54,27,0,580,45,1,0,0,0,581,
		585,5,29,0,0,582,584,7,1,0,0,583,582,1,0,0,0,584,587,1,0,0,0,585,583,1,
		0,0,0,585,586,1,0,0,0,586,588,1,0,0,0,587,585,1,0,0,0,588,589,3,58,29,
		0,589,590,5,10,0,0,590,591,3,48,24,0,591,601,1,0,0,0,592,594,5,29,0,0,
		593,595,7,1,0,0,594,593,1,0,0,0,595,596,1,0,0,0,596,594,1,0,0,0,596,597,
		1,0,0,0,597,598,1,0,0,0,598,599,5,10,0,0,599,601,3,48,24,0,600,581,1,0,
		0,0,600,592,1,0,0,0,601,47,1,0,0,0,602,603,5,42,0,0,603,605,3,50,25,0,
		604,606,5,50,0,0,605,604,1,0,0,0,605,606,1,0,0,0,606,607,1,0,0,0,607,608,
		5,45,0,0,608,612,1,0,0,0,609,612,3,50,25,0,610,612,5,54,0,0,611,602,1,
		0,0,0,611,609,1,0,0,0,611,610,1,0,0,0,612,49,1,0,0,0,613,618,3,52,26,0,
		614,615,5,50,0,0,615,617,3,52,26,0,616,614,1,0,0,0,617,620,1,0,0,0,618,
		616,1,0,0,0,618,619,1,0,0,0,619,51,1,0,0,0,620,618,1,0,0,0,621,624,5,90,
		0,0,622,623,5,27,0,0,623,625,5,90,0,0,624,622,1,0,0,0,624,625,1,0,0,0,
		625,53,1,0,0,0,626,631,3,56,28,0,627,628,5,50,0,0,628,630,3,56,28,0,629,
		627,1,0,0,0,630,633,1,0,0,0,631,629,1,0,0,0,631,632,1,0,0,0,632,55,1,0,
		0,0,633,631,1,0,0,0,634,637,3,58,29,0,635,636,5,27,0,0,636,638,5,90,0,
		0,637,635,1,0,0,0,637,638,1,0,0,0,638,57,1,0,0,0,639,640,6,29,-1,0,640,
		641,5,90,0,0,641,647,1,0,0,0,642,643,10,2,0,0,643,644,5,48,0,0,644,646,
		5,90,0,0,645,642,1,0,0,0,646,649,1,0,0,0,647,645,1,0,0,0,647,648,1,0,0,
		0,648,59,1,0,0,0,649,647,1,0,0,0,650,651,5,93,0,0,651,652,5,1,0,0,652,
		653,3,10,5,0,653,654,5,2,0,0,654,657,1,0,0,0,655,657,3,16,8,0,656,650,
		1,0,0,0,656,655,1,0,0,0,657,61,1,0,0,0,658,659,5,84,0,0,659,660,3,222,
		111,0,660,661,5,93,0,0,661,663,1,0,0,0,662,658,1,0,0,0,663,664,1,0,0,0,
		664,662,1,0,0,0,664,665,1,0,0,0,665,63,1,0,0,0,666,667,3,62,31,0,667,668,
		3,66,33,0,668,671,1,0,0,0,669,671,3,66,33,0,670,666,1,0,0,0,670,669,1,
		0,0,0,671,65,1,0,0,0,672,673,5,18,0,0,673,675,5,90,0,0,674,676,3,198,99,
		0,675,674,1,0,0,0,675,676,1,0,0,0,676,682,1,0,0,0,677,679,5,42,0,0,678,
		680,3,346,173,0,679,678,1,0,0,0,679,680,1,0,0,0,680,681,1,0,0,0,681,683,
		5,45,0,0,682,677,1,0,0,0,682,683,1,0,0,0,683,684,1,0,0,0,684,685,5,49,
		0,0,685,686,3,60,30,0,686,67,1,0,0,0,687,688,3,62,31,0,688,689,3,70,35,
		0,689,692,1,0,0,0,690,692,3,70,35,0,691,687,1,0,0,0,691,690,1,0,0,0,692,
		69,1,0,0,0,693,694,5,28,0,0,694,696,5,90,0,0,695,697,3,198,99,0,696,695,
		1,0,0,0,696,697,1,0,0,0,697,698,1,0,0,0,698,700,5,42,0,0,699,701,3,72,
		36,0,700,699,1,0,0,0,700,701,1,0,0,0,701,702,1,0,0,0,702,705,5,45,0,0,
		703,704,5,86,0,0,704,706,3,208,104,0,705,703,1,0,0,0,705,706,1,0,0,0,706,
		707,1,0,0,0,707,709,5,49,0,0,708,710,3,384,192,0,709,708,1,0,0,0,709,710,
		1,0,0,0,710,711,1,0,0,0,711,733,3,60,30,0,712,713,5,37,0,0,713,714,5,28,
		0,0,714,716,5,90,0,0,715,717,3,198,99,0,716,715,1,0,0,0,716,717,1,0,0,
		0,717,718,1,0,0,0,718,720,5,42,0,0,719,721,3,72,36,0,720,719,1,0,0,0,720,
		721,1,0,0,0,721,722,1,0,0,0,722,725,5,45,0,0,723,724,5,86,0,0,724,726,
		3,208,104,0,725,723,1,0,0,0,725,726,1,0,0,0,726,727,1,0,0,0,727,729,5,
		49,0,0,728,730,3,384,192,0,729,728,1,0,0,0,729,730,1,0,0,0,730,731,1,0,
		0,0,731,733,3,60,30,0,732,693,1,0,0,0,732,712,1,0,0,0,733,71,1,0,0,0,734,
		735,3,74,37,0,735,73,1,0,0,0,736,740,3,76,38,0,737,739,3,84,42,0,738,737,
		1,0,0,0,739,742,1,0,0,0,740,738,1,0,0,0,740,741,1,0,0,0,741,746,1,0,0,
		0,742,740,1,0,0,0,743,745,3,88,44,0,744,743,1,0,0,0,745,748,1,0,0,0,746,
		744,1,0,0,0,746,747,1,0,0,0,747,750,1,0,0,0,748,746,1,0,0,0,749,751,3,
		80,40,0,750,749,1,0,0,0,750,751,1,0,0,0,751,786,1,0,0,0,752,756,3,78,39,
		0,753,755,3,88,44,0,754,753,1,0,0,0,755,758,1,0,0,0,756,754,1,0,0,0,756,
		757,1,0,0,0,757,760,1,0,0,0,758,756,1,0,0,0,759,761,3,80,40,0,760,759,
		1,0,0,0,760,761,1,0,0,0,761,786,1,0,0,0,762,764,3,84,42,0,763,762,1,0,
		0,0,764,765,1,0,0,0,765,763,1,0,0,0,765,766,1,0,0,0,766,770,1,0,0,0,767,
		769,3,88,44,0,768,767,1,0,0,0,769,772,1,0,0,0,770,768,1,0,0,0,770,771,
		1,0,0,0,771,774,1,0,0,0,772,770,1,0,0,0,773,775,3,80,40,0,774,773,1,0,
		0,0,774,775,1,0,0,0,775,786,1,0,0,0,776,778,3,88,44,0,777,776,1,0,0,0,
		778,779,1,0,0,0,779,777,1,0,0,0,779,780,1,0,0,0,780,782,1,0,0,0,781,783,
		3,80,40,0,782,781,1,0,0,0,782,783,1,0,0,0,783,786,1,0,0,0,784,786,3,80,
		40,0,785,736,1,0,0,0,785,752,1,0,0,0,785,763,1,0,0,0,785,777,1,0,0,0,785,
		784,1,0,0,0,786,75,1,0,0,0,787,789,3,84,42,0,788,787,1,0,0,0,789,790,1,
		0,0,0,790,788,1,0,0,0,790,791,1,0,0,0,791,792,1,0,0,0,792,794,5,55,0,0,
		793,795,5,50,0,0,794,793,1,0,0,0,794,795,1,0,0,0,795,77,1,0,0,0,796,798,
		3,84,42,0,797,796,1,0,0,0,798,801,1,0,0,0,799,797,1,0,0,0,799,800,1,0,
		0,0,800,803,1,0,0,0,801,799,1,0,0,0,802,804,3,88,44,0,803,802,1,0,0,0,
		804,805,1,0,0,0,805,803,1,0,0,0,805,806,1,0,0,0,806,807,1,0,0,0,807,809,
		5,55,0,0,808,810,5,50,0,0,809,808,1,0,0,0,809,810,1,0,0,0,810,79,1,0,0,
		0,811,812,5,54,0,0,812,816,3,84,42,0,813,815,3,90,45,0,814,813,1,0,0,0,
		815,818,1,0,0,0,816,814,1,0,0,0,816,817,1,0,0,0,817,820,1,0,0,0,818,816,
		1,0,0,0,819,821,3,82,41,0,820,819,1,0,0,0,820,821,1,0,0,0,821,845,1,0,
		0,0,822,823,5,54,0,0,823,827,3,86,43,0,824,826,3,90,45,0,825,824,1,0,0,
		0,826,829,1,0,0,0,827,825,1,0,0,0,827,828,1,0,0,0,828,831,1,0,0,0,829,
		827,1,0,0,0,830,832,3,82,41,0,831,830,1,0,0,0,831,832,1,0,0,0,832,845,
		1,0,0,0,833,834,5,54,0,0,834,836,5,50,0,0,835,837,3,90,45,0,836,835,1,
		0,0,0,837,838,1,0,0,0,838,836,1,0,0,0,838,839,1,0,0,0,839,841,1,0,0,0,
		840,842,3,82,41,0,841,840,1,0,0,0,841,842,1,0,0,0,842,845,1,0,0,0,843,
		845,3,82,41,0,844,811,1,0,0,0,844,822,1,0,0,0,844,833,1,0,0,0,844,843,
		1,0,0,0,845,81,1,0,0,0,846,847,5,70,0,0,847,848,3,84,42,0,848,83,1,0,0,
		0,849,851,3,92,46,0,850,852,5,50,0,0,851,850,1,0,0,0,851,852,1,0,0,0,852,
		854,1,0,0,0,853,855,5,3,0,0,854,853,1,0,0,0,854,855,1,0,0,0,855,85,1,0,
		0,0,856,858,3,94,47,0,857,859,5,50,0,0,858,857,1,0,0,0,858,859,1,0,0,0,
		859,861,1,0,0,0,860,862,5,3,0,0,861,860,1,0,0,0,861,862,1,0,0,0,862,87,
		1,0,0,0,863,864,3,92,46,0,864,866,3,100,50,0,865,867,5,50,0,0,866,865,
		1,0,0,0,866,867,1,0,0,0,867,869,1,0,0,0,868,870,5,3,0,0,869,868,1,0,0,
		0,869,870,1,0,0,0,870,89,1,0,0,0,871,873,3,92,46,0,872,874,3,100,50,0,
		873,872,1,0,0,0,873,874,1,0,0,0,874,876,1,0,0,0,875,877,5,50,0,0,876,875,
		1,0,0,0,876,877,1,0,0,0,877,879,1,0,0,0,878,880,5,3,0,0,879,878,1,0,0,
		0,879,880,1,0,0,0,880,91,1,0,0,0,881,883,5,90,0,0,882,884,3,96,48,0,883,
		882,1,0,0,0,883,884,1,0,0,0,884,93,1,0,0,0,885,886,5,90,0,0,886,887,3,
		98,49,0,887,95,1,0,0,0,888,889,5,49,0,0,889,890,3,208,104,0,890,97,1,0,
		0,0,891,892,5,49,0,0,892,893,3,214,107,0,893,99,1,0,0,0,894,895,5,60,0,
		0,895,896,3,208,104,0,896,101,1,0,0,0,897,898,5,39,0,0,898,899,3,222,111,
		0,899,900,5,49,0,0,900,905,3,60,30,0,901,906,3,104,52,0,902,904,3,106,
		53,0,903,902,1,0,0,0,903,904,1,0,0,0,904,906,1,0,0,0,905,901,1,0,0,0,905,
		903,1,0,0,0,906,103,1,0,0,0,907,908,5,38,0,0,908,909,3,222,111,0,909,910,
		5,49,0,0,910,915,3,60,30,0,911,916,3,104,52,0,912,914,3,106,53,0,913,912,
		1,0,0,0,913,914,1,0,0,0,914,916,1,0,0,0,915,911,1,0,0,0,915,913,1,0,0,
		0,916,105,1,0,0,0,917,918,5,9,0,0,918,919,5,49,0,0,919,920,3,60,30,0,920,
		107,1,0,0,0,921,922,5,31,0,0,922,923,3,222,111,0,923,924,5,49,0,0,924,
		926,3,60,30,0,925,927,3,106,53,0,926,925,1,0,0,0,926,927,1,0,0,0,927,109,
		1,0,0,0,928,930,5,37,0,0,929,928,1,0,0,0,929,930,1,0,0,0,930,931,1,0,0,
		0,931,932,5,24,0,0,932,933,3,358,179,0,933,934,5,15,0,0,934,935,3,212,
		106,0,935,937,5,49,0,0,936,938,5,3,0,0,937,936,1,0,0,0,937,938,1,0,0,0,
		938,939,1,0,0,0,939,941,3,60,30,0,940,942,3,106,53,0,941,940,1,0,0,0,941,
		942,1,0,0,0,942,111,1,0,0,0,943,945,5,37,0,0,944,943,1,0,0,0,944,945,1,
		0,0,0,945,946,1,0,0,0,946,974,5,36,0,0,947,948,5,42,0,0,948,953,3,114,
		57,0,949,950,5,50,0,0,950,952,3,114,57,0,951,949,1,0,0,0,952,955,1,0,0,
		0,953,951,1,0,0,0,953,954,1,0,0,0,954,957,1,0,0,0,955,953,1,0,0,0,956,
		958,5,50,0,0,957,956,1,0,0,0,957,958,1,0,0,0,958,959,1,0,0,0,959,960,5,
		45,0,0,960,961,5,49,0,0,961,975,1,0,0,0,962,967,3,114,57,0,963,964,5,50,
		0,0,964,966,3,114,57,0,965,963,1,0,0,0,966,969,1,0,0,0,967,965,1,0,0,0,
		967,968,1,0,0,0,968,970,1,0,0,0,969,967,1,0,0,0,970,972,5,49,0,0,971,973,
		5,3,0,0,972,971,1,0,0,0,972,973,1,0,0,0,973,975,1,0,0,0,974,947,1,0,0,
		0,974,962,1,0,0,0,975,976,1,0,0,0,976,977,3,60,30,0,977,113,1,0,0,0,978,
		981,3,208,104,0,979,980,5,27,0,0,980,982,3,364,182,0,981,979,1,0,0,0,981,
		982,1,0,0,0,982,115,1,0,0,0,983,984,5,26,0,0,984,985,5,49,0,0,985,986,
		3,60,30,0,986,987,3,122,61,0,987,1017,1,0,0,0,988,989,5,26,0,0,989,990,
		5,49,0,0,990,992,3,60,30,0,991,993,3,118,59,0,992,991,1,0,0,0,993,994,
		1,0,0,0,994,992,1,0,0,0,994,995,1,0,0,0,995,997,1,0,0,0,996,998,3,106,
		53,0,997,996,1,0,0,0,997,998,1,0,0,0,998,1000,1,0,0,0,999,1001,3,122,61,
		0,1000,999,1,0,0,0,1000,1001,1,0,0,0,1001,1017,1,0,0,0,1002,1003,5,26,
		0,0,1003,1004,5,49,0,0,1004,1006,3,60,30,0,1005,1007,3,120,60,0,1006,1005,
		1,0,0,0,1007,1008,1,0,0,0,1008,1006,1,0,0,0,1008,1009,1,0,0,0,1009,1011,
		1,0,0,0,1010,1012,3,106,53,0,1011,1010,1,0,0,0,1011,1012,1,0,0,0,1012,
		1014,1,0,0,0,1013,1015,3,122,61,0,1014,1013,1,0,0,0,1014,1015,1,0,0,0,
		1015,1017,1,0,0,0,1016,983,1,0,0,0,1016,988,1,0,0,0,1016,1002,1,0,0,0,
		1017,117,1,0,0,0,1018,1024,5,14,0,0,1019,1022,3,208,104,0,1020,1021,5,
		27,0,0,1021,1023,5,90,0,0,1022,1020,1,0,0,0,1022,1023,1,0,0,0,1023,1025,
		1,0,0,0,1024,1019,1,0,0,0,1024,1025,1,0,0,0,1025,1026,1,0,0,0,1026,1027,
		5,49,0,0,1027,1028,3,60,30,0,1028,119,1,0,0,0,1029,1030,5,14,0,0,1030,
		1031,5,54,0,0,1031,1034,3,208,104,0,1032,1033,5,27,0,0,1033,1035,5,90,
		0,0,1034,1032,1,0,0,0,1034,1035,1,0,0,0,1035,1036,1,0,0,0,1036,1037,5,
		49,0,0,1037,1038,3,60,30,0,1038,121,1,0,0,0,1039,1040,5,19,0,0,1040,1041,
		5,49,0,0,1041,1042,3,60,30,0,1042,123,1,0,0,0,1043,1044,3,388,194,0,1044,
		1045,3,126,63,0,1045,1046,5,49,0,0,1046,1047,5,93,0,0,1047,1049,5,1,0,
		0,1048,1050,3,128,64,0,1049,1048,1,0,0,0,1050,1051,1,0,0,0,1051,1049,1,
		0,0,0,1051,1052,1,0,0,0,1052,1053,1,0,0,0,1053,1054,5,2,0,0,1054,125,1,
		0,0,0,1055,1056,3,218,109,0,1056,1058,5,50,0,0,1057,1059,3,216,108,0,1058,
		1057,1,0,0,0,1058,1059,1,0,0,0,1059,1062,1,0,0,0,1060,1062,3,222,111,0,
		1061,1055,1,0,0,0,1061,1060,1,0,0,0,1062,127,1,0,0,0,1063,1064,3,390,195,
		0,1064,1066,3,132,66,0,1065,1067,3,130,65,0,1066,1065,1,0,0,0,1066,1067,
		1,0,0,0,1067,1068,1,0,0,0,1068,1069,5,49,0,0,1069,1070,3,60,30,0,1070,
		129,1,0,0,0,1071,1072,5,39,0,0,1072,1073,3,222,111,0,1073,131,1,0,0,0,
		1074,1077,3,172,86,0,1075,1077,3,134,67,0,1076,1074,1,0,0,0,1076,1075,
		1,0,0,0,1077,133,1,0,0,0,1078,1081,3,136,68,0,1079,1081,3,138,69,0,1080,
		1078,1,0,0,0,1080,1079,1,0,0,0,1081,135,1,0,0,0,1082,1083,3,138,69,0,1083,
		1084,5,27,0,0,1084,1085,3,158,79,0,1085,137,1,0,0,0,1086,1091,3,140,70,
		0,1087,1088,5,56,0,0,1088,1090,3,140,70,0,1089,1087,1,0,0,0,1090,1093,
		1,0,0,0,1091,1089,1,0,0,0,1091,1092,1,0,0,0,1092,139,1,0,0,0,1093,1091,
		1,0,0,0,1094,1103,3,142,71,0,1095,1103,3,156,78,0,1096,1103,3,160,80,0,
		1097,1103,3,162,81,0,1098,1103,3,168,84,0,1099,1103,3,170,85,0,1100,1103,
		3,180,90,0,1101,1103,3,188,94,0,1102,1094,1,0,0,0,1102,1095,1,0,0,0,1102,
		1096,1,0,0,0,1102,1097,1,0,0,0,1102,1098,1,0,0,0,1102,1099,1,0,0,0,1102,
		1100,1,0,0,0,1102,1101,1,0,0,0,1103,141,1,0,0,0,1104,1111,3,148,74,0,1105,
		1111,3,146,73,0,1106,1111,3,318,159,0,1107,1111,5,12,0,0,1108,1111,5,17,
		0,0,1109,1111,5,7,0,0,1110,1104,1,0,0,0,1110,1105,1,0,0,0,1110,1106,1,
		0,0,0,1110,1107,1,0,0,0,1110,1108,1,0,0,0,1110,1109,1,0,0,0,1111,143,1,
		0,0,0,1112,1119,3,148,74,0,1113,1119,3,146,73,0,1114,1119,3,318,159,0,
		1115,1119,5,12,0,0,1116,1119,5,17,0,0,1117,1119,5,7,0,0,1118,1112,1,0,
		0,0,1118,1113,1,0,0,0,1118,1114,1,0,0,0,1118,1115,1,0,0,0,1118,1116,1,
		0,0,0,1118,1117,1,0,0,0,1119,145,1,0,0,0,1120,1121,3,150,75,0,1121,1122,
		7,2,0,0,1122,1123,3,154,77,0,1123,147,1,0,0,0,1124,1126,5,53,0,0,1125,
		1124,1,0,0,0,1125,1126,1,0,0,0,1126,1127,1,0,0,0,1127,1128,5,91,0,0,1128,
		149,1,0,0,0,1129,1131,5,53,0,0,1130,1129,1,0,0,0,1130,1131,1,0,0,0,1131,
		1132,1,0,0,0,1132,1133,3,152,76,0,1133,151,1,0,0,0,1134,1135,5,91,0,0,
		1135,153,1,0,0,0,1136,1137,5,91,0,0,1137,155,1,0,0,0,1138,1139,3,158,79,
		0,1139,157,1,0,0,0,1140,1141,3,394,197,0,1141,159,1,0,0,0,1142,1143,3,
		392,196,0,1143,161,1,0,0,0,1144,1145,3,164,82,0,1145,163,1,0,0,0,1146,
		1149,5,90,0,0,1147,1148,5,48,0,0,1148,1150,5,90,0,0,1149,1147,1,0,0,0,
		1150,1151,1,0,0,0,1151,1149,1,0,0,0,1151,1152,1,0,0,0,1152,165,1,0,0,0,
		1153,1158,5,90,0,0,1154,1155,5,48,0,0,1155,1157,5,90,0,0,1156,1154,1,0,
		0,0,1157,1160,1,0,0,0,1158,1156,1,0,0,0,1158,1159,1,0,0,0,1159,167,1,0,
		0,0,1160,1158,1,0,0,0,1161,1162,5,42,0,0,1162,1163,3,134,67,0,1163,1164,
		5,45,0,0,1164,169,1,0,0,0,1165,1167,5,43,0,0,1166,1168,3,174,87,0,1167,
		1166,1,0,0,0,1167,1168,1,0,0,0,1168,1169,1,0,0,0,1169,1176,5,46,0,0,1170,
		1172,5,42,0,0,1171,1173,3,172,86,0,1172,1171,1,0,0,0,1172,1173,1,0,0,0,
		1173,1174,1,0,0,0,1174,1176,5,45,0,0,1175,1165,1,0,0,0,1175,1170,1,0,0,
		0,1176,171,1,0,0,0,1177,1178,3,176,88,0,1178,1180,5,50,0,0,1179,1181,3,
		174,87,0,1180,1179,1,0,0,0,1180,1181,1,0,0,0,1181,173,1,0,0,0,1182,1187,
		3,176,88,0,1183,1184,5,50,0,0,1184,1186,3,176,88,0,1185,1183,1,0,0,0,1186,
		1189,1,0,0,0,1187,1185,1,0,0,0,1187,1188,1,0,0,0,1188,1191,1,0,0,0,1189,
		1187,1,0,0,0,1190,1192,5,50,0,0,1191,1190,1,0,0,0,1191,1192,1,0,0,0,1192,
		175,1,0,0,0,1193,1196,3,178,89,0,1194,1196,3,134,67,0,1195,1193,1,0,0,
		0,1195,1194,1,0,0,0,1196,177,1,0,0,0,1197,1198,5,54,0,0,1198,1199,5,90,
		0,0,1199,179,1,0,0,0,1200,1201,5,44,0,0,1201,1221,5,47,0,0,1202,1203,5,
		44,0,0,1203,1205,3,186,93,0,1204,1206,5,50,0,0,1205,1204,1,0,0,0,1205,
		1206,1,0,0,0,1206,1207,1,0,0,0,1207,1208,5,47,0,0,1208,1221,1,0,0,0,1209,
		1210,5,44,0,0,1210,1213,3,182,91,0,1211,1212,5,50,0,0,1212,1214,3,186,
		93,0,1213,1211,1,0,0,0,1213,1214,1,0,0,0,1214,1216,1,0,0,0,1215,1217,5,
		50,0,0,1216,1215,1,0,0,0,1216,1217,1,0,0,0,1217,1218,1,0,0,0,1218,1219,
		5,47,0,0,1219,1221,1,0,0,0,1220,1200,1,0,0,0,1220,1202,1,0,0,0,1220,1209,
		1,0,0,0,1221,181,1,0,0,0,1222,1227,3,184,92,0,1223,1224,5,50,0,0,1224,
		1226,3,184,92,0,1225,1223,1,0,0,0,1226,1229,1,0,0,0,1227,1225,1,0,0,0,
		1227,1228,1,0,0,0,1228,183,1,0,0,0,1229,1227,1,0,0,0,1230,1233,3,144,72,
		0,1231,1233,3,164,82,0,1232,1230,1,0,0,0,1232,1231,1,0,0,0,1233,1234,1,
		0,0,0,1234,1235,5,49,0,0,1235,1236,3,134,67,0,1236,185,1,0,0,0,1237,1238,
		5,70,0,0,1238,1239,3,158,79,0,1239,187,1,0,0,0,1240,1241,3,166,83,0,1241,
		1253,5,42,0,0,1242,1245,3,190,95,0,1243,1244,5,50,0,0,1244,1246,3,192,
		96,0,1245,1243,1,0,0,0,1245,1246,1,0,0,0,1246,1249,1,0,0,0,1247,1249,3,
		192,96,0,1248,1242,1,0,0,0,1248,1247,1,0,0,0,1249,1251,1,0,0,0,1250,1252,
		5,50,0,0,1251,1250,1,0,0,0,1251,1252,1,0,0,0,1252,1254,1,0,0,0,1253,1248,
		1,0,0,0,1253,1254,1,0,0,0,1254,1255,1,0,0,0,1255,1256,5,45,0,0,1256,189,
		1,0,0,0,1257,1262,3,134,67,0,1258,1259,5,50,0,0,1259,1261,3,134,67,0,1260,
		1258,1,0,0,0,1261,1264,1,0,0,0,1262,1260,1,0,0,0,1262,1263,1,0,0,0,1263,
		191,1,0,0,0,1264,1262,1,0,0,0,1265,1270,3,194,97,0,1266,1267,5,50,0,0,
		1267,1269,3,194,97,0,1268,1266,1,0,0,0,1269,1272,1,0,0,0,1270,1268,1,0,
		0,0,1270,1271,1,0,0,0,1271,193,1,0,0,0,1272,1270,1,0,0,0,1273,1274,5,90,
		0,0,1274,1275,5,60,0,0,1275,1276,3,134,67,0,1276,195,1,0,0,0,1277,1278,
		3,386,193,0,1278,1280,5,90,0,0,1279,1281,3,198,99,0,1280,1279,1,0,0,0,
		1280,1281,1,0,0,0,1281,1282,1,0,0,0,1282,1283,5,60,0,0,1283,1284,3,208,
		104,0,1284,197,1,0,0,0,1285,1286,5,43,0,0,1286,1287,3,200,100,0,1287,1288,
		5,46,0,0,1288,199,1,0,0,0,1289,1294,3,202,101,0,1290,1291,5,50,0,0,1291,
		1293,3,202,101,0,1292,1290,1,0,0,0,1293,1296,1,0,0,0,1294,1292,1,0,0,0,
		1294,1295,1,0,0,0,1295,1298,1,0,0,0,1296,1294,1,0,0,0,1297,1299,5,50,0,
		0,1298,1297,1,0,0,0,1298,1299,1,0,0,0,1299,201,1,0,0,0,1300,1302,5,90,
		0,0,1301,1303,3,204,102,0,1302,1301,1,0,0,0,1302,1303,1,0,0,0,1303,1309,
		1,0,0,0,1304,1305,5,54,0,0,1305,1309,5,90,0,0,1306,1307,5,70,0,0,1307,
		1309,5,90,0,0,1308,1300,1,0,0,0,1308,1304,1,0,0,0,1308,1306,1,0,0,0,1309,
		203,1,0,0,0,1310,1311,5,49,0,0,1311,1312,3,208,104,0,1312,205,1,0,0,0,
		1313,1318,3,208,104,0,1314,1315,5,50,0,0,1315,1317,3,208,104,0,1316,1314,
		1,0,0,0,1317,1320,1,0,0,0,1318,1316,1,0,0,0,1318,1319,1,0,0,0,1319,1322,
		1,0,0,0,1320,1318,1,0,0,0,1321,1323,5,50,0,0,1322,1321,1,0,0,0,1322,1323,
		1,0,0,0,1323,207,1,0,0,0,1324,1330,3,224,112,0,1325,1326,5,39,0,0,1326,
		1327,3,224,112,0,1327,1328,5,9,0,0,1328,1329,3,208,104,0,1329,1331,1,0,
		0,0,1330,1325,1,0,0,0,1330,1331,1,0,0,0,1331,1334,1,0,0,0,1332,1334,3,
		282,141,0,1333,1324,1,0,0,0,1333,1332,1,0,0,0,1334,209,1,0,0,0,1335,1341,
		5,41,0,0,1336,1337,5,29,0,0,1337,1342,3,208,104,0,1338,1340,3,212,106,
		0,1339,1338,1,0,0,0,1339,1340,1,0,0,0,1340,1342,1,0,0,0,1341,1336,1,0,
		0,0,1341,1339,1,0,0,0,1342,211,1,0,0,0,1343,1348,3,214,107,0,1344,1345,
		5,50,0,0,1345,1347,3,214,107,0,1346,1344,1,0,0,0,1347,1350,1,0,0,0,1348,
		1346,1,0,0,0,1348,1349,1,0,0,0,1349,1352,1,0,0,0,1350,1348,1,0,0,0,1351,
		1353,5,50,0,0,1352,1351,1,0,0,0,1352,1353,1,0,0,0,1353,213,1,0,0,0,1354,
		1355,5,54,0,0,1355,1358,3,254,127,0,1356,1358,3,208,104,0,1357,1354,1,
		0,0,0,1357,1356,1,0,0,0,1358,215,1,0,0,0,1359,1364,3,218,109,0,1360,1361,
		5,50,0,0,1361,1363,3,218,109,0,1362,1360,1,0,0,0,1363,1366,1,0,0,0,1364,
		1362,1,0,0,0,1364,1365,1,0,0,0,1365,1368,1,0,0,0,1366,1364,1,0,0,0,1367,
		1369,5,50,0,0,1368,1367,1,0,0,0,1368,1369,1,0,0,0,1369,217,1,0,0,0,1370,
		1371,5,54,0,0,1371,1374,3,254,127,0,1372,1374,3,222,111,0,1373,1370,1,
		0,0,0,1373,1372,1,0,0,0,1374,219,1,0,0,0,1375,1376,5,90,0,0,1376,1377,
		5,88,0,0,1377,1378,3,208,104,0,1378,221,1,0,0,0,1379,1382,3,220,110,0,
		1380,1382,3,208,104,0,1381,1379,1,0,0,0,1381,1380,1,0,0,0,1382,223,1,0,
		0,0,1383,1388,3,226,113,0,1384,1385,5,40,0,0,1385,1387,3,226,113,0,1386,
		1384,1,0,0,0,1387,1390,1,0,0,0,1388,1386,1,0,0,0,1388,1389,1,0,0,0,1389,
		225,1,0,0,0,1390,1388,1,0,0,0,1391,1396,3,228,114,0,1392,1393,5,22,0,0,
		1393,1395,3,228,114,0,1394,1392,1,0,0,0,1395,1398,1,0,0,0,1396,1394,1,
		0,0,0,1396,1397,1,0,0,0,1397,227,1,0,0,0,1398,1396,1,0,0,0,1399,1400,5,
		35,0,0,1400,1403,3,228,114,0,1401,1403,3,230,115,0,1402,1399,1,0,0,0,1402,
		1401,1,0,0,0,1403,229,1,0,0,0,1404,1408,3,254,127,0,1405,1407,3,232,116,
		0,1406,1405,1,0,0,0,1407,1410,1,0,0,0,1408,1406,1,0,0,0,1408,1409,1,0,
		0,0,1409,231,1,0,0,0,1410,1408,1,0,0,0,1411,1422,3,234,117,0,1412,1422,
		3,236,118,0,1413,1422,3,238,119,0,1414,1422,3,240,120,0,1415,1422,3,242,
		121,0,1416,1422,3,244,122,0,1417,1422,3,246,123,0,1418,1422,3,248,124,
		0,1419,1422,3,250,125,0,1420,1422,3,252,126,0,1421,1411,1,0,0,0,1421,1412,
		1,0,0,0,1421,1413,1,0,0,0,1421,1414,1,0,0,0,1421,1415,1,0,0,0,1421,1416,
		1,0,0,0,1421,1417,1,0,0,0,1421,1418,1,0,0,0,1421,1419,1,0,0,0,1421,1420,
		1,0,0,0,1422,233,1,0,0,0,1423,1424,5,62,0,0,1424,1425,3,254,127,0,1425,
		235,1,0,0,0,1426,1427,5,63,0,0,1427,1428,3,254,127,0,1428,237,1,0,0,0,
		1429,1430,5,64,0,0,1430,1431,3,254,127,0,1431,239,1,0,0,0,1432,1433,5,
		58,0,0,1433,1434,3,254,127,0,1434,241,1,0,0,0,1435,1436,5,65,0,0,1436,
		1437,3,254,127,0,1437,243,1,0,0,0,1438,1439,5,59,0,0,1439,1440,3,254,127,
		0,1440,245,1,0,0,0,1441,1442,5,35,0,0,1442,1443,5,15,0,0,1443,1444,3,254,
		127,0,1444,247,1,0,0,0,1445,1446,5,15,0,0,1446,1447,3,254,127,0,1447,249,
		1,0,0,0,1448,1449,5,20,0,0,1449,1450,5,35,0,0,1450,1451,3,254,127,0,1451,
		251,1,0,0,0,1452,1453,5,20,0,0,1453,1454,3,254,127,0,1454,253,1,0,0,0,
		1455,1456,6,127,-1,0,1456,1457,3,256,128,0,1457,1463,1,0,0,0,1458,1459,
		10,2,0,0,1459,1460,5,56,0,0,1460,1462,3,256,128,0,1461,1458,1,0,0,0,1462,
		1465,1,0,0,0,1463,1461,1,0,0,0,1463,1464,1,0,0,0,1464,255,1,0,0,0,1465,
		1463,1,0,0,0,1466,1467,6,128,-1,0,1467,1468,3,258,129,0,1468,1474,1,0,
		0,0,1469,1470,10,2,0,0,1470,1471,5,67,0,0,1471,1473,3,258,129,0,1472,1469,
		1,0,0,0,1473,1476,1,0,0,0,1474,1472,1,0,0,0,1474,1475,1,0,0,0,1475,257,
		1,0,0,0,1476,1474,1,0,0,0,1477,1478,6,129,-1,0,1478,1479,3,260,130,0,1479,
		1485,1,0,0,0,1480,1481,10,2,0,0,1481,1482,5,57,0,0,1482,1484,3,260,130,
		0,1483,1480,1,0,0,0,1484,1487,1,0,0,0,1485,1483,1,0,0,0,1485,1486,1,0,
		0,0,1486,259,1,0,0,0,1487,1485,1,0,0,0,1488,1489,6,130,-1,0,1489,1490,
		3,262,131,0,1490,1496,1,0,0,0,1491,1492,10,2,0,0,1492,1493,7,3,0,0,1493,
		1495,3,262,131,0,1494,1491,1,0,0,0,1495,1498,1,0,0,0,1496,1494,1,0,0,0,
		1496,1497,1,0,0,0,1497,261,1,0,0,0,1498,1496,1,0,0,0,1499,1500,6,131,-1,
		0,1500,1501,3,264,132,0,1501,1507,1,0,0,0,1502,1503,10,2,0,0,1503,1504,
		7,2,0,0,1504,1506,3,264,132,0,1505,1502,1,0,0,0,1506,1509,1,0,0,0,1507,
		1505,1,0,0,0,1507,1508,1,0,0,0,1508,263,1,0,0,0,1509,1507,1,0,0,0,1510,
		1511,6,132,-1,0,1511,1512,3,266,133,0,1512,1518,1,0,0,0,1513,1514,10,2,
		0,0,1514,1515,7,4,0,0,1515,1517,3,266,133,0,1516,1513,1,0,0,0,1517,1520,
		1,0,0,0,1518,1516,1,0,0,0,1518,1519,1,0,0,0,1519,265,1,0,0,0,1520,1518,
		1,0,0,0,1521,1522,5,52,0,0,1522,1529,3,266,133,0,1523,1524,5,53,0,0,1524,
		1529,3,266,133,0,1525,1526,5,66,0,0,1526,1529,3,266,133,0,1527,1529,3,
		268,134,0,1528,1521,1,0,0,0,1528,1523,1,0,0,0,1528,1525,1,0,0,0,1528,1527,
		1,0,0,0,1529,267,1,0,0,0,1530,1533,3,270,135,0,1531,1532,5,70,0,0,1532,
		1534,3,266,133,0,1533,1531,1,0,0,0,1533,1534,1,0,0,0,1534,269,1,0,0,0,
		1535,1536,5,8,0,0,1536,1539,3,272,136,0,1537,1539,3,272,136,0,1538,1535,
		1,0,0,0,1538,1537,1,0,0,0,1539,271,1,0,0,0,1540,1541,6,136,-1,0,1541,1542,
		3,278,139,0,1542,1560,1,0,0,0,1543,1556,10,2,0,0,1544,1545,5,48,0,0,1545,
		1557,5,90,0,0,1546,1557,3,342,171,0,1547,1549,5,42,0,0,1548,1550,3,346,
		173,0,1549,1548,1,0,0,0,1549,1550,1,0,0,0,1550,1551,1,0,0,0,1551,1557,
		5,45,0,0,1552,1553,5,43,0,0,1553,1554,3,274,137,0,1554,1555,5,46,0,0,1555,
		1557,1,0,0,0,1556,1544,1,0,0,0,1556,1546,1,0,0,0,1556,1547,1,0,0,0,1556,
		1552,1,0,0,0,1557,1559,1,0,0,0,1558,1543,1,0,0,0,1559,1562,1,0,0,0,1560,
		1558,1,0,0,0,1560,1561,1,0,0,0,1561,273,1,0,0,0,1562,1560,1,0,0,0,1563,
		1582,3,276,138,0,1564,1567,3,276,138,0,1565,1567,3,352,176,0,1566,1564,
		1,0,0,0,1566,1565,1,0,0,0,1567,1575,1,0,0,0,1568,1571,5,50,0,0,1569,1572,
		3,276,138,0,1570,1572,3,352,176,0,1571,1569,1,0,0,0,1571,1570,1,0,0,0,
		1572,1574,1,0,0,0,1573,1568,1,0,0,0,1574,1577,1,0,0,0,1575,1573,1,0,0,
		0,1575,1576,1,0,0,0,1576,1579,1,0,0,0,1577,1575,1,0,0,0,1578,1580,5,50,
		0,0,1579,1578,1,0,0,0,1579,1580,1,0,0,0,1580,1582,1,0,0,0,1581,1563,1,
		0,0,0,1581,1566,1,0,0,0,1582,275,1,0,0,0,1583,1585,3,208,104,0,1584,1583,
		1,0,0,0,1584,1585,1,0,0,0,1585,1586,1,0,0,0,1586,1588,5,49,0,0,1587,1589,
		3,208,104,0,1588,1587,1,0,0,0,1588,1589,1,0,0,0,1589,1594,1,0,0,0,1590,
		1592,5,49,0,0,1591,1593,3,208,104,0,1592,1591,1,0,0,0,1592,1593,1,0,0,
		0,1593,1595,1,0,0,0,1594,1590,1,0,0,0,1594,1595,1,0,0,0,1595,1598,1,0,
		0,0,1596,1598,3,222,111,0,1597,1584,1,0,0,0,1597,1596,1,0,0,0,1598,277,
		1,0,0,0,1599,1622,5,90,0,0,1600,1622,5,17,0,0,1601,1622,5,7,0,0,1602,1622,
		5,12,0,0,1603,1622,3,318,159,0,1604,1622,5,91,0,0,1605,1609,3,322,161,
		0,1606,1609,3,280,140,0,1607,1609,3,342,171,0,1608,1605,1,0,0,0,1608,1606,
		1,0,0,0,1608,1607,1,0,0,0,1609,1622,1,0,0,0,1610,1613,3,320,160,0,1611,
		1613,3,338,169,0,1612,1610,1,0,0,0,1612,1611,1,0,0,0,1613,1622,1,0,0,0,
		1614,1619,3,326,163,0,1615,1619,3,324,162,0,1616,1619,3,344,172,0,1617,
		1619,3,340,170,0,1618,1614,1,0,0,0,1618,1615,1,0,0,0,1618,1616,1,0,0,0,
		1618,1617,1,0,0,0,1619,1622,1,0,0,0,1620,1622,5,87,0,0,1621,1599,1,0,0,
		0,1621,1600,1,0,0,0,1621,1601,1,0,0,0,1621,1602,1,0,0,0,1621,1603,1,0,
		0,0,1621,1604,1,0,0,0,1621,1608,1,0,0,0,1621,1612,1,0,0,0,1621,1618,1,
		0,0,0,1621,1620,1,0,0,0,1622,279,1,0,0,0,1623,1626,5,42,0,0,1624,1627,
		3,210,105,0,1625,1627,3,222,111,0,1626,1624,1,0,0,0,1626,1625,1,0,0,0,
		1627,1628,1,0,0,0,1628,1629,5,45,0,0,1629,281,1,0,0,0,1630,1632,5,25,0,
		0,1631,1633,3,284,142,0,1632,1631,1,0,0,0,1632,1633,1,0,0,0,1633,1634,
		1,0,0,0,1634,1635,5,49,0,0,1635,1636,3,208,104,0,1636,283,1,0,0,0,1637,
		1638,3,286,143,0,1638,285,1,0,0,0,1639,1643,3,288,144,0,1640,1642,3,296,
		148,0,1641,1640,1,0,0,0,1642,1645,1,0,0,0,1643,1641,1,0,0,0,1643,1644,
		1,0,0,0,1644,1649,1,0,0,0,1645,1643,1,0,0,0,1646,1648,3,298,149,0,1647,
		1646,1,0,0,0,1648,1651,1,0,0,0,1649,1647,1,0,0,0,1649,1650,1,0,0,0,1650,
		1653,1,0,0,0,1651,1649,1,0,0,0,1652,1654,3,292,146,0,1653,1652,1,0,0,0,
		1653,1654,1,0,0,0,1654,1689,1,0,0,0,1655,1659,3,290,145,0,1656,1658,3,
		298,149,0,1657,1656,1,0,0,0,1658,1661,1,0,0,0,1659,1657,1,0,0,0,1659,1660,
		1,0,0,0,1660,1663,1,0,0,0,1661,1659,1,0,0,0,1662,1664,3,292,146,0,1663,
		1662,1,0,0,0,1663,1664,1,0,0,0,1664,1689,1,0,0,0,1665,1667,3,296,148,0,
		1666,1665,1,0,0,0,1667,1668,1,0,0,0,1668,1666,1,0,0,0,1668,1669,1,0,0,
		0,1669,1673,1,0,0,0,1670,1672,3,298,149,0,1671,1670,1,0,0,0,1672,1675,
		1,0,0,0,1673,1671,1,0,0,0,1673,1674,1,0,0,0,1674,1677,1,0,0,0,1675,1673,
		1,0,0,0,1676,1678,3,292,146,0,1677,1676,1,0,0,0,1677,1678,1,0,0,0,1678,
		1689,1,0,0,0,1679,1681,3,298,149,0,1680,1679,1,0,0,0,1681,1682,1,0,0,0,
		1682,1680,1,0,0,0,1682,1683,1,0,0,0,1683,1685,1,0,0,0,1684,1686,3,292,
		146,0,1685,1684,1,0,0,0,1685,1686,1,0,0,0,1686,1689,1,0,0,0,1687,1689,
		3,292,146,0,1688,1639,1,0,0,0,1688,1655,1,0,0,0,1688,1666,1,0,0,0,1688,
		1680,1,0,0,0,1688,1687,1,0,0,0,1689,287,1,0,0,0,1690,1692,3,296,148,0,
		1691,1690,1,0,0,0,1692,1693,1,0,0,0,1693,1691,1,0,0,0,1693,1694,1,0,0,
		0,1694,1695,1,0,0,0,1695,1697,5,55,0,0,1696,1698,5,50,0,0,1697,1696,1,
		0,0,0,1697,1698,1,0,0,0,1698,289,1,0,0,0,1699,1701,3,296,148,0,1700,1699,
		1,0,0,0,1701,1704,1,0,0,0,1702,1700,1,0,0,0,1702,1703,1,0,0,0,1703,1706,
		1,0,0,0,1704,1702,1,0,0,0,1705,1707,3,298,149,0,1706,1705,1,0,0,0,1707,
		1708,1,0,0,0,1708,1706,1,0,0,0,1708,1709,1,0,0,0,1709,1710,1,0,0,0,1710,
		1712,5,55,0,0,1711,1713,5,50,0,0,1712,1711,1,0,0,0,1712,1713,1,0,0,0,1713,
		291,1,0,0,0,1714,1715,5,54,0,0,1715,1719,3,296,148,0,1716,1718,3,300,150,
		0,1717,1716,1,0,0,0,1718,1721,1,0,0,0,1719,1717,1,0,0,0,1719,1720,1,0,
		0,0,1720,1723,1,0,0,0,1721,1719,1,0,0,0,1722,1724,3,294,147,0,1723,1722,
		1,0,0,0,1723,1724,1,0,0,0,1724,1737,1,0,0,0,1725,1726,5,54,0,0,1726,1728,
		5,50,0,0,1727,1729,3,300,150,0,1728,1727,1,0,0,0,1729,1730,1,0,0,0,1730,
		1728,1,0,0,0,1730,1731,1,0,0,0,1731,1733,1,0,0,0,1732,1734,3,294,147,0,
		1733,1732,1,0,0,0,1733,1734,1,0,0,0,1734,1737,1,0,0,0,1735,1737,3,294,
		147,0,1736,1714,1,0,0,0,1736,1725,1,0,0,0,1736,1735,1,0,0,0,1737,293,1,
		0,0,0,1738,1739,5,70,0,0,1739,1740,3,296,148,0,1740,295,1,0,0,0,1741,1743,
		3,302,151,0,1742,1744,5,50,0,0,1743,1742,1,0,0,0,1743,1744,1,0,0,0,1744,
		297,1,0,0,0,1745,1746,3,302,151,0,1746,1748,3,100,50,0,1747,1749,5,50,
		0,0,1748,1747,1,0,0,0,1748,1749,1,0,0,0,1749,299,1,0,0,0,1750,1752,3,302,
		151,0,1751,1753,3,100,50,0,1752,1751,1,0,0,0,1752,1753,1,0,0,0,1753,1755,
		1,0,0,0,1754,1756,5,50,0,0,1755,1754,1,0,0,0,1755,1756,1,0,0,0,1756,301,
		1,0,0,0,1757,1758,5,90,0,0,1758,303,1,0,0,0,1759,1762,3,306,153,0,1760,
		1762,5,5,0,0,1761,1759,1,0,0,0,1761,1760,1,0,0,0,1762,305,1,0,0,0,1763,
		1766,5,44,0,0,1764,1767,3,210,105,0,1765,1767,3,212,106,0,1766,1764,1,
		0,0,0,1766,1765,1,0,0,0,1767,1769,1,0,0,0,1768,1770,5,60,0,0,1769,1768,
		1,0,0,0,1769,1770,1,0,0,0,1770,1772,1,0,0,0,1771,1773,3,308,154,0,1772,
		1771,1,0,0,0,1772,1773,1,0,0,0,1773,1775,1,0,0,0,1774,1776,3,310,155,0,
		1775,1774,1,0,0,0,1775,1776,1,0,0,0,1776,1777,1,0,0,0,1777,1778,5,47,0,
		0,1778,307,1,0,0,0,1779,1780,5,89,0,0,1780,1781,5,90,0,0,1781,309,1,0,
		0,0,1782,1786,5,49,0,0,1783,1785,3,312,156,0,1784,1783,1,0,0,0,1785,1788,
		1,0,0,0,1786,1784,1,0,0,0,1786,1787,1,0,0,0,1787,311,1,0,0,0,1788,1786,
		1,0,0,0,1789,1792,5,5,0,0,1790,1792,3,306,153,0,1791,1789,1,0,0,0,1791,
		1790,1,0,0,0,1792,313,1,0,0,0,1793,1797,5,4,0,0,1794,1796,3,304,152,0,
		1795,1794,1,0,0,0,1796,1799,1,0,0,0,1797,1795,1,0,0,0,1797,1798,1,0,0,
		0,1798,1800,1,0,0,0,1799,1797,1,0,0,0,1800,1801,5,6,0,0,1801,315,1,0,0,
		0,1802,1803,5,92,0,0,1803,317,1,0,0,0,1804,1807,3,314,157,0,1805,1807,
		3,316,158,0,1806,1804,1,0,0,0,1806,1805,1,0,0,0,1807,1808,1,0,0,0,1808,
		1806,1,0,0,0,1808,1809,1,0,0,0,1809,319,1,0,0,0,1810,1812,5,43,0,0,1811,
		1813,3,216,108,0,1812,1811,1,0,0,0,1812,1813,1,0,0,0,1813,1814,1,0,0,0,
		1814,1815,5,46,0,0,1815,321,1,0,0,0,1816,1822,5,42,0,0,1817,1818,3,218,
		109,0,1818,1820,5,50,0,0,1819,1821,3,216,108,0,1820,1819,1,0,0,0,1820,
		1821,1,0,0,0,1821,1823,1,0,0,0,1822,1817,1,0,0,0,1822,1823,1,0,0,0,1823,
		1824,1,0,0,0,1824,1825,5,45,0,0,1825,323,1,0,0,0,1826,1827,5,44,0,0,1827,
		1828,3,216,108,0,1828,1829,5,47,0,0,1829,325,1,0,0,0,1830,1832,5,44,0,
		0,1831,1833,3,328,164,0,1832,1831,1,0,0,0,1832,1833,1,0,0,0,1833,1834,
		1,0,0,0,1834,1835,5,47,0,0,1835,327,1,0,0,0,1836,1841,3,330,165,0,1837,
		1838,5,50,0,0,1838,1840,3,330,165,0,1839,1837,1,0,0,0,1840,1843,1,0,0,
		0,1841,1839,1,0,0,0,1841,1842,1,0,0,0,1842,1845,1,0,0,0,1843,1841,1,0,
		0,0,1844,1846,5,50,0,0,1845,1844,1,0,0,0,1845,1846,1,0,0,0,1846,329,1,
		0,0,0,1847,1848,5,70,0,0,1848,1851,3,254,127,0,1849,1851,3,332,166,0,1850,
		1847,1,0,0,0,1850,1849,1,0,0,0,1851,331,1,0,0,0,1852,1853,3,208,104,0,
		1853,1854,5,49,0,0,1854,1855,3,208,104,0,1855,333,1,0,0,0,1856,1858,3,
		336,168,0,1857,1856,1,0,0,0,1858,1859,1,0,0,0,1859,1857,1,0,0,0,1859,1860,
		1,0,0,0,1860,335,1,0,0,0,1861,1863,5,37,0,0,1862,1861,1,0,0,0,1862,1863,
		1,0,0,0,1863,1864,1,0,0,0,1864,1865,5,24,0,0,1865,1866,3,358,179,0,1866,
		1867,5,15,0,0,1867,1872,3,224,112,0,1868,1869,5,39,0,0,1869,1871,3,224,
		112,0,1870,1868,1,0,0,0,1871,1874,1,0,0,0,1872,1870,1,0,0,0,1872,1873,
		1,0,0,0,1873,337,1,0,0,0,1874,1872,1,0,0,0,1875,1876,5,43,0,0,1876,1877,
		3,222,111,0,1877,1878,3,334,167,0,1878,1879,5,46,0,0,1879,339,1,0,0,0,
		1880,1881,5,44,0,0,1881,1882,3,222,111,0,1882,1883,3,334,167,0,1883,1884,
		5,47,0,0,1884,341,1,0,0,0,1885,1888,5,42,0,0,1886,1889,3,220,110,0,1887,
		1889,3,208,104,0,1888,1886,1,0,0,0,1888,1887,1,0,0,0,1889,1890,1,0,0,0,
		1890,1891,3,334,167,0,1891,1892,5,45,0,0,1892,343,1,0,0,0,1893,1894,5,
		44,0,0,1894,1895,3,332,166,0,1895,1896,3,334,167,0,1896,1897,5,47,0,0,
		1897,345,1,0,0,0,1898,1900,3,348,174,0,1899,1901,5,50,0,0,1900,1899,1,
		0,0,0,1900,1901,1,0,0,0,1901,347,1,0,0,0,1902,1908,3,352,176,0,1903,1906,
		3,220,110,0,1904,1906,3,208,104,0,1905,1903,1,0,0,0,1905,1904,1,0,0,0,
		1906,1908,1,0,0,0,1907,1902,1,0,0,0,1907,1905,1,0,0,0,1908,1919,1,0,0,
		0,1909,1915,5,50,0,0,1910,1916,3,352,176,0,1911,1914,3,220,110,0,1912,
		1914,3,208,104,0,1913,1911,1,0,0,0,1913,1912,1,0,0,0,1914,1916,1,0,0,0,
		1915,1910,1,0,0,0,1915,1913,1,0,0,0,1916,1918,1,0,0,0,1917,1909,1,0,0,
		0,1918,1921,1,0,0,0,1919,1917,1,0,0,0,1919,1920,1,0,0,0,1920,1924,1,0,
		0,0,1921,1919,1,0,0,0,1922,1923,5,50,0,0,1923,1925,3,350,175,0,1924,1922,
		1,0,0,0,1924,1925,1,0,0,0,1925,1928,1,0,0,0,1926,1928,3,350,175,0,1927,
		1907,1,0,0,0,1927,1926,1,0,0,0,1928,349,1,0,0,0,1929,1934,3,354,177,0,
		1930,1931,5,50,0,0,1931,1933,3,354,177,0,1932,1930,1,0,0,0,1933,1936,1,
		0,0,0,1934,1932,1,0,0,0,1934,1935,1,0,0,0,1935,1946,1,0,0,0,1936,1934,
		1,0,0,0,1937,1938,5,50,0,0,1938,1943,3,356,178,0,1939,1940,5,50,0,0,1940,
		1942,3,356,178,0,1941,1939,1,0,0,0,1942,1945,1,0,0,0,1943,1941,1,0,0,0,
		1943,1944,1,0,0,0,1944,1947,1,0,0,0,1945,1943,1,0,0,0,1946,1937,1,0,0,
		0,1946,1947,1,0,0,0,1947,1957,1,0,0,0,1948,1953,3,356,178,0,1949,1950,
		5,50,0,0,1950,1952,3,356,178,0,1951,1949,1,0,0,0,1952,1955,1,0,0,0,1953,
		1951,1,0,0,0,1953,1954,1,0,0,0,1954,1957,1,0,0,0,1955,1953,1,0,0,0,1956,
		1929,1,0,0,0,1956,1948,1,0,0,0,1957,351,1,0,0,0,1958,1959,5,54,0,0,1959,
		1960,3,208,104,0,1960,353,1,0,0,0,1961,1962,5,90,0,0,1962,1963,5,60,0,
		0,1963,1966,3,208,104,0,1964,1966,3,352,176,0,1965,1961,1,0,0,0,1965,1964,
		1,0,0,0,1966,355,1,0,0,0,1967,1968,5,90,0,0,1968,1969,5,60,0,0,1969,1973,
		3,208,104,0,1970,1971,5,70,0,0,1971,1973,3,208,104,0,1972,1967,1,0,0,0,
		1972,1970,1,0,0,0,1973,357,1,0,0,0,1974,1979,3,364,182,0,1975,1976,5,50,
		0,0,1976,1978,3,364,182,0,1977,1975,1,0,0,0,1978,1981,1,0,0,0,1979,1977,
		1,0,0,0,1979,1980,1,0,0,0,1980,1983,1,0,0,0,1981,1979,1,0,0,0,1982,1984,
		5,50,0,0,1983,1982,1,0,0,0,1983,1984,1,0,0,0,1984,359,1,0,0,0,1985,1988,
		3,364,182,0,1986,1987,5,50,0,0,1987,1989,3,364,182,0,1988,1986,1,0,0,0,
		1989,1990,1,0,0,0,1990,1988,1,0,0,0,1990,1991,1,0,0,0,1991,1993,1,0,0,
		0,1992,1994,5,50,0,0,1993,1992,1,0,0,0,1993,1994,1,0,0,0,1994,361,1,0,
		0,0,1995,2006,3,364,182,0,1996,2007,5,50,0,0,1997,1998,5,50,0,0,1998,2000,
		3,364,182,0,1999,1997,1,0,0,0,2000,2001,1,0,0,0,2001,1999,1,0,0,0,2001,
		2002,1,0,0,0,2002,2004,1,0,0,0,2003,2005,5,50,0,0,2004,2003,1,0,0,0,2004,
		2005,1,0,0,0,2005,2007,1,0,0,0,2006,1996,1,0,0,0,2006,1999,1,0,0,0,2007,
		363,1,0,0,0,2008,2009,5,54,0,0,2009,2012,3,364,182,0,2010,2012,3,366,183,
		0,2011,2008,1,0,0,0,2011,2010,1,0,0,0,2012,365,1,0,0,0,2013,2020,3,374,
		187,0,2014,2015,5,48,0,0,2015,2021,5,90,0,0,2016,2017,5,43,0,0,2017,2018,
		3,274,137,0,2018,2019,5,46,0,0,2019,2021,1,0,0,0,2020,2014,1,0,0,0,2020,
		2016,1,0,0,0,2021,2024,1,0,0,0,2022,2024,3,368,184,0,2023,2013,1,0,0,0,
		2023,2022,1,0,0,0,2024,367,1,0,0,0,2025,2041,5,90,0,0,2026,2027,5,42,0,
		0,2027,2028,3,366,183,0,2028,2029,5,45,0,0,2029,2041,1,0,0,0,2030,2032,
		5,42,0,0,2031,2033,3,362,181,0,2032,2031,1,0,0,0,2032,2033,1,0,0,0,2033,
		2034,1,0,0,0,2034,2041,5,45,0,0,2035,2037,5,43,0,0,2036,2038,3,360,180,
		0,2037,2036,1,0,0,0,2037,2038,1,0,0,0,2038,2039,1,0,0,0,2039,2041,5,46,
		0,0,2040,2025,1,0,0,0,2040,2026,1,0,0,0,2040,2030,1,0,0,0,2040,2035,1,
		0,0,0,2041,369,1,0,0,0,2042,2049,3,372,186,0,2043,2049,5,90,0,0,2044,2045,
		5,42,0,0,2045,2046,3,370,185,0,2046,2047,5,45,0,0,2047,2049,1,0,0,0,2048,
		2042,1,0,0,0,2048,2043,1,0,0,0,2048,2044,1,0,0,0,2049,371,1,0,0,0,2050,
		2057,3,374,187,0,2051,2052,5,48,0,0,2052,2058,5,90,0,0,2053,2054,5,43,
		0,0,2054,2055,3,274,137,0,2055,2056,5,46,0,0,2056,2058,1,0,0,0,2057,2051,
		1,0,0,0,2057,2053,1,0,0,0,2058,373,1,0,0,0,2059,2060,6,187,-1,0,2060,2061,
		3,278,139,0,2061,2079,1,0,0,0,2062,2075,10,2,0,0,2063,2064,5,48,0,0,2064,
		2076,5,90,0,0,2065,2066,5,43,0,0,2066,2067,3,274,137,0,2067,2068,5,46,
		0,0,2068,2076,1,0,0,0,2069,2076,3,342,171,0,2070,2072,5,42,0,0,2071,2073,
		3,346,173,0,2072,2071,1,0,0,0,2072,2073,1,0,0,0,2073,2074,1,0,0,0,2074,
		2076,5,45,0,0,2075,2063,1,0,0,0,2075,2065,1,0,0,0,2075,2069,1,0,0,0,2075,
		2070,1,0,0,0,2076,2078,1,0,0,0,2077,2062,1,0,0,0,2078,2081,1,0,0,0,2079,
		2077,1,0,0,0,2079,2080,1,0,0,0,2080,375,1,0,0,0,2081,2079,1,0,0,0,2082,
		2087,3,378,189,0,2083,2084,5,50,0,0,2084,2086,3,378,189,0,2085,2083,1,
		0,0,0,2086,2089,1,0,0,0,2087,2085,1,0,0,0,2087,2088,1,0,0,0,2088,2091,
		1,0,0,0,2089,2087,1,0,0,0,2090,2092,5,50,0,0,2091,2090,1,0,0,0,2091,2092,
		1,0,0,0,2092,377,1,0,0,0,2093,2100,3,374,187,0,2094,2095,5,48,0,0,2095,
		2101,5,90,0,0,2096,2097,5,43,0,0,2097,2098,3,274,137,0,2098,2099,5,46,
		0,0,2099,2101,1,0,0,0,2100,2094,1,0,0,0,2100,2096,1,0,0,0,2101,2104,1,
		0,0,0,2102,2104,3,380,190,0,2103,2093,1,0,0,0,2103,2102,1,0,0,0,2104,379,
		1,0,0,0,2105,2121,5,90,0,0,2106,2107,5,42,0,0,2107,2108,3,378,189,0,2108,
		2109,5,45,0,0,2109,2121,1,0,0,0,2110,2112,5,42,0,0,2111,2113,3,376,188,
		0,2112,2111,1,0,0,0,2112,2113,1,0,0,0,2113,2114,1,0,0,0,2114,2121,5,45,
		0,0,2115,2117,5,43,0,0,2116,2118,3,376,188,0,2117,2116,1,0,0,0,2117,2118,
		1,0,0,0,2118,2119,1,0,0,0,2119,2121,5,46,0,0,2120,2105,1,0,0,0,2120,2106,
		1,0,0,0,2120,2110,1,0,0,0,2120,2115,1,0,0,0,2121,381,1,0,0,0,2122,2127,
		3,208,104,0,2123,2124,5,50,0,0,2124,2126,3,208,104,0,2125,2123,1,0,0,0,
		2126,2129,1,0,0,0,2127,2125,1,0,0,0,2127,2128,1,0,0,0,2128,2142,1,0,0,
		0,2129,2127,1,0,0,0,2130,2140,5,50,0,0,2131,2132,5,54,0,0,2132,2136,3,
		208,104,0,2133,2134,5,50,0,0,2134,2135,5,70,0,0,2135,2137,3,208,104,0,
		2136,2133,1,0,0,0,2136,2137,1,0,0,0,2137,2141,1,0,0,0,2138,2139,5,70,0,
		0,2139,2141,3,208,104,0,2140,2131,1,0,0,0,2140,2138,1,0,0,0,2141,2143,
		1,0,0,0,2142,2130,1,0,0,0,2142,2143,1,0,0,0,2143,2154,1,0,0,0,2144,2145,
		5,54,0,0,2145,2149,3,208,104,0,2146,2147,5,50,0,0,2147,2148,5,70,0,0,2148,
		2150,3,208,104,0,2149,2146,1,0,0,0,2149,2150,1,0,0,0,2150,2154,1,0,0,0,
		2151,2152,5,70,0,0,2152,2154,3,208,104,0,2153,2122,1,0,0,0,2153,2144,1,
		0,0,0,2153,2151,1,0,0,0,2154,383,1,0,0,0,2155,2156,5,93,0,0,2156,2159,
		5,3,0,0,2157,2159,5,3,0,0,2158,2155,1,0,0,0,2158,2157,1,0,0,0,2159,385,
		1,0,0,0,2160,2161,4,193,9,0,2161,2162,5,90,0,0,2162,387,1,0,0,0,2163,2164,
		4,194,10,0,2164,2165,5,90,0,0,2165,389,1,0,0,0,2166,2167,4,195,11,0,2167,
		2168,5,90,0,0,2168,391,1,0,0,0,2169,2170,4,196,12,0,2170,2171,5,90,0,0,
		2171,393,1,0,0,0,2172,2173,4,197,13,0,2173,2174,5,90,0,0,2174,395,1,0,
		0,0,288,397,407,414,422,432,436,444,451,455,473,483,490,497,503,510,514,
		517,523,525,529,535,541,543,551,560,572,576,585,596,600,605,611,618,624,
		631,637,647,656,664,670,675,679,682,691,696,700,705,709,716,720,725,729,
		732,740,746,750,756,760,765,770,774,779,782,785,790,794,799,805,809,816,
		820,827,831,838,841,844,851,854,858,861,866,869,873,876,879,883,903,905,
		913,915,926,929,937,941,944,953,957,967,972,974,981,994,997,1000,1008,
		1011,1014,1016,1022,1024,1034,1051,1058,1061,1066,1076,1080,1091,1102,
		1110,1118,1125,1130,1151,1158,1167,1172,1175,1180,1187,1191,1195,1205,
		1213,1216,1220,1227,1232,1245,1248,1251,1253,1262,1270,1280,1294,1298,
		1302,1308,1318,1322,1330,1333,1339,1341,1348,1352,1357,1364,1368,1373,
		1381,1388,1396,1402,1408,1421,1463,1474,1485,1496,1507,1518,1528,1533,
		1538,1549,1556,1560,1566,1571,1575,1579,1581,1584,1588,1592,1594,1597,
		1608,1612,1618,1621,1626,1632,1643,1649,1653,1659,1663,1668,1673,1677,
		1682,1685,1688,1693,1697,1702,1708,1712,1719,1723,1730,1733,1736,1743,
		1748,1752,1755,1761,1766,1769,1772,1775,1786,1791,1797,1806,1808,1812,
		1820,1822,1832,1841,1845,1850,1859,1862,1872,1888,1900,1905,1907,1913,
		1915,1919,1924,1927,1934,1943,1946,1953,1956,1965,1972,1979,1983,1990,
		1993,2001,2004,2006,2011,2020,2023,2032,2037,2040,2048,2057,2072,2075,
		2079,2087,2091,2100,2103,2112,2117,2120,2127,2136,2140,2142,2149,2153,
		2158
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace GameVM.Compiler.Python.ANTLR
