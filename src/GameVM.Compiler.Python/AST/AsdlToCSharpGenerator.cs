using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

public class AsdlToCSharpGenerator
{
    private readonly Module _module;

    public AsdlToCSharpGenerator(Module module)
    {
        _module = module;
    }

    public void GenerateCode(string outputPath)
    {
        using (var writer = new StreamWriter(outputPath))
        {
            writer.WriteLine("// File automatically generated by AsdlToCSharpGenerator.");
            writer.WriteLine();
            writer.WriteLine("using System;");
            writer.WriteLine("using System.Collections.Generic;");
            writer.WriteLine();

            foreach (var type in _module.Definitions)
            {
                VisitType(type, writer);
            }
        }
    }

    private void VisitType(Type type, StreamWriter writer)
    {
        if (type.Value is Sum sum)
        {
            VisitSum(type.Name, sum, writer);
        }
        else if (type.Value is Product product)
        {
            VisitProduct(type.Name, product, writer);
        }
    }

    private void VisitSum(string name, Sum sum, StreamWriter writer)
    {
        writer.WriteLine($"public abstract class {name}");
        writer.WriteLine("{");

        foreach (var attribute in sum.Attributes)
        {
            writer.WriteLine($"    public {GetCSharpType(attribute)} {attribute.Name} {{ get; set; }}");
        }

        writer.WriteLine("}");
        writer.WriteLine();

        foreach (var constructor in sum.Types)
        {
            writer.WriteLine($"public class {constructor.Name} : {name}");
            writer.WriteLine("{");

            foreach (var field in constructor.Fields)
            {
                writer.WriteLine($"    public {GetCSharpType(field)} {field.Name} {{ get; set; }}");
            }

            writer.WriteLine("}");
            writer.WriteLine();
        }
    }

    private void VisitProduct(string name, Product product, StreamWriter writer)
    {
        writer.WriteLine($"public class {name}");
        writer.WriteLine("{");

        foreach (var field in product.Fields)
        {
            writer.WriteLine($"    public {GetCSharpType(field)} {field.Name} {{ get; set; }}");
        }

        foreach (var attribute in product.Attributes)
        {
            writer.WriteLine($"    public {GetCSharpType(attribute)} {attribute.Name} {{ get; set; }}");
        }

        writer.WriteLine("}");
        writer.WriteLine();
    }

    private string GetCSharpType(Field field)
    {
        var type = field.Type switch
        {
            "identifier" => "string",
            "string" => "string",
            "int" => "int",
            "constant" => "object",
            _ => field.Type
        };

        if (field.IsSequence)
        {
            type = $"List<{type}>";
        }

        if (field.IsOptional)
        {
            type += "?";
        }

        return type;
    }
}
