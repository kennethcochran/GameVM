//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/kenne/source/repos/GameVM/src/GameVM.Compiler.Pascal/ANTLR/Pascal.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="PascalParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IPascalListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] PascalParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] PascalParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.programHeading"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgramHeading([NotNull] PascalParser.ProgramHeadingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.programHeading"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgramHeading([NotNull] PascalParser.ProgramHeadingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] PascalParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] PascalParser.IdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] PascalParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] PascalParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.usesUnitsPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUsesUnitsPart([NotNull] PascalParser.UsesUnitsPartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.usesUnitsPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUsesUnitsPart([NotNull] PascalParser.UsesUnitsPartContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.labelDeclarationPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLabelDeclarationPart([NotNull] PascalParser.LabelDeclarationPartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.labelDeclarationPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLabelDeclarationPart([NotNull] PascalParser.LabelDeclarationPartContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.label"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLabel([NotNull] PascalParser.LabelContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.label"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLabel([NotNull] PascalParser.LabelContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.constantDefinitionPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstantDefinitionPart([NotNull] PascalParser.ConstantDefinitionPartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.constantDefinitionPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstantDefinitionPart([NotNull] PascalParser.ConstantDefinitionPartContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.constantDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstantDefinition([NotNull] PascalParser.ConstantDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.constantDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstantDefinition([NotNull] PascalParser.ConstantDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.constantChr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstantChr([NotNull] PascalParser.ConstantChrContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.constantChr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstantChr([NotNull] PascalParser.ConstantChrContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstant([NotNull] PascalParser.ConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstant([NotNull] PascalParser.ConstantContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.unsignedNumber"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnsignedNumber([NotNull] PascalParser.UnsignedNumberContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.unsignedNumber"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnsignedNumber([NotNull] PascalParser.UnsignedNumberContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.unsignedInteger"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnsignedInteger([NotNull] PascalParser.UnsignedIntegerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.unsignedInteger"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnsignedInteger([NotNull] PascalParser.UnsignedIntegerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.unsignedReal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnsignedReal([NotNull] PascalParser.UnsignedRealContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.unsignedReal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnsignedReal([NotNull] PascalParser.UnsignedRealContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.sign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSign([NotNull] PascalParser.SignContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.sign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSign([NotNull] PascalParser.SignContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.bool_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBool_([NotNull] PascalParser.Bool_Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.bool_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBool_([NotNull] PascalParser.Bool_Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.string"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterString([NotNull] PascalParser.StringContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.string"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitString([NotNull] PascalParser.StringContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.typeDefinitionPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeDefinitionPart([NotNull] PascalParser.TypeDefinitionPartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.typeDefinitionPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeDefinitionPart([NotNull] PascalParser.TypeDefinitionPartContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.typeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeDefinition([NotNull] PascalParser.TypeDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.typeDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeDefinition([NotNull] PascalParser.TypeDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.functionType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionType([NotNull] PascalParser.FunctionTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.functionType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionType([NotNull] PascalParser.FunctionTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.procedureType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcedureType([NotNull] PascalParser.ProcedureTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.procedureType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcedureType([NotNull] PascalParser.ProcedureTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.type_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_([NotNull] PascalParser.Type_Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.type_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_([NotNull] PascalParser.Type_Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.simpleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleType([NotNull] PascalParser.SimpleTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.simpleType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleType([NotNull] PascalParser.SimpleTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.scalarType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterScalarType([NotNull] PascalParser.ScalarTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.scalarType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitScalarType([NotNull] PascalParser.ScalarTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.subrangeType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubrangeType([NotNull] PascalParser.SubrangeTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.subrangeType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubrangeType([NotNull] PascalParser.SubrangeTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.typeIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeIdentifier([NotNull] PascalParser.TypeIdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.typeIdentifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeIdentifier([NotNull] PascalParser.TypeIdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.structuredType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructuredType([NotNull] PascalParser.StructuredTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.structuredType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructuredType([NotNull] PascalParser.StructuredTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.unpackedStructuredType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnpackedStructuredType([NotNull] PascalParser.UnpackedStructuredTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.unpackedStructuredType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnpackedStructuredType([NotNull] PascalParser.UnpackedStructuredTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.stringtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringtype([NotNull] PascalParser.StringtypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.stringtype"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringtype([NotNull] PascalParser.StringtypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.arrayType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayType([NotNull] PascalParser.ArrayTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.arrayType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayType([NotNull] PascalParser.ArrayTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.typeList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeList([NotNull] PascalParser.TypeListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.typeList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeList([NotNull] PascalParser.TypeListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.indexType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexType([NotNull] PascalParser.IndexTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.indexType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexType([NotNull] PascalParser.IndexTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.componentType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComponentType([NotNull] PascalParser.ComponentTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.componentType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComponentType([NotNull] PascalParser.ComponentTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.recordType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRecordType([NotNull] PascalParser.RecordTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.recordType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRecordType([NotNull] PascalParser.RecordTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.fieldList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFieldList([NotNull] PascalParser.FieldListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.fieldList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFieldList([NotNull] PascalParser.FieldListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.fixedPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFixedPart([NotNull] PascalParser.FixedPartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.fixedPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFixedPart([NotNull] PascalParser.FixedPartContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.recordSection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRecordSection([NotNull] PascalParser.RecordSectionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.recordSection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRecordSection([NotNull] PascalParser.RecordSectionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.variantPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariantPart([NotNull] PascalParser.VariantPartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.variantPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariantPart([NotNull] PascalParser.VariantPartContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.tag"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTag([NotNull] PascalParser.TagContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.tag"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTag([NotNull] PascalParser.TagContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.variant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariant([NotNull] PascalParser.VariantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.variant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariant([NotNull] PascalParser.VariantContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.setType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetType([NotNull] PascalParser.SetTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.setType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetType([NotNull] PascalParser.SetTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.baseType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBaseType([NotNull] PascalParser.BaseTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.baseType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBaseType([NotNull] PascalParser.BaseTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.fileType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFileType([NotNull] PascalParser.FileTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.fileType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFileType([NotNull] PascalParser.FileTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.pointerType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPointerType([NotNull] PascalParser.PointerTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.pointerType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPointerType([NotNull] PascalParser.PointerTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.variableDeclarationPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclarationPart([NotNull] PascalParser.VariableDeclarationPartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.variableDeclarationPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclarationPart([NotNull] PascalParser.VariableDeclarationPartContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclaration([NotNull] PascalParser.VariableDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclaration([NotNull] PascalParser.VariableDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.procedureAndFunctionDeclarationPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcedureAndFunctionDeclarationPart([NotNull] PascalParser.ProcedureAndFunctionDeclarationPartContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.procedureAndFunctionDeclarationPart"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcedureAndFunctionDeclarationPart([NotNull] PascalParser.ProcedureAndFunctionDeclarationPartContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.procedureOrFunctionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcedureOrFunctionDeclaration([NotNull] PascalParser.ProcedureOrFunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.procedureOrFunctionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcedureOrFunctionDeclaration([NotNull] PascalParser.ProcedureOrFunctionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.procedureDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcedureDeclaration([NotNull] PascalParser.ProcedureDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.procedureDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcedureDeclaration([NotNull] PascalParser.ProcedureDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.formalParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormalParameterList([NotNull] PascalParser.FormalParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.formalParameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormalParameterList([NotNull] PascalParser.FormalParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.formalParameterSection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFormalParameterSection([NotNull] PascalParser.FormalParameterSectionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.formalParameterSection"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFormalParameterSection([NotNull] PascalParser.FormalParameterSectionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.parameterGroup"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameterGroup([NotNull] PascalParser.ParameterGroupContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.parameterGroup"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameterGroup([NotNull] PascalParser.ParameterGroupContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.identifierList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierList([NotNull] PascalParser.IdentifierListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.identifierList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierList([NotNull] PascalParser.IdentifierListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.constList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstList([NotNull] PascalParser.ConstListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.constList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstList([NotNull] PascalParser.ConstListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDeclaration([NotNull] PascalParser.FunctionDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.functionDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDeclaration([NotNull] PascalParser.FunctionDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.resultType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterResultType([NotNull] PascalParser.ResultTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.resultType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitResultType([NotNull] PascalParser.ResultTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] PascalParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] PascalParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.unlabelledStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnlabelledStatement([NotNull] PascalParser.UnlabelledStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.unlabelledStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnlabelledStatement([NotNull] PascalParser.UnlabelledStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.simpleStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleStatement([NotNull] PascalParser.SimpleStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.simpleStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleStatement([NotNull] PascalParser.SimpleStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.assignmentStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentStatement([NotNull] PascalParser.AssignmentStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.assignmentStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentStatement([NotNull] PascalParser.AssignmentStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariable([NotNull] PascalParser.VariableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.variable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariable([NotNull] PascalParser.VariableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] PascalParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] PascalParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.relationaloperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelationaloperator([NotNull] PascalParser.RelationaloperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.relationaloperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelationaloperator([NotNull] PascalParser.RelationaloperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.simpleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleExpression([NotNull] PascalParser.SimpleExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.simpleExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleExpression([NotNull] PascalParser.SimpleExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.additiveoperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditiveoperator([NotNull] PascalParser.AdditiveoperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.additiveoperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditiveoperator([NotNull] PascalParser.AdditiveoperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerm([NotNull] PascalParser.TermContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerm([NotNull] PascalParser.TermContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.multiplicativeoperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicativeoperator([NotNull] PascalParser.MultiplicativeoperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.multiplicativeoperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicativeoperator([NotNull] PascalParser.MultiplicativeoperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.signedFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSignedFactor([NotNull] PascalParser.SignedFactorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.signedFactor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSignedFactor([NotNull] PascalParser.SignedFactorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFactor([NotNull] PascalParser.FactorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.factor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFactor([NotNull] PascalParser.FactorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.unsignedConstant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnsignedConstant([NotNull] PascalParser.UnsignedConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.unsignedConstant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnsignedConstant([NotNull] PascalParser.UnsignedConstantContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.functionDesignator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDesignator([NotNull] PascalParser.FunctionDesignatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.functionDesignator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDesignator([NotNull] PascalParser.FunctionDesignatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.parameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameterList([NotNull] PascalParser.ParameterListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.parameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameterList([NotNull] PascalParser.ParameterListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.set_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSet_([NotNull] PascalParser.Set_Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.set_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSet_([NotNull] PascalParser.Set_Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.elementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElementList([NotNull] PascalParser.ElementListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.elementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElementList([NotNull] PascalParser.ElementListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElement([NotNull] PascalParser.ElementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElement([NotNull] PascalParser.ElementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.procedureStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcedureStatement([NotNull] PascalParser.ProcedureStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.procedureStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcedureStatement([NotNull] PascalParser.ProcedureStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.actualParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterActualParameter([NotNull] PascalParser.ActualParameterContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.actualParameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitActualParameter([NotNull] PascalParser.ActualParameterContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.parameterwidth"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameterwidth([NotNull] PascalParser.ParameterwidthContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.parameterwidth"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameterwidth([NotNull] PascalParser.ParameterwidthContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.gotoStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGotoStatement([NotNull] PascalParser.GotoStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.gotoStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGotoStatement([NotNull] PascalParser.GotoStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.emptyStatement_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmptyStatement_([NotNull] PascalParser.EmptyStatement_Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.emptyStatement_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmptyStatement_([NotNull] PascalParser.EmptyStatement_Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.empty_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmpty_([NotNull] PascalParser.Empty_Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.empty_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmpty_([NotNull] PascalParser.Empty_Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.structuredStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStructuredStatement([NotNull] PascalParser.StructuredStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.structuredStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStructuredStatement([NotNull] PascalParser.StructuredStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.compoundStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompoundStatement([NotNull] PascalParser.CompoundStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.compoundStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompoundStatement([NotNull] PascalParser.CompoundStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatements([NotNull] PascalParser.StatementsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.statements"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatements([NotNull] PascalParser.StatementsContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.conditionalStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionalStatement([NotNull] PascalParser.ConditionalStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.conditionalStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionalStatement([NotNull] PascalParser.ConditionalStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] PascalParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] PascalParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.caseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseStatement([NotNull] PascalParser.CaseStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.caseStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseStatement([NotNull] PascalParser.CaseStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.caseListElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCaseListElement([NotNull] PascalParser.CaseListElementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.caseListElement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCaseListElement([NotNull] PascalParser.CaseListElementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.repetetiveStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRepetetiveStatement([NotNull] PascalParser.RepetetiveStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.repetetiveStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRepetetiveStatement([NotNull] PascalParser.RepetetiveStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] PascalParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] PascalParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.repeatStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRepeatStatement([NotNull] PascalParser.RepeatStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.repeatStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRepeatStatement([NotNull] PascalParser.RepeatStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] PascalParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] PascalParser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.forList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForList([NotNull] PascalParser.ForListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.forList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForList([NotNull] PascalParser.ForListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.initialValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInitialValue([NotNull] PascalParser.InitialValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.initialValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInitialValue([NotNull] PascalParser.InitialValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.finalValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFinalValue([NotNull] PascalParser.FinalValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.finalValue"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFinalValue([NotNull] PascalParser.FinalValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.withStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWithStatement([NotNull] PascalParser.WithStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.withStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWithStatement([NotNull] PascalParser.WithStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="PascalParser.recordVariableList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRecordVariableList([NotNull] PascalParser.RecordVariableListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="PascalParser.recordVariableList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRecordVariableList([NotNull] PascalParser.RecordVariableListContext context);
}
